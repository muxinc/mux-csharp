/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiveStreamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a live stream
        /// </summary>
        /// <remarks>
        /// Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse CreateLiveStream(CreateLiveStreamRequest createLiveStreamRequest);

        /// <summary>
        /// Create a live stream
        /// </summary>
        /// <remarks>
        /// Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> CreateLiveStreamWithHttpInfo(CreateLiveStreamRequest createLiveStreamRequest);
        /// <summary>
        /// Create a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>CreatePlaybackIDResponse</returns>
        CreatePlaybackIDResponse CreateLiveStreamPlaybackId(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest);

        /// <summary>
        /// Create a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>ApiResponse of CreatePlaybackIDResponse</returns>
        ApiResponse<CreatePlaybackIDResponse> CreateLiveStreamPlaybackIdWithHttpInfo(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest);
        /// <summary>
        /// Create a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <returns>SimulcastTargetResponse</returns>
        SimulcastTargetResponse CreateLiveStreamSimulcastTarget(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest);

        /// <summary>
        /// Create a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <returns>ApiResponse of SimulcastTargetResponse</returns>
        ApiResponse<SimulcastTargetResponse> CreateLiveStreamSimulcastTargetWithHttpInfo(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest);
        /// <summary>
        /// Delete a live stream
        /// </summary>
        /// <remarks>
        /// Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns></returns>
        void DeleteLiveStream(string LIVE_STREAM_ID);

        /// <summary>
        /// Delete a live stream
        /// </summary>
        /// <remarks>
        /// Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLiveStreamWithHttpInfo(string LIVE_STREAM_ID);
        /// <summary>
        /// Delete a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns></returns>
        void DeleteLiveStreamPlaybackId(string LIVE_STREAM_ID, string PLAYBACK_ID);

        /// <summary>
        /// Delete a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLiveStreamPlaybackIdWithHttpInfo(string LIVE_STREAM_ID, string PLAYBACK_ID);
        /// <summary>
        /// Delete a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns></returns>
        void DeleteLiveStreamSimulcastTarget(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID);

        /// <summary>
        /// Delete a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLiveStreamSimulcastTargetWithHttpInfo(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID);
        /// <summary>
        /// Disable a live stream
        /// </summary>
        /// <remarks>
        /// Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>DisableLiveStreamResponse</returns>
        DisableLiveStreamResponse DisableLiveStream(string LIVE_STREAM_ID);

        /// <summary>
        /// Disable a live stream
        /// </summary>
        /// <remarks>
        /// Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of DisableLiveStreamResponse</returns>
        ApiResponse<DisableLiveStreamResponse> DisableLiveStreamWithHttpInfo(string LIVE_STREAM_ID);
        /// <summary>
        /// Enable a live stream
        /// </summary>
        /// <remarks>
        /// Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>EnableLiveStreamResponse</returns>
        EnableLiveStreamResponse EnableLiveStream(string LIVE_STREAM_ID);

        /// <summary>
        /// Enable a live stream
        /// </summary>
        /// <remarks>
        /// Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of EnableLiveStreamResponse</returns>
        ApiResponse<EnableLiveStreamResponse> EnableLiveStreamWithHttpInfo(string LIVE_STREAM_ID);
        /// <summary>
        /// Retrieve a live stream
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse GetLiveStream(string LIVE_STREAM_ID);

        /// <summary>
        /// Retrieve a live stream
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> GetLiveStreamWithHttpInfo(string LIVE_STREAM_ID);
        /// <summary>
        /// Retrieve a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>GetLiveStreamPlaybackIDResponse</returns>
        GetLiveStreamPlaybackIDResponse GetLiveStreamPlaybackId(string LIVE_STREAM_ID, string PLAYBACK_ID);

        /// <summary>
        /// Retrieve a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of GetLiveStreamPlaybackIDResponse</returns>
        ApiResponse<GetLiveStreamPlaybackIDResponse> GetLiveStreamPlaybackIdWithHttpInfo(string LIVE_STREAM_ID, string PLAYBACK_ID);
        /// <summary>
        /// Retrieve a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns>SimulcastTargetResponse</returns>
        SimulcastTargetResponse GetLiveStreamSimulcastTarget(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID);

        /// <summary>
        /// Retrieve a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns>ApiResponse of SimulcastTargetResponse</returns>
        ApiResponse<SimulcastTargetResponse> GetLiveStreamSimulcastTargetWithHttpInfo(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID);
        /// <summary>
        /// List live streams
        /// </summary>
        /// <remarks>
        /// Lists the live streams that currently exist in the current environment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <returns>ListLiveStreamsResponse</returns>
        ListLiveStreamsResponse ListLiveStreams(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?));

        /// <summary>
        /// List live streams
        /// </summary>
        /// <remarks>
        /// Lists the live streams that currently exist in the current environment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <returns>ApiResponse of ListLiveStreamsResponse</returns>
        ApiResponse<ListLiveStreamsResponse> ListLiveStreamsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?));
        /// <summary>
        /// Reset a live stream&#39;s stream key
        /// </summary>
        /// <remarks>
        /// Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse ResetStreamKey(string LIVE_STREAM_ID);

        /// <summary>
        /// Reset a live stream&#39;s stream key
        /// </summary>
        /// <remarks>
        /// Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> ResetStreamKeyWithHttpInfo(string LIVE_STREAM_ID);
        /// <summary>
        /// Signal a live stream is finished
        /// </summary>
        /// <remarks>
        /// (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>SignalLiveStreamCompleteResponse</returns>
        SignalLiveStreamCompleteResponse SignalLiveStreamComplete(string LIVE_STREAM_ID);

        /// <summary>
        /// Signal a live stream is finished
        /// </summary>
        /// <remarks>
        /// (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of SignalLiveStreamCompleteResponse</returns>
        ApiResponse<SignalLiveStreamCompleteResponse> SignalLiveStreamCompleteWithHttpInfo(string LIVE_STREAM_ID);
        /// <summary>
        /// Update a live stream
        /// </summary>
        /// <remarks>
        /// Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse UpdateLiveStream(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest);

        /// <summary>
        /// Update a live stream
        /// </summary>
        /// <remarks>
        /// Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> UpdateLiveStreamWithHttpInfo(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest);
        /// <summary>
        /// Update a live stream&#39;s embedded subtitles
        /// </summary>
        /// <remarks>
        /// Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse UpdateLiveStreamEmbeddedSubtitles(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest);

        /// <summary>
        /// Update a live stream&#39;s embedded subtitles
        /// </summary>
        /// <remarks>
        /// Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> UpdateLiveStreamEmbeddedSubtitlesWithHttpInfo(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest);
        /// <summary>
        /// Update a live stream&#39;s generated subtitles
        /// </summary>
        /// <remarks>
        /// Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        LiveStreamResponse UpdateLiveStreamGeneratedSubtitles(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest);

        /// <summary>
        /// Update a live stream&#39;s generated subtitles
        /// </summary>
        /// <remarks>
        /// Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        ApiResponse<LiveStreamResponse> UpdateLiveStreamGeneratedSubtitlesWithHttpInfo(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiveStreamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a live stream
        /// </summary>
        /// <remarks>
        /// Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> CreateLiveStreamAsync(CreateLiveStreamRequest createLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a live stream
        /// </summary>
        /// <remarks>
        /// Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> CreateLiveStreamWithHttpInfoAsync(CreateLiveStreamRequest createLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlaybackIDResponse</returns>
        System.Threading.Tasks.Task<CreatePlaybackIDResponse> CreateLiveStreamPlaybackIdAsync(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlaybackIDResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePlaybackIDResponse>> CreateLiveStreamPlaybackIdWithHttpInfoAsync(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulcastTargetResponse</returns>
        System.Threading.Tasks.Task<SimulcastTargetResponse> CreateLiveStreamSimulcastTargetAsync(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulcastTargetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulcastTargetResponse>> CreateLiveStreamSimulcastTargetWithHttpInfoAsync(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a live stream
        /// </summary>
        /// <remarks>
        /// Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a live stream
        /// </summary>
        /// <remarks>
        /// Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLiveStreamPlaybackIdAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLiveStreamPlaybackIdWithHttpInfoAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLiveStreamSimulcastTargetAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLiveStreamSimulcastTargetWithHttpInfoAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable a live stream
        /// </summary>
        /// <remarks>
        /// Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DisableLiveStreamResponse</returns>
        System.Threading.Tasks.Task<DisableLiveStreamResponse> DisableLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable a live stream
        /// </summary>
        /// <remarks>
        /// Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DisableLiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisableLiveStreamResponse>> DisableLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable a live stream
        /// </summary>
        /// <remarks>
        /// Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableLiveStreamResponse</returns>
        System.Threading.Tasks.Task<EnableLiveStreamResponse> EnableLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable a live stream
        /// </summary>
        /// <remarks>
        /// Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableLiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EnableLiveStreamResponse>> EnableLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a live stream
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> GetLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a live stream
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> GetLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLiveStreamPlaybackIDResponse</returns>
        System.Threading.Tasks.Task<GetLiveStreamPlaybackIDResponse> GetLiveStreamPlaybackIdAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a live stream playback ID
        /// </summary>
        /// <remarks>
        /// Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLiveStreamPlaybackIDResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLiveStreamPlaybackIDResponse>> GetLiveStreamPlaybackIdWithHttpInfoAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulcastTargetResponse</returns>
        System.Threading.Tasks.Task<SimulcastTargetResponse> GetLiveStreamSimulcastTargetAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a live stream simulcast target
        /// </summary>
        /// <remarks>
        /// Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulcastTargetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimulcastTargetResponse>> GetLiveStreamSimulcastTargetWithHttpInfoAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List live streams
        /// </summary>
        /// <remarks>
        /// Lists the live streams that currently exist in the current environment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLiveStreamsResponse</returns>
        System.Threading.Tasks.Task<ListLiveStreamsResponse> ListLiveStreamsAsync(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List live streams
        /// </summary>
        /// <remarks>
        /// Lists the live streams that currently exist in the current environment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLiveStreamsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLiveStreamsResponse>> ListLiveStreamsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reset a live stream&#39;s stream key
        /// </summary>
        /// <remarks>
        /// Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> ResetStreamKeyAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reset a live stream&#39;s stream key
        /// </summary>
        /// <remarks>
        /// Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> ResetStreamKeyWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Signal a live stream is finished
        /// </summary>
        /// <remarks>
        /// (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalLiveStreamCompleteResponse</returns>
        System.Threading.Tasks.Task<SignalLiveStreamCompleteResponse> SignalLiveStreamCompleteAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Signal a live stream is finished
        /// </summary>
        /// <remarks>
        /// (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalLiveStreamCompleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignalLiveStreamCompleteResponse>> SignalLiveStreamCompleteWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a live stream
        /// </summary>
        /// <remarks>
        /// Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> UpdateLiveStreamAsync(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a live stream
        /// </summary>
        /// <remarks>
        /// Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> UpdateLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a live stream&#39;s embedded subtitles
        /// </summary>
        /// <remarks>
        /// Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> UpdateLiveStreamEmbeddedSubtitlesAsync(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a live stream&#39;s embedded subtitles
        /// </summary>
        /// <remarks>
        /// Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> UpdateLiveStreamEmbeddedSubtitlesWithHttpInfoAsync(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a live stream&#39;s generated subtitles
        /// </summary>
        /// <remarks>
        /// Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        System.Threading.Tasks.Task<LiveStreamResponse> UpdateLiveStreamGeneratedSubtitlesAsync(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a live stream&#39;s generated subtitles
        /// </summary>
        /// <remarks>
        /// Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LiveStreamResponse>> UpdateLiveStreamGeneratedSubtitlesWithHttpInfoAsync(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILiveStreamsApi : ILiveStreamsApiSync, ILiveStreamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LiveStreamsApi : ILiveStreamsApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveStreamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiveStreamsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveStreamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LiveStreamsApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveStreamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LiveStreamsApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LiveStreamsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LiveStreamsApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a live stream Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse CreateLiveStream(CreateLiveStreamRequest createLiveStreamRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = CreateLiveStreamWithHttpInfo(createLiveStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a live stream Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> CreateLiveStreamWithHttpInfo(CreateLiveStreamRequest createLiveStreamRequest)
        {
            // verify the required parameter 'createLiveStreamRequest' is set
            if (createLiveStreamRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createLiveStreamRequest' when calling LiveStreamsApi->CreateLiveStream");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLiveStreamRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LiveStreamResponse>("/video/v1/live-streams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a live stream Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> CreateLiveStreamAsync(CreateLiveStreamRequest createLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = await CreateLiveStreamWithHttpInfoAsync(createLiveStreamRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a live stream Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse>> CreateLiveStreamWithHttpInfoAsync(CreateLiveStreamRequest createLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createLiveStreamRequest' is set
            if (createLiveStreamRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createLiveStreamRequest' when calling LiveStreamsApi->CreateLiveStream");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLiveStreamRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LiveStreamResponse>("/video/v1/live-streams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a live stream playback ID Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>CreatePlaybackIDResponse</returns>
        public CreatePlaybackIDResponse CreateLiveStreamPlaybackId(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse> localVarResponse = CreateLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, createPlaybackIDRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a live stream playback ID Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>ApiResponse of CreatePlaybackIDResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse> CreateLiveStreamPlaybackIdWithHttpInfo(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->CreateLiveStreamPlaybackId");
            }

            // verify the required parameter 'createPlaybackIDRequest' is set
            if (createPlaybackIDRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createPlaybackIDRequest' when calling LiveStreamsApi->CreateLiveStreamPlaybackId");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = createPlaybackIDRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePlaybackIDResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLiveStreamPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a live stream playback ID Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlaybackIDResponse</returns>
        public async System.Threading.Tasks.Task<CreatePlaybackIDResponse> CreateLiveStreamPlaybackIdAsync(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse> localVarResponse = await CreateLiveStreamPlaybackIdWithHttpInfoAsync(LIVE_STREAM_ID, createPlaybackIDRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a live stream playback ID Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlaybackIDResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse>> CreateLiveStreamPlaybackIdWithHttpInfoAsync(string LIVE_STREAM_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->CreateLiveStreamPlaybackId");
            }

            // verify the required parameter 'createPlaybackIDRequest' is set
            if (createPlaybackIDRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createPlaybackIDRequest' when calling LiveStreamsApi->CreateLiveStreamPlaybackId");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = createPlaybackIDRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePlaybackIDResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLiveStreamPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a live stream simulcast target Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <returns>SimulcastTargetResponse</returns>
        public SimulcastTargetResponse CreateLiveStreamSimulcastTarget(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse> localVarResponse = CreateLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, createSimulcastTargetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a live stream simulcast target Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <returns>ApiResponse of SimulcastTargetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse> CreateLiveStreamSimulcastTargetWithHttpInfo(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->CreateLiveStreamSimulcastTarget");
            }

            // verify the required parameter 'createSimulcastTargetRequest' is set
            if (createSimulcastTargetRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createSimulcastTargetRequest' when calling LiveStreamsApi->CreateLiveStreamSimulcastTarget");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = createSimulcastTargetRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulcastTargetResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLiveStreamSimulcastTarget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a live stream simulcast target Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulcastTargetResponse</returns>
        public async System.Threading.Tasks.Task<SimulcastTargetResponse> CreateLiveStreamSimulcastTargetAsync(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse> localVarResponse = await CreateLiveStreamSimulcastTargetWithHttpInfoAsync(LIVE_STREAM_ID, createSimulcastTargetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a live stream simulcast target Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="createSimulcastTargetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulcastTargetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse>> CreateLiveStreamSimulcastTargetWithHttpInfoAsync(string LIVE_STREAM_ID, CreateSimulcastTargetRequest createSimulcastTargetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->CreateLiveStreamSimulcastTarget");
            }

            // verify the required parameter 'createSimulcastTargetRequest' is set
            if (createSimulcastTargetRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createSimulcastTargetRequest' when calling LiveStreamsApi->CreateLiveStreamSimulcastTarget");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = createSimulcastTargetRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SimulcastTargetResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLiveStreamSimulcastTarget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a live stream Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns></returns>
        public void DeleteLiveStream(string LIVE_STREAM_ID)
        {
            DeleteLiveStreamWithHttpInfo(LIVE_STREAM_ID);
        }

        /// <summary>
        /// Delete a live stream Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteLiveStreamWithHttpInfo(string LIVE_STREAM_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DeleteLiveStream");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/live-streams/{LIVE_STREAM_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a live stream Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteLiveStreamWithHttpInfoAsync(LIVE_STREAM_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a live stream Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DeleteLiveStream");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/live-streams/{LIVE_STREAM_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a live stream playback ID Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns></returns>
        public void DeleteLiveStreamPlaybackId(string LIVE_STREAM_ID, string PLAYBACK_ID)
        {
            DeleteLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
        }

        /// <summary>
        /// Delete a live stream playback ID Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteLiveStreamPlaybackIdWithHttpInfo(string LIVE_STREAM_ID, string PLAYBACK_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DeleteLiveStreamPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling LiveStreamsApi->DeleteLiveStreamPlaybackId");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLiveStreamPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a live stream playback ID Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLiveStreamPlaybackIdAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteLiveStreamPlaybackIdWithHttpInfoAsync(LIVE_STREAM_ID, PLAYBACK_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a live stream playback ID Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteLiveStreamPlaybackIdWithHttpInfoAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DeleteLiveStreamPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling LiveStreamsApi->DeleteLiveStreamPlaybackId");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLiveStreamPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a live stream simulcast target Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns></returns>
        public void DeleteLiveStreamSimulcastTarget(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID)
        {
            DeleteLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
        }

        /// <summary>
        /// Delete a live stream simulcast target Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteLiveStreamSimulcastTargetWithHttpInfo(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DeleteLiveStreamSimulcastTarget");
            }

            // verify the required parameter 'SIMULCAST_TARGET_ID' is set
            if (SIMULCAST_TARGET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SIMULCAST_TARGET_ID' when calling LiveStreamsApi->DeleteLiveStreamSimulcastTarget");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("SIMULCAST_TARGET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SIMULCAST_TARGET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLiveStreamSimulcastTarget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a live stream simulcast target Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLiveStreamSimulcastTargetAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteLiveStreamSimulcastTargetWithHttpInfoAsync(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a live stream simulcast target Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteLiveStreamSimulcastTargetWithHttpInfoAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DeleteLiveStreamSimulcastTarget");
            }

            // verify the required parameter 'SIMULCAST_TARGET_ID' is set
            if (SIMULCAST_TARGET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SIMULCAST_TARGET_ID' when calling LiveStreamsApi->DeleteLiveStreamSimulcastTarget");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("SIMULCAST_TARGET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SIMULCAST_TARGET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLiveStreamSimulcastTarget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a live stream Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>DisableLiveStreamResponse</returns>
        public DisableLiveStreamResponse DisableLiveStream(string LIVE_STREAM_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<DisableLiveStreamResponse> localVarResponse = DisableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a live stream Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of DisableLiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<DisableLiveStreamResponse> DisableLiveStreamWithHttpInfo(string LIVE_STREAM_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DisableLiveStream");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DisableLiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/disable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a live stream Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DisableLiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<DisableLiveStreamResponse> DisableLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<DisableLiveStreamResponse> localVarResponse = await DisableLiveStreamWithHttpInfoAsync(LIVE_STREAM_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a live stream Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DisableLiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<DisableLiveStreamResponse>> DisableLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->DisableLiveStream");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DisableLiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable a live stream Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>EnableLiveStreamResponse</returns>
        public EnableLiveStreamResponse EnableLiveStream(string LIVE_STREAM_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<EnableLiveStreamResponse> localVarResponse = EnableLiveStreamWithHttpInfo(LIVE_STREAM_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a live stream Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of EnableLiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<EnableLiveStreamResponse> EnableLiveStreamWithHttpInfo(string LIVE_STREAM_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->EnableLiveStream");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EnableLiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/enable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable a live stream Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EnableLiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<EnableLiveStreamResponse> EnableLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<EnableLiveStreamResponse> localVarResponse = await EnableLiveStreamWithHttpInfoAsync(LIVE_STREAM_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a live stream Enables a live stream, allowing it to accept an incoming RTMP stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EnableLiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<EnableLiveStreamResponse>> EnableLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->EnableLiveStream");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EnableLiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a live stream Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse GetLiveStream(string LIVE_STREAM_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = GetLiveStreamWithHttpInfo(LIVE_STREAM_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a live stream Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> GetLiveStreamWithHttpInfo(string LIVE_STREAM_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->GetLiveStream");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a live stream Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> GetLiveStreamAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = await GetLiveStreamWithHttpInfoAsync(LIVE_STREAM_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a live stream Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse>> GetLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->GetLiveStream");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a live stream playback ID Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>GetLiveStreamPlaybackIDResponse</returns>
        public GetLiveStreamPlaybackIDResponse GetLiveStreamPlaybackId(string LIVE_STREAM_ID, string PLAYBACK_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetLiveStreamPlaybackIDResponse> localVarResponse = GetLiveStreamPlaybackIdWithHttpInfo(LIVE_STREAM_ID, PLAYBACK_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a live stream playback ID Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of GetLiveStreamPlaybackIDResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<GetLiveStreamPlaybackIDResponse> GetLiveStreamPlaybackIdWithHttpInfo(string LIVE_STREAM_ID, string PLAYBACK_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->GetLiveStreamPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling LiveStreamsApi->GetLiveStreamPlaybackId");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLiveStreamPlaybackIDResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveStreamPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a live stream playback ID Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLiveStreamPlaybackIDResponse</returns>
        public async System.Threading.Tasks.Task<GetLiveStreamPlaybackIDResponse> GetLiveStreamPlaybackIdAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetLiveStreamPlaybackIDResponse> localVarResponse = await GetLiveStreamPlaybackIdWithHttpInfoAsync(LIVE_STREAM_ID, PLAYBACK_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a live stream playback ID Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLiveStreamPlaybackIDResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GetLiveStreamPlaybackIDResponse>> GetLiveStreamPlaybackIdWithHttpInfoAsync(string LIVE_STREAM_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->GetLiveStreamPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling LiveStreamsApi->GetLiveStreamPlaybackId");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLiveStreamPlaybackIDResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveStreamPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a live stream simulcast target Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns>SimulcastTargetResponse</returns>
        public SimulcastTargetResponse GetLiveStreamSimulcastTarget(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse> localVarResponse = GetLiveStreamSimulcastTargetWithHttpInfo(LIVE_STREAM_ID, SIMULCAST_TARGET_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a live stream simulcast target Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <returns>ApiResponse of SimulcastTargetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse> GetLiveStreamSimulcastTargetWithHttpInfo(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->GetLiveStreamSimulcastTarget");
            }

            // verify the required parameter 'SIMULCAST_TARGET_ID' is set
            if (SIMULCAST_TARGET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SIMULCAST_TARGET_ID' when calling LiveStreamsApi->GetLiveStreamSimulcastTarget");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("SIMULCAST_TARGET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SIMULCAST_TARGET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SimulcastTargetResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveStreamSimulcastTarget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a live stream simulcast target Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulcastTargetResponse</returns>
        public async System.Threading.Tasks.Task<SimulcastTargetResponse> GetLiveStreamSimulcastTargetAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse> localVarResponse = await GetLiveStreamSimulcastTargetWithHttpInfoAsync(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a live stream simulcast target Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="SIMULCAST_TARGET_ID">The ID of the simulcast target.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulcastTargetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<SimulcastTargetResponse>> GetLiveStreamSimulcastTargetWithHttpInfoAsync(string LIVE_STREAM_ID, string SIMULCAST_TARGET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->GetLiveStreamSimulcastTarget");
            }

            // verify the required parameter 'SIMULCAST_TARGET_ID' is set
            if (SIMULCAST_TARGET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SIMULCAST_TARGET_ID' when calling LiveStreamsApi->GetLiveStreamSimulcastTarget");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("SIMULCAST_TARGET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SIMULCAST_TARGET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SimulcastTargetResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveStreamSimulcastTarget", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List live streams Lists the live streams that currently exist in the current environment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <returns>ListLiveStreamsResponse</returns>
        public ListLiveStreamsResponse ListLiveStreams(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListLiveStreamsResponse> localVarResponse = ListLiveStreamsWithHttpInfo(limit, page, streamKey, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List live streams Lists the live streams that currently exist in the current environment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <returns>ApiResponse of ListLiveStreamsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListLiveStreamsResponse> ListLiveStreamsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (streamKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stream_key", streamKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLiveStreamsResponse>("/video/v1/live-streams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLiveStreams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List live streams Lists the live streams that currently exist in the current environment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLiveStreamsResponse</returns>
        public async System.Threading.Tasks.Task<ListLiveStreamsResponse> ListLiveStreamsAsync(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListLiveStreamsResponse> localVarResponse = await ListLiveStreamsWithHttpInfoAsync(limit, page, streamKey, status, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List live streams Lists the live streams that currently exist in the current environment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="streamKey">Filter response to return live stream for this stream key only (optional)</param>
        /// <param name="status">Filter response to return live streams with the specified status only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLiveStreamsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListLiveStreamsResponse>> ListLiveStreamsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string streamKey = default(string), LiveStreamStatus? status = default(LiveStreamStatus?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (streamKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "stream_key", streamKey));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLiveStreamsResponse>("/video/v1/live-streams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLiveStreams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset a live stream&#39;s stream key Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse ResetStreamKey(string LIVE_STREAM_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = ResetStreamKeyWithHttpInfo(LIVE_STREAM_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset a live stream&#39;s stream key Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> ResetStreamKeyWithHttpInfo(string LIVE_STREAM_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->ResetStreamKey");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetStreamKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset a live stream&#39;s stream key Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> ResetStreamKeyAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = await ResetStreamKeyWithHttpInfoAsync(LIVE_STREAM_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset a live stream&#39;s stream key Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse>> ResetStreamKeyWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->ResetStreamKey");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetStreamKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signal a live stream is finished (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>SignalLiveStreamCompleteResponse</returns>
        public SignalLiveStreamCompleteResponse SignalLiveStreamComplete(string LIVE_STREAM_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SignalLiveStreamCompleteResponse> localVarResponse = SignalLiveStreamCompleteWithHttpInfo(LIVE_STREAM_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Signal a live stream is finished (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <returns>ApiResponse of SignalLiveStreamCompleteResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<SignalLiveStreamCompleteResponse> SignalLiveStreamCompleteWithHttpInfo(string LIVE_STREAM_ID)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->SignalLiveStreamComplete");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SignalLiveStreamCompleteResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/complete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalLiveStreamComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Signal a live stream is finished (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignalLiveStreamCompleteResponse</returns>
        public async System.Threading.Tasks.Task<SignalLiveStreamCompleteResponse> SignalLiveStreamCompleteAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SignalLiveStreamCompleteResponse> localVarResponse = await SignalLiveStreamCompleteWithHttpInfoAsync(LIVE_STREAM_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Signal a live stream is finished (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignalLiveStreamCompleteResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<SignalLiveStreamCompleteResponse>> SignalLiveStreamCompleteWithHttpInfoAsync(string LIVE_STREAM_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->SignalLiveStreamComplete");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SignalLiveStreamCompleteResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignalLiveStreamComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live stream Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse UpdateLiveStream(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = UpdateLiveStreamWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> UpdateLiveStreamWithHttpInfo(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->UpdateLiveStream");
            }

            // verify the required parameter 'updateLiveStreamRequest' is set
            if (updateLiveStreamRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateLiveStreamRequest' when calling LiveStreamsApi->UpdateLiveStream");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = updateLiveStreamRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live stream Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> UpdateLiveStreamAsync(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = await UpdateLiveStreamWithHttpInfoAsync(LIVE_STREAM_ID, updateLiveStreamRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse>> UpdateLiveStreamWithHttpInfoAsync(string LIVE_STREAM_ID, UpdateLiveStreamRequest updateLiveStreamRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->UpdateLiveStream");
            }

            // verify the required parameter 'updateLiveStreamRequest' is set
            if (updateLiveStreamRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateLiveStreamRequest' when calling LiveStreamsApi->UpdateLiveStream");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = updateLiveStreamRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveStream", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live stream&#39;s embedded subtitles Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse UpdateLiveStreamEmbeddedSubtitles(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = UpdateLiveStreamEmbeddedSubtitlesWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream&#39;s embedded subtitles Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> UpdateLiveStreamEmbeddedSubtitlesWithHttpInfo(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->UpdateLiveStreamEmbeddedSubtitles");
            }

            // verify the required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' is set
            if (updateLiveStreamEmbeddedSubtitlesRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' when calling LiveStreamsApi->UpdateLiveStreamEmbeddedSubtitles");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = updateLiveStreamEmbeddedSubtitlesRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/embedded-subtitles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveStreamEmbeddedSubtitles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live stream&#39;s embedded subtitles Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> UpdateLiveStreamEmbeddedSubtitlesAsync(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = await UpdateLiveStreamEmbeddedSubtitlesWithHttpInfoAsync(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream&#39;s embedded subtitles Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamEmbeddedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse>> UpdateLiveStreamEmbeddedSubtitlesWithHttpInfoAsync(string LIVE_STREAM_ID, UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->UpdateLiveStreamEmbeddedSubtitles");
            }

            // verify the required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' is set
            if (updateLiveStreamEmbeddedSubtitlesRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' when calling LiveStreamsApi->UpdateLiveStreamEmbeddedSubtitles");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = updateLiveStreamEmbeddedSubtitlesRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/embedded-subtitles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveStreamEmbeddedSubtitles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live stream&#39;s generated subtitles Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <returns>LiveStreamResponse</returns>
        public LiveStreamResponse UpdateLiveStreamGeneratedSubtitles(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = UpdateLiveStreamGeneratedSubtitlesWithHttpInfo(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream&#39;s generated subtitles Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <returns>ApiResponse of LiveStreamResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> UpdateLiveStreamGeneratedSubtitlesWithHttpInfo(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest)
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->UpdateLiveStreamGeneratedSubtitles");
            }

            // verify the required parameter 'updateLiveStreamGeneratedSubtitlesRequest' is set
            if (updateLiveStreamGeneratedSubtitlesRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateLiveStreamGeneratedSubtitlesRequest' when calling LiveStreamsApi->UpdateLiveStreamGeneratedSubtitles");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = updateLiveStreamGeneratedSubtitlesRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/generated-subtitles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveStreamGeneratedSubtitles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a live stream&#39;s generated subtitles Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LiveStreamResponse</returns>
        public async System.Threading.Tasks.Task<LiveStreamResponse> UpdateLiveStreamGeneratedSubtitlesAsync(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse> localVarResponse = await UpdateLiveStreamGeneratedSubtitlesWithHttpInfoAsync(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a live stream&#39;s generated subtitles Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="LIVE_STREAM_ID">The live stream ID</param>
        /// <param name="updateLiveStreamGeneratedSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LiveStreamResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LiveStreamResponse>> UpdateLiveStreamGeneratedSubtitlesWithHttpInfoAsync(string LIVE_STREAM_ID, UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'LIVE_STREAM_ID' is set
            if (LIVE_STREAM_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'LIVE_STREAM_ID' when calling LiveStreamsApi->UpdateLiveStreamGeneratedSubtitles");
            }

            // verify the required parameter 'updateLiveStreamGeneratedSubtitlesRequest' is set
            if (updateLiveStreamGeneratedSubtitlesRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateLiveStreamGeneratedSubtitlesRequest' when calling LiveStreamsApi->UpdateLiveStreamGeneratedSubtitles");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("LIVE_STREAM_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(LIVE_STREAM_ID)); // path parameter
            localVarRequestOptions.Data = updateLiveStreamGeneratedSubtitlesRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LiveStreamResponse>("/video/v1/live-streams/{LIVE_STREAM_ID}/generated-subtitles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveStreamGeneratedSubtitles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
