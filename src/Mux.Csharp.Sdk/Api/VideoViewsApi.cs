/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideoViewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a Video View
        /// </summary>
        /// <remarks>
        /// Returns the details of a video view.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <returns>VideoViewResponse</returns>
        VideoViewResponse GetVideoView(string VIDEO_VIEW_ID);

        /// <summary>
        /// Get a Video View
        /// </summary>
        /// <remarks>
        /// Returns the details of a video view.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <returns>ApiResponse of VideoViewResponse</returns>
        ApiResponse<VideoViewResponse> GetVideoViewWithHttpInfo(string VIDEO_VIEW_ID);
        /// <summary>
        /// List Video Views
        /// </summary>
        /// <remarks>
        /// Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <returns>ListVideoViewsResponse</returns>
        ListVideoViewsResponse ListVideoViews(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>));

        /// <summary>
        /// List Video Views
        /// </summary>
        /// <remarks>
        /// Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <returns>ApiResponse of ListVideoViewsResponse</returns>
        ApiResponse<ListVideoViewsResponse> ListVideoViewsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideoViewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a Video View
        /// </summary>
        /// <remarks>
        /// Returns the details of a video view.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoViewResponse</returns>
        System.Threading.Tasks.Task<VideoViewResponse> GetVideoViewAsync(string VIDEO_VIEW_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Video View
        /// </summary>
        /// <remarks>
        /// Returns the details of a video view.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoViewResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoViewResponse>> GetVideoViewWithHttpInfoAsync(string VIDEO_VIEW_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Video Views
        /// </summary>
        /// <remarks>
        /// Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListVideoViewsResponse</returns>
        System.Threading.Tasks.Task<ListVideoViewsResponse> ListVideoViewsAsync(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Video Views
        /// </summary>
        /// <remarks>
        /// Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListVideoViewsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListVideoViewsResponse>> ListVideoViewsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVideoViewsApi : IVideoViewsApiSync, IVideoViewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VideoViewsApi : IVideoViewsApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideoViewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VideoViewsApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoViewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VideoViewsApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VideoViewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VideoViewsApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a Video View Returns the details of a video view.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <returns>VideoViewResponse</returns>
        public VideoViewResponse GetVideoView(string VIDEO_VIEW_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<VideoViewResponse> localVarResponse = GetVideoViewWithHttpInfo(VIDEO_VIEW_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Video View Returns the details of a video view.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <returns>ApiResponse of VideoViewResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<VideoViewResponse> GetVideoViewWithHttpInfo(string VIDEO_VIEW_ID)
        {
            // verify the required parameter 'VIDEO_VIEW_ID' is set
            if (VIDEO_VIEW_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'VIDEO_VIEW_ID' when calling VideoViewsApi->GetVideoView");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("VIDEO_VIEW_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(VIDEO_VIEW_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VideoViewResponse>("/data/v1/video-views/{VIDEO_VIEW_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Video View Returns the details of a video view.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VideoViewResponse</returns>
        public async System.Threading.Tasks.Task<VideoViewResponse> GetVideoViewAsync(string VIDEO_VIEW_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<VideoViewResponse> localVarResponse = await GetVideoViewWithHttpInfoAsync(VIDEO_VIEW_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Video View Returns the details of a video view.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="VIDEO_VIEW_ID">ID of the Video View</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VideoViewResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<VideoViewResponse>> GetVideoViewWithHttpInfoAsync(string VIDEO_VIEW_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'VIDEO_VIEW_ID' is set
            if (VIDEO_VIEW_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'VIDEO_VIEW_ID' when calling VideoViewsApi->GetVideoView");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("VIDEO_VIEW_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(VIDEO_VIEW_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VideoViewResponse>("/data/v1/video-views/{VIDEO_VIEW_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVideoView", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Video Views Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <returns>ListVideoViewsResponse</returns>
        public ListVideoViewsResponse ListVideoViews(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListVideoViewsResponse> localVarResponse = ListVideoViewsWithHttpInfo(limit, page, viewerId, errorId, orderDirection, filters, metricFilters, timeframe);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Video Views Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <returns>ApiResponse of ListVideoViewsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListVideoViewsResponse> ListVideoViewsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (viewerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "viewer_id", viewerId));
            }
            if (errorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "error_id", errorId));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }
            if (metricFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "metric_filters[]", metricFilters));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "timeframe[]", timeframe));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListVideoViewsResponse>("/data/v1/video-views", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListVideoViews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Video Views Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListVideoViewsResponse</returns>
        public async System.Threading.Tasks.Task<ListVideoViewsResponse> ListVideoViewsAsync(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListVideoViewsResponse> localVarResponse = await ListVideoViewsWithHttpInfoAsync(limit, page, viewerId, errorId, orderDirection, filters, metricFilters, timeframe, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Video Views Returns a list of video views which match the filters and have a &#x60;view_end&#x60; within the specified timeframe.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="viewerId">Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux. (optional)</param>
        /// <param name="errorId">Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error. (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="metricFilters">Limit the results to rows that match inequality conditions from provided metric comparison clauses. Must be provided as an array query string parameter.  Possible filterable metrics are the same as the set of metric ids, with the exceptions of &#x60;exits_before_video_start&#x60;, &#x60;unique_viewers&#x60;, &#x60;video_startup_failure_percentage&#x60;, and &#x60;views&#x60;.  Example:    * &#x60;metric_filters[]&#x3D;aggregate_startup_time&gt;&#x3D;1000&#x60;  (optional)</param>
        /// <param name="timeframe">Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]&#x3D;).  Accepted formats are...    * array of epoch timestamps e.g. &#x60;timeframe[]&#x3D;1498867200&amp;timeframe[]&#x3D;1498953600&#x60;   * duration string e.g. &#x60;timeframe[]&#x3D;24:hours or timeframe[]&#x3D;7:days&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListVideoViewsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListVideoViewsResponse>> ListVideoViewsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string viewerId = default(string), int? errorId = default(int?), string orderDirection = default(string), List<string> filters = default(List<string>), List<string> metricFilters = default(List<string>), List<string> timeframe = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (viewerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "viewer_id", viewerId));
            }
            if (errorId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "error_id", errorId));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }
            if (metricFilters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "metric_filters[]", metricFilters));
            }
            if (timeframe != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "timeframe[]", timeframe));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListVideoViewsResponse>("/data/v1/video-views", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListVideoViews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
