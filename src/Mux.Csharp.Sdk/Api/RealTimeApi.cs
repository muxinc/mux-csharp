/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealTimeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Real-Time Breakdown
        /// </summary>
        /// <remarks>
        /// Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>GetRealTimeBreakdownResponse</returns>
        [Obsolete]
        GetRealTimeBreakdownResponse GetRealtimeBreakdown(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string));

        /// <summary>
        /// Get Real-Time Breakdown
        /// </summary>
        /// <remarks>
        /// Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>ApiResponse of GetRealTimeBreakdownResponse</returns>
        [Obsolete]
        ApiResponse<GetRealTimeBreakdownResponse> GetRealtimeBreakdownWithHttpInfo(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string));
        /// <summary>
        /// Get Real-Time Histogram Timeseries
        /// </summary>
        /// <remarks>
        /// Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <returns>GetRealTimeHistogramTimeseriesResponse</returns>
        [Obsolete]
        GetRealTimeHistogramTimeseriesResponse GetRealtimeHistogramTimeseries(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>));

        /// <summary>
        /// Get Real-Time Histogram Timeseries
        /// </summary>
        /// <remarks>
        /// Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <returns>ApiResponse of GetRealTimeHistogramTimeseriesResponse</returns>
        [Obsolete]
        ApiResponse<GetRealTimeHistogramTimeseriesResponse> GetRealtimeHistogramTimeseriesWithHttpInfo(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>));
        /// <summary>
        /// Get Real-Time Timeseries
        /// </summary>
        /// <remarks>
        /// Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <returns>GetRealTimeTimeseriesResponse</returns>
        [Obsolete]
        GetRealTimeTimeseriesResponse GetRealtimeTimeseries(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?));

        /// <summary>
        /// Get Real-Time Timeseries
        /// </summary>
        /// <remarks>
        /// Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <returns>ApiResponse of GetRealTimeTimeseriesResponse</returns>
        [Obsolete]
        ApiResponse<GetRealTimeTimeseriesResponse> GetRealtimeTimeseriesWithHttpInfo(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?));
        /// <summary>
        /// List Real-Time Dimensions
        /// </summary>
        /// <remarks>
        /// Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListRealTimeDimensionsResponse</returns>
        [Obsolete]
        ListRealTimeDimensionsResponse ListRealtimeDimensions();

        /// <summary>
        /// List Real-Time Dimensions
        /// </summary>
        /// <remarks>
        /// Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListRealTimeDimensionsResponse</returns>
        [Obsolete]
        ApiResponse<ListRealTimeDimensionsResponse> ListRealtimeDimensionsWithHttpInfo();
        /// <summary>
        /// List Real-Time Metrics
        /// </summary>
        /// <remarks>
        /// Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListRealTimeMetricsResponse</returns>
        [Obsolete]
        ListRealTimeMetricsResponse ListRealtimeMetrics();

        /// <summary>
        /// List Real-Time Metrics
        /// </summary>
        /// <remarks>
        /// Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListRealTimeMetricsResponse</returns>
        [Obsolete]
        ApiResponse<ListRealTimeMetricsResponse> ListRealtimeMetricsWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealTimeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Real-Time Breakdown
        /// </summary>
        /// <remarks>
        /// Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRealTimeBreakdownResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetRealTimeBreakdownResponse> GetRealtimeBreakdownAsync(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Real-Time Breakdown
        /// </summary>
        /// <remarks>
        /// Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRealTimeBreakdownResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetRealTimeBreakdownResponse>> GetRealtimeBreakdownWithHttpInfoAsync(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Real-Time Histogram Timeseries
        /// </summary>
        /// <remarks>
        /// Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRealTimeHistogramTimeseriesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetRealTimeHistogramTimeseriesResponse> GetRealtimeHistogramTimeseriesAsync(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Real-Time Histogram Timeseries
        /// </summary>
        /// <remarks>
        /// Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRealTimeHistogramTimeseriesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetRealTimeHistogramTimeseriesResponse>> GetRealtimeHistogramTimeseriesWithHttpInfoAsync(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Real-Time Timeseries
        /// </summary>
        /// <remarks>
        /// Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRealTimeTimeseriesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetRealTimeTimeseriesResponse> GetRealtimeTimeseriesAsync(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Real-Time Timeseries
        /// </summary>
        /// <remarks>
        /// Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRealTimeTimeseriesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetRealTimeTimeseriesResponse>> GetRealtimeTimeseriesWithHttpInfoAsync(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Real-Time Dimensions
        /// </summary>
        /// <remarks>
        /// Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRealTimeDimensionsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ListRealTimeDimensionsResponse> ListRealtimeDimensionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Real-Time Dimensions
        /// </summary>
        /// <remarks>
        /// Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRealTimeDimensionsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ListRealTimeDimensionsResponse>> ListRealtimeDimensionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Real-Time Metrics
        /// </summary>
        /// <remarks>
        /// Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRealTimeMetricsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ListRealTimeMetricsResponse> ListRealtimeMetricsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Real-Time Metrics
        /// </summary>
        /// <remarks>
        /// Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRealTimeMetricsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ListRealTimeMetricsResponse>> ListRealtimeMetricsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRealTimeApi : IRealTimeApiSync, IRealTimeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RealTimeApi : IRealTimeApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RealTimeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RealTimeApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RealTimeApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RealTimeApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Real-Time Breakdown Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>GetRealTimeBreakdownResponse</returns>
        [Obsolete]
        public GetRealTimeBreakdownResponse GetRealtimeBreakdown(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeBreakdownResponse> localVarResponse = GetRealtimeBreakdownWithHttpInfo(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Real-Time Breakdown Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <returns>ApiResponse of GetRealTimeBreakdownResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeBreakdownResponse> GetRealtimeBreakdownWithHttpInfo(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string))
        {
            // verify the required parameter 'REALTIME_METRIC_ID' is set
            if (REALTIME_METRIC_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'REALTIME_METRIC_ID' when calling RealTimeApi->GetRealtimeBreakdown");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("REALTIME_METRIC_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(REALTIME_METRIC_ID)); // path parameter
            if (dimension != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dimension", dimension));
            }
            if (timestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "timestamp", timestamp));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRealTimeBreakdownResponse>("/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/breakdown", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealtimeBreakdown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Real-Time Breakdown Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRealTimeBreakdownResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetRealTimeBreakdownResponse> GetRealtimeBreakdownAsync(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeBreakdownResponse> localVarResponse = await GetRealtimeBreakdownWithHttpInfoAsync(REALTIME_METRIC_ID, dimension, timestamp, filters, orderBy, orderDirection, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Real-Time Breakdown Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the &#x60;Get Monitoring Breakdown&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="dimension">Dimension the specified value belongs to (optional)</param>
        /// <param name="timestamp">Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp. (optional)</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="orderBy">Value to order the results by (optional)</param>
        /// <param name="orderDirection">Sort order. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRealTimeBreakdownResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeBreakdownResponse>> GetRealtimeBreakdownWithHttpInfoAsync(string REALTIME_METRIC_ID, string dimension = default(string), int? timestamp = default(int?), List<string> filters = default(List<string>), string orderBy = default(string), string orderDirection = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'REALTIME_METRIC_ID' is set
            if (REALTIME_METRIC_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'REALTIME_METRIC_ID' when calling RealTimeApi->GetRealtimeBreakdown");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("REALTIME_METRIC_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(REALTIME_METRIC_ID)); // path parameter
            if (dimension != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "dimension", dimension));
            }
            if (timestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "timestamp", timestamp));
            }
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (orderDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "order_direction", orderDirection));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRealTimeBreakdownResponse>("/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/breakdown", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealtimeBreakdown", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Real-Time Histogram Timeseries Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <returns>GetRealTimeHistogramTimeseriesResponse</returns>
        [Obsolete]
        public GetRealTimeHistogramTimeseriesResponse GetRealtimeHistogramTimeseries(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeHistogramTimeseriesResponse> localVarResponse = GetRealtimeHistogramTimeseriesWithHttpInfo(REALTIME_HISTOGRAM_METRIC_ID, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Real-Time Histogram Timeseries Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <returns>ApiResponse of GetRealTimeHistogramTimeseriesResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeHistogramTimeseriesResponse> GetRealtimeHistogramTimeseriesWithHttpInfo(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>))
        {
            // verify the required parameter 'REALTIME_HISTOGRAM_METRIC_ID' is set
            if (REALTIME_HISTOGRAM_METRIC_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'REALTIME_HISTOGRAM_METRIC_ID' when calling RealTimeApi->GetRealtimeHistogramTimeseries");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("REALTIME_HISTOGRAM_METRIC_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(REALTIME_HISTOGRAM_METRIC_ID)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRealTimeHistogramTimeseriesResponse>("/data/v1/realtime/metrics/{REALTIME_HISTOGRAM_METRIC_ID}/histogram-timeseries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealtimeHistogramTimeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Real-Time Histogram Timeseries Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRealTimeHistogramTimeseriesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetRealTimeHistogramTimeseriesResponse> GetRealtimeHistogramTimeseriesAsync(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeHistogramTimeseriesResponse> localVarResponse = await GetRealtimeHistogramTimeseriesWithHttpInfoAsync(REALTIME_HISTOGRAM_METRIC_ID, filters, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Real-Time Histogram Timeseries Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the &#x60;Get Monitoring Histogram Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_HISTOGRAM_METRIC_ID">ID of the Realtime Histogram Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRealTimeHistogramTimeseriesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeHistogramTimeseriesResponse>> GetRealtimeHistogramTimeseriesWithHttpInfoAsync(string REALTIME_HISTOGRAM_METRIC_ID, List<string> filters = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'REALTIME_HISTOGRAM_METRIC_ID' is set
            if (REALTIME_HISTOGRAM_METRIC_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'REALTIME_HISTOGRAM_METRIC_ID' when calling RealTimeApi->GetRealtimeHistogramTimeseries");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("REALTIME_HISTOGRAM_METRIC_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(REALTIME_HISTOGRAM_METRIC_ID)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRealTimeHistogramTimeseriesResponse>("/data/v1/realtime/metrics/{REALTIME_HISTOGRAM_METRIC_ID}/histogram-timeseries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealtimeHistogramTimeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Real-Time Timeseries Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <returns>GetRealTimeTimeseriesResponse</returns>
        [Obsolete]
        public GetRealTimeTimeseriesResponse GetRealtimeTimeseries(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeTimeseriesResponse> localVarResponse = GetRealtimeTimeseriesWithHttpInfo(REALTIME_METRIC_ID, filters, timestamp);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Real-Time Timeseries Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <returns>ApiResponse of GetRealTimeTimeseriesResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeTimeseriesResponse> GetRealtimeTimeseriesWithHttpInfo(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?))
        {
            // verify the required parameter 'REALTIME_METRIC_ID' is set
            if (REALTIME_METRIC_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'REALTIME_METRIC_ID' when calling RealTimeApi->GetRealtimeTimeseries");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("REALTIME_METRIC_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(REALTIME_METRIC_ID)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }
            if (timestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "timestamp", timestamp));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRealTimeTimeseriesResponse>("/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/timeseries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealtimeTimeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Real-Time Timeseries Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRealTimeTimeseriesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetRealTimeTimeseriesResponse> GetRealtimeTimeseriesAsync(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeTimeseriesResponse> localVarResponse = await GetRealtimeTimeseriesWithHttpInfoAsync(REALTIME_METRIC_ID, filters, timestamp, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Real-Time Timeseries Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the &#x60;Get Monitoring Timeseries&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="REALTIME_METRIC_ID">ID of the Realtime Metric</param>
        /// <param name="filters">Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a &#x60;!&#x60; character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * &#x60;filters[]&#x3D;operating_system:windows&amp;filters[]&#x3D;!country:US&#x60;  (optional)</param>
        /// <param name="timestamp">Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRealTimeTimeseriesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GetRealTimeTimeseriesResponse>> GetRealtimeTimeseriesWithHttpInfoAsync(string REALTIME_METRIC_ID, List<string> filters = default(List<string>), int? timestamp = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'REALTIME_METRIC_ID' is set
            if (REALTIME_METRIC_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'REALTIME_METRIC_ID' when calling RealTimeApi->GetRealtimeTimeseries");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("REALTIME_METRIC_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(REALTIME_METRIC_ID)); // path parameter
            if (filters != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "filters[]", filters));
            }
            if (timestamp != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "timestamp", timestamp));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRealTimeTimeseriesResponse>("/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/timeseries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRealtimeTimeseries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Real-Time Dimensions Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListRealTimeDimensionsResponse</returns>
        [Obsolete]
        public ListRealTimeDimensionsResponse ListRealtimeDimensions()
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeDimensionsResponse> localVarResponse = ListRealtimeDimensionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Real-Time Dimensions Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListRealTimeDimensionsResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeDimensionsResponse> ListRealtimeDimensionsWithHttpInfo()
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRealTimeDimensionsResponse>("/data/v1/realtime/dimensions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRealtimeDimensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Real-Time Dimensions Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRealTimeDimensionsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ListRealTimeDimensionsResponse> ListRealtimeDimensionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeDimensionsResponse> localVarResponse = await ListRealtimeDimensionsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Real-Time Dimensions Lists available real-time dimensions. This API is now deprecated, please use the &#x60;List Monitoring Dimensions&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRealTimeDimensionsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeDimensionsResponse>> ListRealtimeDimensionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRealTimeDimensionsResponse>("/data/v1/realtime/dimensions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRealtimeDimensions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Real-Time Metrics Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListRealTimeMetricsResponse</returns>
        [Obsolete]
        public ListRealTimeMetricsResponse ListRealtimeMetrics()
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeMetricsResponse> localVarResponse = ListRealtimeMetricsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Real-Time Metrics Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListRealTimeMetricsResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeMetricsResponse> ListRealtimeMetricsWithHttpInfo()
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRealTimeMetricsResponse>("/data/v1/realtime/metrics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRealtimeMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Real-Time Metrics Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRealTimeMetricsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ListRealTimeMetricsResponse> ListRealtimeMetricsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeMetricsResponse> localVarResponse = await ListRealtimeMetricsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Real-Time Metrics Lists available real-time metrics. This API is now deprecated, please use the &#x60;List Monitoring Metrics&#x60; API.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRealTimeMetricsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListRealTimeMetricsResponse>> ListRealtimeMetricsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRealTimeMetricsResponse>("/data/v1/realtime/metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRealtimeMetrics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
