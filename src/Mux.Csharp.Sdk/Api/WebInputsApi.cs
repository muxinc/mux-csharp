/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebInputsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Web Input
        /// </summary>
        /// <remarks>
        /// Create a new Web Input
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <returns>WebInputResponse</returns>
        WebInputResponse CreateWebInput(CreateWebInputRequest createWebInputRequest);

        /// <summary>
        /// Create a new Web Input
        /// </summary>
        /// <remarks>
        /// Create a new Web Input
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <returns>ApiResponse of WebInputResponse</returns>
        ApiResponse<WebInputResponse> CreateWebInputWithHttpInfo(CreateWebInputRequest createWebInputRequest);
        /// <summary>
        /// Delete a Web Input
        /// </summary>
        /// <remarks>
        /// Deletes a Web Input and all its data
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns></returns>
        void DeleteWebInput(string WEB_INPUT_ID);

        /// <summary>
        /// Delete a Web Input
        /// </summary>
        /// <remarks>
        /// Deletes a Web Input and all its data
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebInputWithHttpInfo(string WEB_INPUT_ID);
        /// <summary>
        /// Retrieve a Web Input
        /// </summary>
        /// <remarks>
        /// Retrieve a single Web Input&#39;s info
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>WebInputResponse</returns>
        WebInputResponse GetWebInput(string WEB_INPUT_ID);

        /// <summary>
        /// Retrieve a Web Input
        /// </summary>
        /// <remarks>
        /// Retrieve a single Web Input&#39;s info
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of WebInputResponse</returns>
        ApiResponse<WebInputResponse> GetWebInputWithHttpInfo(string WEB_INPUT_ID);
        /// <summary>
        /// Launch a Web Input
        /// </summary>
        /// <remarks>
        /// Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>LaunchWebInputResponse</returns>
        LaunchWebInputResponse LaunchWebInput(string WEB_INPUT_ID);

        /// <summary>
        /// Launch a Web Input
        /// </summary>
        /// <remarks>
        /// Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of LaunchWebInputResponse</returns>
        ApiResponse<LaunchWebInputResponse> LaunchWebInputWithHttpInfo(string WEB_INPUT_ID);
        /// <summary>
        /// List Web Inputs
        /// </summary>
        /// <remarks>
        /// List Web Inputs
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ListWebInputsResponse</returns>
        ListWebInputsResponse ListWebInputs(int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// List Web Inputs
        /// </summary>
        /// <remarks>
        /// List Web Inputs
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ApiResponse of ListWebInputsResponse</returns>
        ApiResponse<ListWebInputsResponse> ListWebInputsWithHttpInfo(int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Reload a Web Input
        /// </summary>
        /// <remarks>
        /// Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ReloadWebInputResponse</returns>
        ReloadWebInputResponse ReloadWebInput(string WEB_INPUT_ID);

        /// <summary>
        /// Reload a Web Input
        /// </summary>
        /// <remarks>
        /// Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of ReloadWebInputResponse</returns>
        ApiResponse<ReloadWebInputResponse> ReloadWebInputWithHttpInfo(string WEB_INPUT_ID);
        /// <summary>
        /// Shut down a Web Input
        /// </summary>
        /// <remarks>
        /// Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ShutdownWebInputResponse</returns>
        ShutdownWebInputResponse ShutdownWebInput(string WEB_INPUT_ID);

        /// <summary>
        /// Shut down a Web Input
        /// </summary>
        /// <remarks>
        /// Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of ShutdownWebInputResponse</returns>
        ApiResponse<ShutdownWebInputResponse> ShutdownWebInputWithHttpInfo(string WEB_INPUT_ID);
        /// <summary>
        /// Update Web Input URL
        /// </summary>
        /// <remarks>
        /// Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <returns>WebInputResponse</returns>
        WebInputResponse UpdateWebInputUrl(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest);

        /// <summary>
        /// Update Web Input URL
        /// </summary>
        /// <remarks>
        /// Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <returns>ApiResponse of WebInputResponse</returns>
        ApiResponse<WebInputResponse> UpdateWebInputUrlWithHttpInfo(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebInputsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Web Input
        /// </summary>
        /// <remarks>
        /// Create a new Web Input
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebInputResponse</returns>
        System.Threading.Tasks.Task<WebInputResponse> CreateWebInputAsync(CreateWebInputRequest createWebInputRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Web Input
        /// </summary>
        /// <remarks>
        /// Create a new Web Input
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebInputResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebInputResponse>> CreateWebInputWithHttpInfoAsync(CreateWebInputRequest createWebInputRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Web Input
        /// </summary>
        /// <remarks>
        /// Deletes a Web Input and all its data
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Web Input
        /// </summary>
        /// <remarks>
        /// Deletes a Web Input and all its data
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Web Input
        /// </summary>
        /// <remarks>
        /// Retrieve a single Web Input&#39;s info
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebInputResponse</returns>
        System.Threading.Tasks.Task<WebInputResponse> GetWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Web Input
        /// </summary>
        /// <remarks>
        /// Retrieve a single Web Input&#39;s info
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebInputResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebInputResponse>> GetWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Launch a Web Input
        /// </summary>
        /// <remarks>
        /// Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LaunchWebInputResponse</returns>
        System.Threading.Tasks.Task<LaunchWebInputResponse> LaunchWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Launch a Web Input
        /// </summary>
        /// <remarks>
        /// Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LaunchWebInputResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LaunchWebInputResponse>> LaunchWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Web Inputs
        /// </summary>
        /// <remarks>
        /// List Web Inputs
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWebInputsResponse</returns>
        System.Threading.Tasks.Task<ListWebInputsResponse> ListWebInputsAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Web Inputs
        /// </summary>
        /// <remarks>
        /// List Web Inputs
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWebInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWebInputsResponse>> ListWebInputsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Reload a Web Input
        /// </summary>
        /// <remarks>
        /// Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReloadWebInputResponse</returns>
        System.Threading.Tasks.Task<ReloadWebInputResponse> ReloadWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Reload a Web Input
        /// </summary>
        /// <remarks>
        /// Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReloadWebInputResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReloadWebInputResponse>> ReloadWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Shut down a Web Input
        /// </summary>
        /// <remarks>
        /// Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShutdownWebInputResponse</returns>
        System.Threading.Tasks.Task<ShutdownWebInputResponse> ShutdownWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Shut down a Web Input
        /// </summary>
        /// <remarks>
        /// Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShutdownWebInputResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShutdownWebInputResponse>> ShutdownWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Web Input URL
        /// </summary>
        /// <remarks>
        /// Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebInputResponse</returns>
        System.Threading.Tasks.Task<WebInputResponse> UpdateWebInputUrlAsync(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Web Input URL
        /// </summary>
        /// <remarks>
        /// Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebInputResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebInputResponse>> UpdateWebInputUrlWithHttpInfoAsync(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebInputsApi : IWebInputsApiSync, IWebInputsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebInputsApi : IWebInputsApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebInputsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebInputsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebInputsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebInputsApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebInputsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebInputsApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebInputsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebInputsApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Web Input Create a new Web Input
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <returns>WebInputResponse</returns>
        public WebInputResponse CreateWebInput(CreateWebInputRequest createWebInputRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> localVarResponse = CreateWebInputWithHttpInfo(createWebInputRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Web Input Create a new Web Input
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <returns>ApiResponse of WebInputResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> CreateWebInputWithHttpInfo(CreateWebInputRequest createWebInputRequest)
        {
            // verify the required parameter 'createWebInputRequest' is set
            if (createWebInputRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createWebInputRequest' when calling WebInputsApi->CreateWebInput");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWebInputRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebInputResponse>("/video/v1/web-inputs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Web Input Create a new Web Input
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebInputResponse</returns>
        public async System.Threading.Tasks.Task<WebInputResponse> CreateWebInputAsync(CreateWebInputRequest createWebInputRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> localVarResponse = await CreateWebInputWithHttpInfoAsync(createWebInputRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Web Input Create a new Web Input
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWebInputRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebInputResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse>> CreateWebInputWithHttpInfoAsync(CreateWebInputRequest createWebInputRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWebInputRequest' is set
            if (createWebInputRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createWebInputRequest' when calling WebInputsApi->CreateWebInput");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWebInputRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebInputResponse>("/video/v1/web-inputs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Web Input Deletes a Web Input and all its data
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns></returns>
        public void DeleteWebInput(string WEB_INPUT_ID)
        {
            DeleteWebInputWithHttpInfo(WEB_INPUT_ID);
        }

        /// <summary>
        /// Delete a Web Input Deletes a Web Input and all its data
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteWebInputWithHttpInfo(string WEB_INPUT_ID)
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->DeleteWebInput");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/web-inputs/{WEB_INPUT_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Web Input Deletes a Web Input and all its data
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteWebInputWithHttpInfoAsync(WEB_INPUT_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Web Input Deletes a Web Input and all its data
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->DeleteWebInput");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/web-inputs/{WEB_INPUT_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Web Input Retrieve a single Web Input&#39;s info
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>WebInputResponse</returns>
        public WebInputResponse GetWebInput(string WEB_INPUT_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> localVarResponse = GetWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Web Input Retrieve a single Web Input&#39;s info
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of WebInputResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> GetWebInputWithHttpInfo(string WEB_INPUT_ID)
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->GetWebInput");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<WebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Web Input Retrieve a single Web Input&#39;s info
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebInputResponse</returns>
        public async System.Threading.Tasks.Task<WebInputResponse> GetWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> localVarResponse = await GetWebInputWithHttpInfoAsync(WEB_INPUT_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Web Input Retrieve a single Web Input&#39;s info
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebInputResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse>> GetWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->GetWebInput");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Launch a Web Input Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>LaunchWebInputResponse</returns>
        public LaunchWebInputResponse LaunchWebInput(string WEB_INPUT_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LaunchWebInputResponse> localVarResponse = LaunchWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Launch a Web Input Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of LaunchWebInputResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<LaunchWebInputResponse> LaunchWebInputWithHttpInfo(string WEB_INPUT_ID)
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->LaunchWebInput");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LaunchWebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/launch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LaunchWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Launch a Web Input Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LaunchWebInputResponse</returns>
        public async System.Threading.Tasks.Task<LaunchWebInputResponse> LaunchWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<LaunchWebInputResponse> localVarResponse = await LaunchWebInputWithHttpInfoAsync(WEB_INPUT_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Launch a Web Input Launches the browsers instance, loads the URL specified, and then starts streaming to the specified Live Stream.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LaunchWebInputResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<LaunchWebInputResponse>> LaunchWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->LaunchWebInput");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LaunchWebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/launch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LaunchWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Web Inputs List Web Inputs
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ListWebInputsResponse</returns>
        public ListWebInputsResponse ListWebInputs(int? limit = default(int?), int? page = default(int?))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListWebInputsResponse> localVarResponse = ListWebInputsWithHttpInfo(limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Web Inputs List Web Inputs
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ApiResponse of ListWebInputsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListWebInputsResponse> ListWebInputsWithHttpInfo(int? limit = default(int?), int? page = default(int?))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListWebInputsResponse>("/video/v1/web-inputs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebInputs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Web Inputs List Web Inputs
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWebInputsResponse</returns>
        public async System.Threading.Tasks.Task<ListWebInputsResponse> ListWebInputsAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListWebInputsResponse> localVarResponse = await ListWebInputsWithHttpInfoAsync(limit, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Web Inputs List Web Inputs
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWebInputsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListWebInputsResponse>> ListWebInputsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListWebInputsResponse>("/video/v1/web-inputs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebInputs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reload a Web Input Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ReloadWebInputResponse</returns>
        public ReloadWebInputResponse ReloadWebInput(string WEB_INPUT_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ReloadWebInputResponse> localVarResponse = ReloadWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reload a Web Input Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of ReloadWebInputResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ReloadWebInputResponse> ReloadWebInputWithHttpInfo(string WEB_INPUT_ID)
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->ReloadWebInput");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReloadWebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/reload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reload a Web Input Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReloadWebInputResponse</returns>
        public async System.Threading.Tasks.Task<ReloadWebInputResponse> ReloadWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ReloadWebInputResponse> localVarResponse = await ReloadWebInputWithHttpInfoAsync(WEB_INPUT_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reload a Web Input Reloads the page that a Web Input is displaying.  Note: Using this when the Web Input is streaming will display the page reloading. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReloadWebInputResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ReloadWebInputResponse>> ReloadWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->ReloadWebInput");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReloadWebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/reload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReloadWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shut down a Web Input Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ShutdownWebInputResponse</returns>
        public ShutdownWebInputResponse ShutdownWebInput(string WEB_INPUT_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ShutdownWebInputResponse> localVarResponse = ShutdownWebInputWithHttpInfo(WEB_INPUT_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shut down a Web Input Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <returns>ApiResponse of ShutdownWebInputResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ShutdownWebInputResponse> ShutdownWebInputWithHttpInfo(string WEB_INPUT_ID)
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->ShutdownWebInput");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ShutdownWebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/shutdown", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShutdownWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Shut down a Web Input Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShutdownWebInputResponse</returns>
        public async System.Threading.Tasks.Task<ShutdownWebInputResponse> ShutdownWebInputAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ShutdownWebInputResponse> localVarResponse = await ShutdownWebInputWithHttpInfoAsync(WEB_INPUT_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Shut down a Web Input Ends streaming to the specified Live Stream, and then shuts down the Web Input browser instance.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShutdownWebInputResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ShutdownWebInputResponse>> ShutdownWebInputWithHttpInfoAsync(string WEB_INPUT_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->ShutdownWebInput");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ShutdownWebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/shutdown", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShutdownWebInput", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Web Input URL Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <returns>WebInputResponse</returns>
        public WebInputResponse UpdateWebInputUrl(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> localVarResponse = UpdateWebInputUrlWithHttpInfo(WEB_INPUT_ID, updateWebInputUrlRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Web Input URL Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <returns>ApiResponse of WebInputResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> UpdateWebInputUrlWithHttpInfo(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest)
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->UpdateWebInputUrl");
            }

            // verify the required parameter 'updateWebInputUrlRequest' is set
            if (updateWebInputUrlRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateWebInputUrlRequest' when calling WebInputsApi->UpdateWebInputUrl");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter
            localVarRequestOptions.Data = updateWebInputUrlRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<WebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebInputUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Web Input URL Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebInputResponse</returns>
        public async System.Threading.Tasks.Task<WebInputResponse> UpdateWebInputUrlAsync(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse> localVarResponse = await UpdateWebInputUrlWithHttpInfoAsync(WEB_INPUT_ID, updateWebInputUrlRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Web Input URL Changes the URL that a Web Input loads when it launches.  Note: This can only be called when the Web Input is idle. 
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="WEB_INPUT_ID">The Web Input ID</param>
        /// <param name="updateWebInputUrlRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebInputResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<WebInputResponse>> UpdateWebInputUrlWithHttpInfoAsync(string WEB_INPUT_ID, UpdateWebInputUrlRequest updateWebInputUrlRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'WEB_INPUT_ID' is set
            if (WEB_INPUT_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'WEB_INPUT_ID' when calling WebInputsApi->UpdateWebInputUrl");
            }

            // verify the required parameter 'updateWebInputUrlRequest' is set
            if (updateWebInputUrlRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateWebInputUrlRequest' when calling WebInputsApi->UpdateWebInputUrl");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("WEB_INPUT_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(WEB_INPUT_ID)); // path parameter
            localVarRequestOptions.Data = updateWebInputUrlRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<WebInputResponse>("/video/v1/web-inputs/{WEB_INPUT_ID}/url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebInputUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
