/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaybackRestrictionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Create a new Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <returns>PlaybackRestrictionResponse</returns>
        PlaybackRestrictionResponse CreatePlaybackRestriction(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest);

        /// <summary>
        /// Create a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Create a new Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        ApiResponse<PlaybackRestrictionResponse> CreatePlaybackRestrictionWithHttpInfo(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest);
        /// <summary>
        /// Delete a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Deletes a single Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns></returns>
        void DeletePlaybackRestriction(string PLAYBACK_RESTRICTION_ID);

        /// <summary>
        /// Delete a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Deletes a single Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePlaybackRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID);
        /// <summary>
        /// Retrieve a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Retrieves a Playback Restriction associated with the unique identifier.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns>PlaybackRestrictionResponse</returns>
        PlaybackRestrictionResponse GetPlaybackRestriction(string PLAYBACK_RESTRICTION_ID);

        /// <summary>
        /// Retrieve a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Retrieves a Playback Restriction associated with the unique identifier.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        ApiResponse<PlaybackRestrictionResponse> GetPlaybackRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID);
        /// <summary>
        /// List Playback Restrictions
        /// </summary>
        /// <remarks>
        /// Returns a list of all Playback Restrictions.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <returns>ListPlaybackRestrictionsResponse</returns>
        ListPlaybackRestrictionsResponse ListPlaybackRestrictions(int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List Playback Restrictions
        /// </summary>
        /// <remarks>
        /// Returns a list of all Playback Restrictions.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <returns>ApiResponse of ListPlaybackRestrictionsResponse</returns>
        ApiResponse<ListPlaybackRestrictionsResponse> ListPlaybackRestrictionsWithHttpInfo(int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Update the Referrer Playback Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <returns>PlaybackRestrictionResponse</returns>
        PlaybackRestrictionResponse UpdateReferrerDomainRestriction(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest);

        /// <summary>
        /// Update the Referrer Playback Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        ApiResponse<PlaybackRestrictionResponse> UpdateReferrerDomainRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest);
        /// <summary>
        /// Update the User Agent Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <returns>PlaybackRestrictionResponse</returns>
        PlaybackRestrictionResponse UpdateUserAgentRestriction(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest);

        /// <summary>
        /// Update the User Agent Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        ApiResponse<PlaybackRestrictionResponse> UpdateUserAgentRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaybackRestrictionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Create a new Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        System.Threading.Tasks.Task<PlaybackRestrictionResponse> CreatePlaybackRestrictionAsync(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Create a new Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackRestrictionResponse>> CreatePlaybackRestrictionWithHttpInfoAsync(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Deletes a single Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePlaybackRestrictionAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Deletes a single Playback Restriction.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlaybackRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Retrieves a Playback Restriction associated with the unique identifier.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        System.Threading.Tasks.Task<PlaybackRestrictionResponse> GetPlaybackRestrictionAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Playback Restriction
        /// </summary>
        /// <remarks>
        /// Retrieves a Playback Restriction associated with the unique identifier.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackRestrictionResponse>> GetPlaybackRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Playback Restrictions
        /// </summary>
        /// <remarks>
        /// Returns a list of all Playback Restrictions.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPlaybackRestrictionsResponse</returns>
        System.Threading.Tasks.Task<ListPlaybackRestrictionsResponse> ListPlaybackRestrictionsAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Playback Restrictions
        /// </summary>
        /// <remarks>
        /// Returns a list of all Playback Restrictions.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPlaybackRestrictionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPlaybackRestrictionsResponse>> ListPlaybackRestrictionsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the Referrer Playback Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        System.Threading.Tasks.Task<PlaybackRestrictionResponse> UpdateReferrerDomainRestrictionAsync(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the Referrer Playback Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackRestrictionResponse>> UpdateReferrerDomainRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the User Agent Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        System.Threading.Tasks.Task<PlaybackRestrictionResponse> UpdateUserAgentRestrictionAsync(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the User Agent Restriction
        /// </summary>
        /// <remarks>
        /// Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackRestrictionResponse>> UpdateUserAgentRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaybackRestrictionsApi : IPlaybackRestrictionsApiSync, IPlaybackRestrictionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaybackRestrictionsApi : IPlaybackRestrictionsApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackRestrictionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaybackRestrictionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackRestrictionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaybackRestrictionsApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackRestrictionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaybackRestrictionsApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackRestrictionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlaybackRestrictionsApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Playback Restriction Create a new Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <returns>PlaybackRestrictionResponse</returns>
        public PlaybackRestrictionResponse CreatePlaybackRestriction(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = CreatePlaybackRestrictionWithHttpInfo(createPlaybackRestrictionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Playback Restriction Create a new Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> CreatePlaybackRestrictionWithHttpInfo(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest)
        {
            // verify the required parameter 'createPlaybackRestrictionRequest' is set
            if (createPlaybackRestrictionRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createPlaybackRestrictionRequest' when calling PlaybackRestrictionsApi->CreatePlaybackRestriction");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPlaybackRestrictionRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaybackRestrictionResponse>("/video/v1/playback-restrictions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlaybackRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Playback Restriction Create a new Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        public async System.Threading.Tasks.Task<PlaybackRestrictionResponse> CreatePlaybackRestrictionAsync(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = await CreatePlaybackRestrictionWithHttpInfoAsync(createPlaybackRestrictionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Playback Restriction Create a new Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaybackRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse>> CreatePlaybackRestrictionWithHttpInfoAsync(CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPlaybackRestrictionRequest' is set
            if (createPlaybackRestrictionRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createPlaybackRestrictionRequest' when calling PlaybackRestrictionsApi->CreatePlaybackRestriction");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPlaybackRestrictionRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaybackRestrictionResponse>("/video/v1/playback-restrictions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlaybackRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Playback Restriction Deletes a single Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns></returns>
        public void DeletePlaybackRestriction(string PLAYBACK_RESTRICTION_ID)
        {
            DeletePlaybackRestrictionWithHttpInfo(PLAYBACK_RESTRICTION_ID);
        }

        /// <summary>
        /// Delete a Playback Restriction Deletes a single Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeletePlaybackRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID)
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->DeletePlaybackRestriction");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlaybackRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Playback Restriction Deletes a single Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePlaybackRestrictionAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePlaybackRestrictionWithHttpInfoAsync(PLAYBACK_RESTRICTION_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Playback Restriction Deletes a single Playback Restriction.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeletePlaybackRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->DeletePlaybackRestriction");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlaybackRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Playback Restriction Retrieves a Playback Restriction associated with the unique identifier.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns>PlaybackRestrictionResponse</returns>
        public PlaybackRestrictionResponse GetPlaybackRestriction(string PLAYBACK_RESTRICTION_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = GetPlaybackRestrictionWithHttpInfo(PLAYBACK_RESTRICTION_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Playback Restriction Retrieves a Playback Restriction associated with the unique identifier.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> GetPlaybackRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID)
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->GetPlaybackRestriction");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlaybackRestrictionResponse>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaybackRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Playback Restriction Retrieves a Playback Restriction associated with the unique identifier.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        public async System.Threading.Tasks.Task<PlaybackRestrictionResponse> GetPlaybackRestrictionAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = await GetPlaybackRestrictionWithHttpInfoAsync(PLAYBACK_RESTRICTION_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Playback Restriction Retrieves a Playback Restriction associated with the unique identifier.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse>> GetPlaybackRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->GetPlaybackRestriction");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlaybackRestrictionResponse>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaybackRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Playback Restrictions Returns a list of all Playback Restrictions.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <returns>ListPlaybackRestrictionsResponse</returns>
        public ListPlaybackRestrictionsResponse ListPlaybackRestrictions(int? page = default(int?), int? limit = default(int?))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListPlaybackRestrictionsResponse> localVarResponse = ListPlaybackRestrictionsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Playback Restrictions Returns a list of all Playback Restrictions.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <returns>ApiResponse of ListPlaybackRestrictionsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListPlaybackRestrictionsResponse> ListPlaybackRestrictionsWithHttpInfo(int? page = default(int?), int? limit = default(int?))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListPlaybackRestrictionsResponse>("/video/v1/playback-restrictions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPlaybackRestrictions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Playback Restrictions Returns a list of all Playback Restrictions.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListPlaybackRestrictionsResponse</returns>
        public async System.Threading.Tasks.Task<ListPlaybackRestrictionsResponse> ListPlaybackRestrictionsAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListPlaybackRestrictionsResponse> localVarResponse = await ListPlaybackRestrictionsWithHttpInfoAsync(page, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Playback Restrictions Returns a list of all Playback Restrictions.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListPlaybackRestrictionsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListPlaybackRestrictionsResponse>> ListPlaybackRestrictionsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListPlaybackRestrictionsResponse>("/video/v1/playback-restrictions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPlaybackRestrictions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the Referrer Playback Restriction Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <returns>PlaybackRestrictionResponse</returns>
        public PlaybackRestrictionResponse UpdateReferrerDomainRestriction(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = UpdateReferrerDomainRestrictionWithHttpInfo(PLAYBACK_RESTRICTION_ID, updateReferrerDomainRestrictionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Referrer Playback Restriction Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> UpdateReferrerDomainRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest)
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->UpdateReferrerDomainRestriction");
            }

            // verify the required parameter 'updateReferrerDomainRestrictionRequest' is set
            if (updateReferrerDomainRestrictionRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateReferrerDomainRestrictionRequest' when calling PlaybackRestrictionsApi->UpdateReferrerDomainRestriction");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter
            localVarRequestOptions.Data = updateReferrerDomainRestrictionRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PlaybackRestrictionResponse>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}/referrer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferrerDomainRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the Referrer Playback Restriction Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        public async System.Threading.Tasks.Task<PlaybackRestrictionResponse> UpdateReferrerDomainRestrictionAsync(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = await UpdateReferrerDomainRestrictionWithHttpInfoAsync(PLAYBACK_RESTRICTION_ID, updateReferrerDomainRestrictionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the Referrer Playback Restriction Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateReferrerDomainRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse>> UpdateReferrerDomainRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->UpdateReferrerDomainRestriction");
            }

            // verify the required parameter 'updateReferrerDomainRestrictionRequest' is set
            if (updateReferrerDomainRestrictionRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateReferrerDomainRestrictionRequest' when calling PlaybackRestrictionsApi->UpdateReferrerDomainRestriction");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter
            localVarRequestOptions.Data = updateReferrerDomainRestrictionRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PlaybackRestrictionResponse>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}/referrer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReferrerDomainRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the User Agent Restriction Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <returns>PlaybackRestrictionResponse</returns>
        public PlaybackRestrictionResponse UpdateUserAgentRestriction(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = UpdateUserAgentRestrictionWithHttpInfo(PLAYBACK_RESTRICTION_ID, updateUserAgentRestrictionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the User Agent Restriction Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <returns>ApiResponse of PlaybackRestrictionResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> UpdateUserAgentRestrictionWithHttpInfo(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest)
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->UpdateUserAgentRestriction");
            }

            // verify the required parameter 'updateUserAgentRestrictionRequest' is set
            if (updateUserAgentRestrictionRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateUserAgentRestrictionRequest' when calling PlaybackRestrictionsApi->UpdateUserAgentRestriction");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter
            localVarRequestOptions.Data = updateUserAgentRestrictionRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PlaybackRestrictionResponse>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}/user_agent", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserAgentRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the User Agent Restriction Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackRestrictionResponse</returns>
        public async System.Threading.Tasks.Task<PlaybackRestrictionResponse> UpdateUserAgentRestrictionAsync(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse> localVarResponse = await UpdateUserAgentRestrictionWithHttpInfoAsync(PLAYBACK_RESTRICTION_ID, updateUserAgentRestrictionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the User Agent Restriction Allows you to modify how Mux validates playback requests with different user agents.  Please see [Using User-Agent HTTP header for validation](https://docs.mux.com/guides/secure-video-playback#using-user-agent-http-header-for-validation) for more details on this feature.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="PLAYBACK_RESTRICTION_ID">ID of the Playback Restriction.</param>
        /// <param name="updateUserAgentRestrictionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackRestrictionResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<PlaybackRestrictionResponse>> UpdateUserAgentRestrictionWithHttpInfoAsync(string PLAYBACK_RESTRICTION_ID, UpdateUserAgentRestrictionRequest updateUserAgentRestrictionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
            if (PLAYBACK_RESTRICTION_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_RESTRICTION_ID' when calling PlaybackRestrictionsApi->UpdateUserAgentRestriction");
            }

            // verify the required parameter 'updateUserAgentRestrictionRequest' is set
            if (updateUserAgentRestrictionRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateUserAgentRestrictionRequest' when calling PlaybackRestrictionsApi->UpdateUserAgentRestriction");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("PLAYBACK_RESTRICTION_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_RESTRICTION_ID)); // path parameter
            localVarRequestOptions.Data = updateUserAgentRestrictionRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PlaybackRestrictionResponse>("/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}/user_agent", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserAgentRestriction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
