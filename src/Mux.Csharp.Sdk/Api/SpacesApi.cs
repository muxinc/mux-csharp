/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpacesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a space
        /// </summary>
        /// <remarks>
        /// Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <returns>SpaceResponse</returns>
        [Obsolete]
        SpaceResponse CreateSpace(CreateSpaceRequest createSpaceRequest);

        /// <summary>
        /// Create a space
        /// </summary>
        /// <remarks>
        /// Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <returns>ApiResponse of SpaceResponse</returns>
        [Obsolete]
        ApiResponse<SpaceResponse> CreateSpaceWithHttpInfo(CreateSpaceRequest createSpaceRequest);
        /// <summary>
        /// Create a space broadcast
        /// </summary>
        /// <remarks>
        /// Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <returns>BroadcastResponse</returns>
        [Obsolete]
        BroadcastResponse CreateSpaceBroadcast(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest);

        /// <summary>
        /// Create a space broadcast
        /// </summary>
        /// <remarks>
        /// Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <returns>ApiResponse of BroadcastResponse</returns>
        [Obsolete]
        ApiResponse<BroadcastResponse> CreateSpaceBroadcastWithHttpInfo(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest);
        /// <summary>
        /// Delete a space
        /// </summary>
        /// <remarks>
        /// Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteSpace(string SPACE_ID);

        /// <summary>
        /// Delete a space
        /// </summary>
        /// <remarks>
        /// Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteSpaceWithHttpInfo(string SPACE_ID);
        /// <summary>
        /// Delete a space broadcast
        /// </summary>
        /// <remarks>
        /// Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns></returns>
        [Obsolete]
        void DeleteSpaceBroadcast(string SPACE_ID, string BROADCAST_ID);

        /// <summary>
        /// Delete a space broadcast
        /// </summary>
        /// <remarks>
        /// Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        ApiResponse<Object> DeleteSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID);
        /// <summary>
        /// Retrieve a space
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns>SpaceResponse</returns>
        [Obsolete]
        SpaceResponse GetSpace(string SPACE_ID);

        /// <summary>
        /// Retrieve a space
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns>ApiResponse of SpaceResponse</returns>
        [Obsolete]
        ApiResponse<SpaceResponse> GetSpaceWithHttpInfo(string SPACE_ID);
        /// <summary>
        /// Retrieve space broadcast
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a broadcast of a specific space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>BroadcastResponse</returns>
        [Obsolete]
        BroadcastResponse GetSpaceBroadcast(string SPACE_ID, string BROADCAST_ID);

        /// <summary>
        /// Retrieve space broadcast
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a broadcast of a specific space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of BroadcastResponse</returns>
        [Obsolete]
        ApiResponse<BroadcastResponse> GetSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID);
        /// <summary>
        /// List spaces
        /// </summary>
        /// <remarks>
        /// List all spaces in the current enviroment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ListSpacesResponse</returns>
        [Obsolete]
        ListSpacesResponse ListSpaces(int? limit = default(int?), int? page = default(int?));

        /// <summary>
        /// List spaces
        /// </summary>
        /// <remarks>
        /// List all spaces in the current enviroment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ApiResponse of ListSpacesResponse</returns>
        [Obsolete]
        ApiResponse<ListSpacesResponse> ListSpacesWithHttpInfo(int? limit = default(int?), int? page = default(int?));
        /// <summary>
        /// Start a space broadcast
        /// </summary>
        /// <remarks>
        /// Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>StartSpaceBroadcastResponse</returns>
        [Obsolete]
        StartSpaceBroadcastResponse StartSpaceBroadcast(string SPACE_ID, string BROADCAST_ID);

        /// <summary>
        /// Start a space broadcast
        /// </summary>
        /// <remarks>
        /// Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of StartSpaceBroadcastResponse</returns>
        [Obsolete]
        ApiResponse<StartSpaceBroadcastResponse> StartSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID);
        /// <summary>
        /// Stop a space broadcast
        /// </summary>
        /// <remarks>
        /// Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>StopSpaceBroadcastResponse</returns>
        [Obsolete]
        StopSpaceBroadcastResponse StopSpaceBroadcast(string SPACE_ID, string BROADCAST_ID);

        /// <summary>
        /// Stop a space broadcast
        /// </summary>
        /// <remarks>
        /// Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of StopSpaceBroadcastResponse</returns>
        [Obsolete]
        ApiResponse<StopSpaceBroadcastResponse> StopSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpacesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a space
        /// </summary>
        /// <remarks>
        /// Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpaceResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SpaceResponse> CreateSpaceAsync(CreateSpaceRequest createSpaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a space
        /// </summary>
        /// <remarks>
        /// Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpaceResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SpaceResponse>> CreateSpaceWithHttpInfoAsync(CreateSpaceRequest createSpaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a space broadcast
        /// </summary>
        /// <remarks>
        /// Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BroadcastResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<BroadcastResponse> CreateSpaceBroadcastAsync(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a space broadcast
        /// </summary>
        /// <remarks>
        /// Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BroadcastResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<BroadcastResponse>> CreateSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a space
        /// </summary>
        /// <remarks>
        /// Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteSpaceAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a space
        /// </summary>
        /// <remarks>
        /// Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpaceWithHttpInfoAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a space broadcast
        /// </summary>
        /// <remarks>
        /// Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        System.Threading.Tasks.Task DeleteSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a space broadcast
        /// </summary>
        /// <remarks>
        /// Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a space
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpaceResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SpaceResponse> GetSpaceAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a space
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpaceResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SpaceResponse>> GetSpaceWithHttpInfoAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve space broadcast
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a broadcast of a specific space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BroadcastResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<BroadcastResponse> GetSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve space broadcast
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a broadcast of a specific space.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BroadcastResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<BroadcastResponse>> GetSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List spaces
        /// </summary>
        /// <remarks>
        /// List all spaces in the current enviroment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSpacesResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ListSpacesResponse> ListSpacesAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List spaces
        /// </summary>
        /// <remarks>
        /// List all spaces in the current enviroment.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSpacesResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ListSpacesResponse>> ListSpacesWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a space broadcast
        /// </summary>
        /// <remarks>
        /// Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartSpaceBroadcastResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<StartSpaceBroadcastResponse> StartSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a space broadcast
        /// </summary>
        /// <remarks>
        /// Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartSpaceBroadcastResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<StartSpaceBroadcastResponse>> StartSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop a space broadcast
        /// </summary>
        /// <remarks>
        /// Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StopSpaceBroadcastResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<StopSpaceBroadcastResponse> StopSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop a space broadcast
        /// </summary>
        /// <remarks>
        /// Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StopSpaceBroadcastResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<StopSpaceBroadcastResponse>> StopSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpacesApi : ISpacesApiSync, ISpacesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpacesApi : ISpacesApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpacesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpacesApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpacesApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpacesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpacesApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a space Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <returns>SpaceResponse</returns>
        [Obsolete]
        public SpaceResponse CreateSpace(CreateSpaceRequest createSpaceRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse> localVarResponse = CreateSpaceWithHttpInfo(createSpaceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a space Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <returns>ApiResponse of SpaceResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse> CreateSpaceWithHttpInfo(CreateSpaceRequest createSpaceRequest)
        {
            // verify the required parameter 'createSpaceRequest' is set
            if (createSpaceRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createSpaceRequest' when calling SpacesApi->CreateSpace");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSpaceRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SpaceResponse>("/video/v1/spaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a space Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpaceResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SpaceResponse> CreateSpaceAsync(CreateSpaceRequest createSpaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse> localVarResponse = await CreateSpaceWithHttpInfoAsync(createSpaceRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a space Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSpaceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpaceResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse>> CreateSpaceWithHttpInfoAsync(CreateSpaceRequest createSpaceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSpaceRequest' is set
            if (createSpaceRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createSpaceRequest' when calling SpacesApi->CreateSpace");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSpaceRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SpaceResponse>("/video/v1/spaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a space broadcast Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <returns>BroadcastResponse</returns>
        [Obsolete]
        public BroadcastResponse CreateSpaceBroadcast(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse> localVarResponse = CreateSpaceBroadcastWithHttpInfo(SPACE_ID, createBroadcastRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a space broadcast Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <returns>ApiResponse of BroadcastResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse> CreateSpaceBroadcastWithHttpInfo(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->CreateSpaceBroadcast");
            }

            // verify the required parameter 'createBroadcastRequest' is set
            if (createBroadcastRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createBroadcastRequest' when calling SpacesApi->CreateSpaceBroadcast");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.Data = createBroadcastRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a space broadcast Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BroadcastResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<BroadcastResponse> CreateSpaceBroadcastAsync(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse> localVarResponse = await CreateSpaceBroadcastWithHttpInfoAsync(SPACE_ID, createBroadcastRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a space broadcast Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="createBroadcastRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BroadcastResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse>> CreateSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, CreateBroadcastRequest createBroadcastRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->CreateSpaceBroadcast");
            }

            // verify the required parameter 'createBroadcastRequest' is set
            if (createBroadcastRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createBroadcastRequest' when calling SpacesApi->CreateSpaceBroadcast");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.Data = createBroadcastRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a space Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteSpace(string SPACE_ID)
        {
            DeleteSpaceWithHttpInfo(SPACE_ID);
        }

        /// <summary>
        /// Delete a space Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteSpaceWithHttpInfo(string SPACE_ID)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->DeleteSpace");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/spaces/{SPACE_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a space Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteSpaceAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSpaceWithHttpInfoAsync(SPACE_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a space Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteSpaceWithHttpInfoAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->DeleteSpace");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/spaces/{SPACE_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a space broadcast Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns></returns>
        [Obsolete]
        public void DeleteSpaceBroadcast(string SPACE_ID, string BROADCAST_ID)
        {
            DeleteSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
        }

        /// <summary>
        /// Delete a space broadcast Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->DeleteSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->DeleteSpaceBroadcast");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a space broadcast Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task DeleteSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSpaceBroadcastWithHttpInfoAsync(SPACE_ID, BROADCAST_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a space broadcast Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->DeleteSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->DeleteSpaceBroadcast");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a space Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns>SpaceResponse</returns>
        [Obsolete]
        public SpaceResponse GetSpace(string SPACE_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse> localVarResponse = GetSpaceWithHttpInfo(SPACE_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a space Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <returns>ApiResponse of SpaceResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse> GetSpaceWithHttpInfo(string SPACE_ID)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->GetSpace");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SpaceResponse>("/video/v1/spaces/{SPACE_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a space Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpaceResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SpaceResponse> GetSpaceAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse> localVarResponse = await GetSpaceWithHttpInfoAsync(SPACE_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a space Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpaceResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<SpaceResponse>> GetSpaceWithHttpInfoAsync(string SPACE_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->GetSpace");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SpaceResponse>("/video/v1/spaces/{SPACE_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve space broadcast Retrieves the details of a broadcast of a specific space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>BroadcastResponse</returns>
        [Obsolete]
        public BroadcastResponse GetSpaceBroadcast(string SPACE_ID, string BROADCAST_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse> localVarResponse = GetSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve space broadcast Retrieves the details of a broadcast of a specific space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of BroadcastResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse> GetSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->GetSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->GetSpaceBroadcast");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve space broadcast Retrieves the details of a broadcast of a specific space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BroadcastResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<BroadcastResponse> GetSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse> localVarResponse = await GetSpaceBroadcastWithHttpInfoAsync(SPACE_ID, BROADCAST_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve space broadcast Retrieves the details of a broadcast of a specific space.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BroadcastResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<BroadcastResponse>> GetSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->GetSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->GetSpaceBroadcast");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spaces List all spaces in the current enviroment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ListSpacesResponse</returns>
        [Obsolete]
        public ListSpacesResponse ListSpaces(int? limit = default(int?), int? page = default(int?))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListSpacesResponse> localVarResponse = ListSpacesWithHttpInfo(limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spaces List all spaces in the current enviroment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <returns>ApiResponse of ListSpacesResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<ListSpacesResponse> ListSpacesWithHttpInfo(int? limit = default(int?), int? page = default(int?))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSpacesResponse>("/video/v1/spaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List spaces List all spaces in the current enviroment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSpacesResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ListSpacesResponse> ListSpacesAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListSpacesResponse> localVarResponse = await ListSpacesWithHttpInfoAsync(limit, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List spaces List all spaces in the current enviroment.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSpacesResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListSpacesResponse>> ListSpacesWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSpacesResponse>("/video/v1/spaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSpaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a space broadcast Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>StartSpaceBroadcastResponse</returns>
        [Obsolete]
        public StartSpaceBroadcastResponse StartSpaceBroadcast(string SPACE_ID, string BROADCAST_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<StartSpaceBroadcastResponse> localVarResponse = StartSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a space broadcast Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of StartSpaceBroadcastResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<StartSpaceBroadcastResponse> StartSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->StartSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->StartSpaceBroadcast");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StartSpaceBroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a space broadcast Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartSpaceBroadcastResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<StartSpaceBroadcastResponse> StartSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<StartSpaceBroadcastResponse> localVarResponse = await StartSpaceBroadcastWithHttpInfoAsync(SPACE_ID, BROADCAST_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a space broadcast Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartSpaceBroadcastResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<StartSpaceBroadcastResponse>> StartSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->StartSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->StartSpaceBroadcast");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StartSpaceBroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a space broadcast Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>StopSpaceBroadcastResponse</returns>
        [Obsolete]
        public StopSpaceBroadcastResponse StopSpaceBroadcast(string SPACE_ID, string BROADCAST_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<StopSpaceBroadcastResponse> localVarResponse = StopSpaceBroadcastWithHttpInfo(SPACE_ID, BROADCAST_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a space broadcast Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <returns>ApiResponse of StopSpaceBroadcastResponse</returns>
        [Obsolete]
        public Mux.Csharp.Sdk.Client.ApiResponse<StopSpaceBroadcastResponse> StopSpaceBroadcastWithHttpInfo(string SPACE_ID, string BROADCAST_ID)
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->StopSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->StopSpaceBroadcast");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StopSpaceBroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/stop", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a space broadcast Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StopSpaceBroadcastResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<StopSpaceBroadcastResponse> StopSpaceBroadcastAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<StopSpaceBroadcastResponse> localVarResponse = await StopSpaceBroadcastWithHttpInfoAsync(SPACE_ID, BROADCAST_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a space broadcast Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="SPACE_ID">The space ID.</param>
        /// <param name="BROADCAST_ID">The broadcast ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StopSpaceBroadcastResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<StopSpaceBroadcastResponse>> StopSpaceBroadcastWithHttpInfoAsync(string SPACE_ID, string BROADCAST_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'SPACE_ID' is set
            if (SPACE_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'SPACE_ID' when calling SpacesApi->StopSpaceBroadcast");
            }

            // verify the required parameter 'BROADCAST_ID' is set
            if (BROADCAST_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'BROADCAST_ID' when calling SpacesApi->StopSpaceBroadcast");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("SPACE_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(SPACE_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("BROADCAST_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(BROADCAST_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StopSpaceBroadcastResponse>("/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/stop", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StopSpaceBroadcast", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
