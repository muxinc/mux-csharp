/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Mux.Csharp.Sdk.Client;
using Mux.Csharp.Sdk.Model;

namespace Mux.Csharp.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an asset
        /// </summary>
        /// <remarks>
        /// Create a new Mux Video asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <returns>AssetResponse</returns>
        AssetResponse CreateAsset(CreateAssetRequest createAssetRequest);

        /// <summary>
        /// Create an asset
        /// </summary>
        /// <remarks>
        /// Create a new Mux Video asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> CreateAssetWithHttpInfo(CreateAssetRequest createAssetRequest);
        /// <summary>
        /// Create a playback ID
        /// </summary>
        /// <remarks>
        /// Creates a playback ID that can be used to stream the asset to a viewer.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>CreatePlaybackIDResponse</returns>
        CreatePlaybackIDResponse CreateAssetPlaybackId(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest);

        /// <summary>
        /// Create a playback ID
        /// </summary>
        /// <remarks>
        /// Creates a playback ID that can be used to stream the asset to a viewer.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>ApiResponse of CreatePlaybackIDResponse</returns>
        ApiResponse<CreatePlaybackIDResponse> CreateAssetPlaybackIdWithHttpInfo(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest);
        /// <summary>
        /// Create an asset track
        /// </summary>
        /// <remarks>
        /// Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <returns>CreateTrackResponse</returns>
        CreateTrackResponse CreateAssetTrack(string ASSET_ID, CreateTrackRequest createTrackRequest);

        /// <summary>
        /// Create an asset track
        /// </summary>
        /// <remarks>
        /// Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <returns>ApiResponse of CreateTrackResponse</returns>
        ApiResponse<CreateTrackResponse> CreateAssetTrackWithHttpInfo(string ASSET_ID, CreateTrackRequest createTrackRequest);
        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Deletes a video asset and all its data.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns></returns>
        void DeleteAsset(string ASSET_ID);

        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Deletes a video asset and all its data.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetWithHttpInfo(string ASSET_ID);
        /// <summary>
        /// Delete a playback ID
        /// </summary>
        /// <remarks>
        /// Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns></returns>
        void DeleteAssetPlaybackId(string ASSET_ID, string PLAYBACK_ID);

        /// <summary>
        /// Delete a playback ID
        /// </summary>
        /// <remarks>
        /// Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetPlaybackIdWithHttpInfo(string ASSET_ID, string PLAYBACK_ID);
        /// <summary>
        /// Delete an asset track
        /// </summary>
        /// <remarks>
        /// Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <returns></returns>
        void DeleteAssetTrack(string ASSET_ID, string TRACK_ID);

        /// <summary>
        /// Delete an asset track
        /// </summary>
        /// <remarks>
        /// Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAssetTrackWithHttpInfo(string ASSET_ID, string TRACK_ID);
        /// <summary>
        /// Generate track subtitles
        /// </summary>
        /// <remarks>
        /// Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <returns>GenerateTrackSubtitlesResponse</returns>
        GenerateTrackSubtitlesResponse GenerateAssetTrackSubtitles(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest);

        /// <summary>
        /// Generate track subtitles
        /// </summary>
        /// <remarks>
        /// Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <returns>ApiResponse of GenerateTrackSubtitlesResponse</returns>
        ApiResponse<GenerateTrackSubtitlesResponse> GenerateAssetTrackSubtitlesWithHttpInfo(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest);
        /// <summary>
        /// Retrieve an asset
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>AssetResponse</returns>
        AssetResponse GetAsset(string ASSET_ID);

        /// <summary>
        /// Retrieve an asset
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> GetAssetWithHttpInfo(string ASSET_ID);
        /// <summary>
        /// Retrieve asset input info
        /// </summary>
        /// <remarks>
        /// Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>GetAssetInputInfoResponse</returns>
        GetAssetInputInfoResponse GetAssetInputInfo(string ASSET_ID);

        /// <summary>
        /// Retrieve asset input info
        /// </summary>
        /// <remarks>
        /// Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>ApiResponse of GetAssetInputInfoResponse</returns>
        ApiResponse<GetAssetInputInfoResponse> GetAssetInputInfoWithHttpInfo(string ASSET_ID);
        /// <summary>
        /// Retrieve a playback ID
        /// </summary>
        /// <remarks>
        /// Retrieves information about the specified playback ID.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>GetAssetPlaybackIDResponse</returns>
        GetAssetPlaybackIDResponse GetAssetPlaybackId(string ASSET_ID, string PLAYBACK_ID);

        /// <summary>
        /// Retrieve a playback ID
        /// </summary>
        /// <remarks>
        /// Retrieves information about the specified playback ID.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of GetAssetPlaybackIDResponse</returns>
        ApiResponse<GetAssetPlaybackIDResponse> GetAssetPlaybackIdWithHttpInfo(string ASSET_ID, string PLAYBACK_ID);
        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// List all Mux assets.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <returns>ListAssetsResponse</returns>
        ListAssetsResponse ListAssets(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string));

        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// List all Mux assets.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <returns>ApiResponse of ListAssetsResponse</returns>
        ApiResponse<ListAssetsResponse> ListAssetsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string));
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <returns>AssetResponse</returns>
        AssetResponse UpdateAsset(string ASSET_ID, UpdateAssetRequest updateAssetRequest);

        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> UpdateAssetWithHttpInfo(string ASSET_ID, UpdateAssetRequest updateAssetRequest);
        /// <summary>
        /// Update master access
        /// </summary>
        /// <remarks>
        /// Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <returns>AssetResponse</returns>
        AssetResponse UpdateAssetMasterAccess(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest);

        /// <summary>
        /// Update master access
        /// </summary>
        /// <remarks>
        /// Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> UpdateAssetMasterAccessWithHttpInfo(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest);
        /// <summary>
        /// Update MP4 support
        /// </summary>
        /// <remarks>
        /// Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <returns>AssetResponse</returns>
        AssetResponse UpdateAssetMp4Support(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest);

        /// <summary>
        /// Update MP4 support
        /// </summary>
        /// <remarks>
        /// Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        ApiResponse<AssetResponse> UpdateAssetMp4SupportWithHttpInfo(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an asset
        /// </summary>
        /// <remarks>
        /// Create a new Mux Video asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> CreateAssetAsync(CreateAssetRequest createAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an asset
        /// </summary>
        /// <remarks>
        /// Create a new Mux Video asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> CreateAssetWithHttpInfoAsync(CreateAssetRequest createAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a playback ID
        /// </summary>
        /// <remarks>
        /// Creates a playback ID that can be used to stream the asset to a viewer.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlaybackIDResponse</returns>
        System.Threading.Tasks.Task<CreatePlaybackIDResponse> CreateAssetPlaybackIdAsync(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a playback ID
        /// </summary>
        /// <remarks>
        /// Creates a playback ID that can be used to stream the asset to a viewer.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlaybackIDResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePlaybackIDResponse>> CreateAssetPlaybackIdWithHttpInfoAsync(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an asset track
        /// </summary>
        /// <remarks>
        /// Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTrackResponse</returns>
        System.Threading.Tasks.Task<CreateTrackResponse> CreateAssetTrackAsync(string ASSET_ID, CreateTrackRequest createTrackRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an asset track
        /// </summary>
        /// <remarks>
        /// Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTrackResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTrackResponse>> CreateAssetTrackWithHttpInfoAsync(string ASSET_ID, CreateTrackRequest createTrackRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Deletes a video asset and all its data.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an asset
        /// </summary>
        /// <remarks>
        /// Deletes a video asset and all its data.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetWithHttpInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a playback ID
        /// </summary>
        /// <remarks>
        /// Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetPlaybackIdAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a playback ID
        /// </summary>
        /// <remarks>
        /// Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetPlaybackIdWithHttpInfoAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an asset track
        /// </summary>
        /// <remarks>
        /// Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAssetTrackAsync(string ASSET_ID, string TRACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an asset track
        /// </summary>
        /// <remarks>
        /// Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAssetTrackWithHttpInfoAsync(string ASSET_ID, string TRACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate track subtitles
        /// </summary>
        /// <remarks>
        /// Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateTrackSubtitlesResponse</returns>
        System.Threading.Tasks.Task<GenerateTrackSubtitlesResponse> GenerateAssetTrackSubtitlesAsync(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate track subtitles
        /// </summary>
        /// <remarks>
        /// Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateTrackSubtitlesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateTrackSubtitlesResponse>> GenerateAssetTrackSubtitlesWithHttpInfoAsync(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an asset
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> GetAssetAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an asset
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> GetAssetWithHttpInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve asset input info
        /// </summary>
        /// <remarks>
        /// Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetInputInfoResponse</returns>
        System.Threading.Tasks.Task<GetAssetInputInfoResponse> GetAssetInputInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve asset input info
        /// </summary>
        /// <remarks>
        /// Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetInputInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetInputInfoResponse>> GetAssetInputInfoWithHttpInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a playback ID
        /// </summary>
        /// <remarks>
        /// Retrieves information about the specified playback ID.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetPlaybackIDResponse</returns>
        System.Threading.Tasks.Task<GetAssetPlaybackIDResponse> GetAssetPlaybackIdAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a playback ID
        /// </summary>
        /// <remarks>
        /// Retrieves information about the specified playback ID.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetPlaybackIDResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetPlaybackIDResponse>> GetAssetPlaybackIdWithHttpInfoAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// List all Mux assets.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssetsResponse</returns>
        System.Threading.Tasks.Task<ListAssetsResponse> ListAssetsAsync(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List assets
        /// </summary>
        /// <remarks>
        /// List all Mux assets.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssetsResponse>> ListAssetsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> UpdateAssetAsync(string ASSET_ID, UpdateAssetRequest updateAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an asset
        /// </summary>
        /// <remarks>
        /// Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> UpdateAssetWithHttpInfoAsync(string ASSET_ID, UpdateAssetRequest updateAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update master access
        /// </summary>
        /// <remarks>
        /// Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> UpdateAssetMasterAccessAsync(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update master access
        /// </summary>
        /// <remarks>
        /// Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> UpdateAssetMasterAccessWithHttpInfoAsync(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update MP4 support
        /// </summary>
        /// <remarks>
        /// Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        System.Threading.Tasks.Task<AssetResponse> UpdateAssetMp4SupportAsync(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update MP4 support
        /// </summary>
        /// <remarks>
        /// Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </remarks>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponse>> UpdateAssetMp4SupportWithHttpInfoAsync(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private Mux.Csharp.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                new Mux.Csharp.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(Mux.Csharp.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Mux.Csharp.Sdk.Client.Configuration.MergeConfigurations(
                Mux.Csharp.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Mux.Csharp.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetsApi(Mux.Csharp.Sdk.Client.ISynchronousClient client, Mux.Csharp.Sdk.Client.IAsynchronousClient asyncClient, Mux.Csharp.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Mux.Csharp.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Mux.Csharp.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Mux.Csharp.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an asset Create a new Mux Video asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <returns>AssetResponse</returns>
        public AssetResponse CreateAsset(CreateAssetRequest createAssetRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = CreateAssetWithHttpInfo(createAssetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an asset Create a new Mux Video asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> CreateAssetWithHttpInfo(CreateAssetRequest createAssetRequest)
        {
            // verify the required parameter 'createAssetRequest' is set
            if (createAssetRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createAssetRequest' when calling AssetsApi->CreateAsset");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAssetRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AssetResponse>("/video/v1/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an asset Create a new Mux Video asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> CreateAssetAsync(CreateAssetRequest createAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = await CreateAssetWithHttpInfoAsync(createAssetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an asset Create a new Mux Video asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse>> CreateAssetWithHttpInfoAsync(CreateAssetRequest createAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAssetRequest' is set
            if (createAssetRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createAssetRequest' when calling AssetsApi->CreateAsset");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAssetRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AssetResponse>("/video/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a playback ID Creates a playback ID that can be used to stream the asset to a viewer.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>CreatePlaybackIDResponse</returns>
        public CreatePlaybackIDResponse CreateAssetPlaybackId(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse> localVarResponse = CreateAssetPlaybackIdWithHttpInfo(ASSET_ID, createPlaybackIDRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a playback ID Creates a playback ID that can be used to stream the asset to a viewer.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <returns>ApiResponse of CreatePlaybackIDResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse> CreateAssetPlaybackIdWithHttpInfo(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->CreateAssetPlaybackId");
            }

            // verify the required parameter 'createPlaybackIDRequest' is set
            if (createPlaybackIDRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createPlaybackIDRequest' when calling AssetsApi->CreateAssetPlaybackId");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = createPlaybackIDRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePlaybackIDResponse>("/video/v1/assets/{ASSET_ID}/playback-ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a playback ID Creates a playback ID that can be used to stream the asset to a viewer.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlaybackIDResponse</returns>
        public async System.Threading.Tasks.Task<CreatePlaybackIDResponse> CreateAssetPlaybackIdAsync(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse> localVarResponse = await CreateAssetPlaybackIdWithHttpInfoAsync(ASSET_ID, createPlaybackIDRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a playback ID Creates a playback ID that can be used to stream the asset to a viewer.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createPlaybackIDRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlaybackIDResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<CreatePlaybackIDResponse>> CreateAssetPlaybackIdWithHttpInfoAsync(string ASSET_ID, CreatePlaybackIDRequest createPlaybackIDRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->CreateAssetPlaybackId");
            }

            // verify the required parameter 'createPlaybackIDRequest' is set
            if (createPlaybackIDRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createPlaybackIDRequest' when calling AssetsApi->CreateAssetPlaybackId");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = createPlaybackIDRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePlaybackIDResponse>("/video/v1/assets/{ASSET_ID}/playback-ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an asset track Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <returns>CreateTrackResponse</returns>
        public CreateTrackResponse CreateAssetTrack(string ASSET_ID, CreateTrackRequest createTrackRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<CreateTrackResponse> localVarResponse = CreateAssetTrackWithHttpInfo(ASSET_ID, createTrackRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an asset track Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <returns>ApiResponse of CreateTrackResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<CreateTrackResponse> CreateAssetTrackWithHttpInfo(string ASSET_ID, CreateTrackRequest createTrackRequest)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->CreateAssetTrack");
            }

            // verify the required parameter 'createTrackRequest' is set
            if (createTrackRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createTrackRequest' when calling AssetsApi->CreateAssetTrack");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = createTrackRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTrackResponse>("/video/v1/assets/{ASSET_ID}/tracks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an asset track Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTrackResponse</returns>
        public async System.Threading.Tasks.Task<CreateTrackResponse> CreateAssetTrackAsync(string ASSET_ID, CreateTrackRequest createTrackRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<CreateTrackResponse> localVarResponse = await CreateAssetTrackWithHttpInfoAsync(ASSET_ID, createTrackRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an asset track Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="createTrackRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTrackResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<CreateTrackResponse>> CreateAssetTrackWithHttpInfoAsync(string ASSET_ID, CreateTrackRequest createTrackRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->CreateAssetTrack");
            }

            // verify the required parameter 'createTrackRequest' is set
            if (createTrackRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'createTrackRequest' when calling AssetsApi->CreateAssetTrack");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = createTrackRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTrackResponse>("/video/v1/assets/{ASSET_ID}/tracks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an asset Deletes a video asset and all its data.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns></returns>
        public void DeleteAsset(string ASSET_ID)
        {
            DeleteAssetWithHttpInfo(ASSET_ID);
        }

        /// <summary>
        /// Delete an asset Deletes a video asset and all its data.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteAssetWithHttpInfo(string ASSET_ID)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->DeleteAsset");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/assets/{ASSET_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an asset Deletes a video asset and all its data.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAssetWithHttpInfoAsync(ASSET_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an asset Deletes a video asset and all its data.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteAssetWithHttpInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->DeleteAsset");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/assets/{ASSET_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a playback ID Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns></returns>
        public void DeleteAssetPlaybackId(string ASSET_ID, string PLAYBACK_ID)
        {
            DeleteAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
        }

        /// <summary>
        /// Delete a playback ID Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteAssetPlaybackIdWithHttpInfo(string ASSET_ID, string PLAYBACK_ID)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->DeleteAssetPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling AssetsApi->DeleteAssetPlaybackId");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssetPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a playback ID Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetPlaybackIdAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAssetPlaybackIdWithHttpInfoAsync(ASSET_ID, PLAYBACK_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a playback ID Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteAssetPlaybackIdWithHttpInfoAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->DeleteAssetPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling AssetsApi->DeleteAssetPlaybackId");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssetPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an asset track Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <returns></returns>
        public void DeleteAssetTrack(string ASSET_ID, string TRACK_ID)
        {
            DeleteAssetTrackWithHttpInfo(ASSET_ID, TRACK_ID);
        }

        /// <summary>
        /// Delete an asset track Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<Object> DeleteAssetTrackWithHttpInfo(string ASSET_ID, string TRACK_ID)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->DeleteAssetTrack");
            }

            // verify the required parameter 'TRACK_ID' is set
            if (TRACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRACK_ID' when calling AssetsApi->DeleteAssetTrack");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TRACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssetTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an asset track Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAssetTrackAsync(string ASSET_ID, string TRACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteAssetTrackWithHttpInfoAsync(ASSET_ID, TRACK_ID, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an asset track Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<Object>> DeleteAssetTrackWithHttpInfoAsync(string ASSET_ID, string TRACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->DeleteAssetTrack");
            }

            // verify the required parameter 'TRACK_ID' is set
            if (TRACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRACK_ID' when calling AssetsApi->DeleteAssetTrack");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TRACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAssetTrack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate track subtitles Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <returns>GenerateTrackSubtitlesResponse</returns>
        public GenerateTrackSubtitlesResponse GenerateAssetTrackSubtitles(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GenerateTrackSubtitlesResponse> localVarResponse = GenerateAssetTrackSubtitlesWithHttpInfo(ASSET_ID, TRACK_ID, generateTrackSubtitlesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate track subtitles Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <returns>ApiResponse of GenerateTrackSubtitlesResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<GenerateTrackSubtitlesResponse> GenerateAssetTrackSubtitlesWithHttpInfo(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GenerateAssetTrackSubtitles");
            }

            // verify the required parameter 'TRACK_ID' is set
            if (TRACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRACK_ID' when calling AssetsApi->GenerateAssetTrackSubtitles");
            }

            // verify the required parameter 'generateTrackSubtitlesRequest' is set
            if (generateTrackSubtitlesRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'generateTrackSubtitlesRequest' when calling AssetsApi->GenerateAssetTrackSubtitles");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TRACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRACK_ID)); // path parameter
            localVarRequestOptions.Data = generateTrackSubtitlesRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateTrackSubtitlesResponse>("/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}/generate-subtitles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAssetTrackSubtitles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate track subtitles Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateTrackSubtitlesResponse</returns>
        public async System.Threading.Tasks.Task<GenerateTrackSubtitlesResponse> GenerateAssetTrackSubtitlesAsync(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GenerateTrackSubtitlesResponse> localVarResponse = await GenerateAssetTrackSubtitlesWithHttpInfoAsync(ASSET_ID, TRACK_ID, generateTrackSubtitlesRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate track subtitles Generates subtitles (captions) for a given audio track. This API can be used for up to 7 days after an asset is created.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="TRACK_ID">The track ID.</param>
        /// <param name="generateTrackSubtitlesRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateTrackSubtitlesResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GenerateTrackSubtitlesResponse>> GenerateAssetTrackSubtitlesWithHttpInfoAsync(string ASSET_ID, string TRACK_ID, GenerateTrackSubtitlesRequest generateTrackSubtitlesRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GenerateAssetTrackSubtitles");
            }

            // verify the required parameter 'TRACK_ID' is set
            if (TRACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'TRACK_ID' when calling AssetsApi->GenerateAssetTrackSubtitles");
            }

            // verify the required parameter 'generateTrackSubtitlesRequest' is set
            if (generateTrackSubtitlesRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'generateTrackSubtitlesRequest' when calling AssetsApi->GenerateAssetTrackSubtitles");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("TRACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(TRACK_ID)); // path parameter
            localVarRequestOptions.Data = generateTrackSubtitlesRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateTrackSubtitlesResponse>("/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}/generate-subtitles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateAssetTrackSubtitles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an asset Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>AssetResponse</returns>
        public AssetResponse GetAsset(string ASSET_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = GetAssetWithHttpInfo(ASSET_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an asset Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> GetAssetWithHttpInfo(string ASSET_ID)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GetAsset");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetResponse>("/video/v1/assets/{ASSET_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an asset Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> GetAssetAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = await GetAssetWithHttpInfoAsync(ASSET_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an asset Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse>> GetAssetWithHttpInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GetAsset");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssetResponse>("/video/v1/assets/{ASSET_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve asset input info Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>GetAssetInputInfoResponse</returns>
        public GetAssetInputInfoResponse GetAssetInputInfo(string ASSET_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetAssetInputInfoResponse> localVarResponse = GetAssetInputInfoWithHttpInfo(ASSET_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve asset input info Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <returns>ApiResponse of GetAssetInputInfoResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<GetAssetInputInfoResponse> GetAssetInputInfoWithHttpInfo(string ASSET_ID)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GetAssetInputInfo");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetInputInfoResponse>("/video/v1/assets/{ASSET_ID}/input-info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetInputInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve asset input info Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetInputInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetInputInfoResponse> GetAssetInputInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetAssetInputInfoResponse> localVarResponse = await GetAssetInputInfoWithHttpInfoAsync(ASSET_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve asset input info Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetInputInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GetAssetInputInfoResponse>> GetAssetInputInfoWithHttpInfoAsync(string ASSET_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GetAssetInputInfo");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetInputInfoResponse>("/video/v1/assets/{ASSET_ID}/input-info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetInputInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a playback ID Retrieves information about the specified playback ID.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>GetAssetPlaybackIDResponse</returns>
        public GetAssetPlaybackIDResponse GetAssetPlaybackId(string ASSET_ID, string PLAYBACK_ID)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetAssetPlaybackIDResponse> localVarResponse = GetAssetPlaybackIdWithHttpInfo(ASSET_ID, PLAYBACK_ID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a playback ID Retrieves information about the specified playback ID.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <returns>ApiResponse of GetAssetPlaybackIDResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<GetAssetPlaybackIDResponse> GetAssetPlaybackIdWithHttpInfo(string ASSET_ID, string PLAYBACK_ID)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GetAssetPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling AssetsApi->GetAssetPlaybackId");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetPlaybackIDResponse>("/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a playback ID Retrieves information about the specified playback ID.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetPlaybackIDResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetPlaybackIDResponse> GetAssetPlaybackIdAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<GetAssetPlaybackIDResponse> localVarResponse = await GetAssetPlaybackIdWithHttpInfoAsync(ASSET_ID, PLAYBACK_ID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a playback ID Retrieves information about the specified playback ID.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="PLAYBACK_ID">The live stream&#39;s playback ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetPlaybackIDResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<GetAssetPlaybackIDResponse>> GetAssetPlaybackIdWithHttpInfoAsync(string ASSET_ID, string PLAYBACK_ID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->GetAssetPlaybackId");
            }

            // verify the required parameter 'PLAYBACK_ID' is set
            if (PLAYBACK_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'PLAYBACK_ID' when calling AssetsApi->GetAssetPlaybackId");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.PathParameters.Add("PLAYBACK_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(PLAYBACK_ID)); // path parameter

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetPlaybackIDResponse>("/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetPlaybackId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List assets List all Mux assets.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <returns>ListAssetsResponse</returns>
        public ListAssetsResponse ListAssets(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListAssetsResponse> localVarResponse = ListAssetsWithHttpInfo(limit, page, liveStreamId, uploadId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List assets List all Mux assets.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <returns>ApiResponse of ListAssetsResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<ListAssetsResponse> ListAssetsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string))
        {
            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (liveStreamId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "live_stream_id", liveStreamId));
            }
            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "upload_id", uploadId));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAssetsResponse>("/video/v1/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List assets List all Mux assets.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAssetsResponse</returns>
        public async System.Threading.Tasks.Task<ListAssetsResponse> ListAssetsAsync(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<ListAssetsResponse> localVarResponse = await ListAssetsWithHttpInfoAsync(limit, page, liveStreamId, uploadId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List assets List all Mux assets.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of items to include in the response (optional, default to 25)</param>
        /// <param name="page">Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)</param>
        /// <param name="liveStreamId">Filter response to return all the assets for this live stream only (optional)</param>
        /// <param name="uploadId">Filter response to return an asset created from this direct upload only (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<ListAssetsResponse>> ListAssetsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string liveStreamId = default(string), string uploadId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (liveStreamId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "live_stream_id", liveStreamId));
            }
            if (uploadId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Mux.Csharp.Sdk.Client.ClientUtils.ParameterToMultiMap("", "upload_id", uploadId));
            }

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAssetsResponse>("/video/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAssets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <returns>AssetResponse</returns>
        public AssetResponse UpdateAsset(string ASSET_ID, UpdateAssetRequest updateAssetRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = UpdateAssetWithHttpInfo(ASSET_ID, updateAssetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> UpdateAssetWithHttpInfo(string ASSET_ID, UpdateAssetRequest updateAssetRequest)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->UpdateAsset");
            }

            // verify the required parameter 'updateAssetRequest' is set
            if (updateAssetRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetRequest' when calling AssetsApi->UpdateAsset");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = updateAssetRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AssetResponse>("/video/v1/assets/{ASSET_ID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an asset Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> UpdateAssetAsync(string ASSET_ID, UpdateAssetRequest updateAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = await UpdateAssetWithHttpInfoAsync(ASSET_ID, updateAssetRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse>> UpdateAssetWithHttpInfoAsync(string ASSET_ID, UpdateAssetRequest updateAssetRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->UpdateAsset");
            }

            // verify the required parameter 'updateAssetRequest' is set
            if (updateAssetRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetRequest' when calling AssetsApi->UpdateAsset");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = updateAssetRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AssetResponse>("/video/v1/assets/{ASSET_ID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update master access Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <returns>AssetResponse</returns>
        public AssetResponse UpdateAssetMasterAccess(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = UpdateAssetMasterAccessWithHttpInfo(ASSET_ID, updateAssetMasterAccessRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update master access Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> UpdateAssetMasterAccessWithHttpInfo(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->UpdateAssetMasterAccess");
            }

            // verify the required parameter 'updateAssetMasterAccessRequest' is set
            if (updateAssetMasterAccessRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetMasterAccessRequest' when calling AssetsApi->UpdateAssetMasterAccess");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = updateAssetMasterAccessRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AssetResponse>("/video/v1/assets/{ASSET_ID}/master-access", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAssetMasterAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update master access Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> UpdateAssetMasterAccessAsync(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = await UpdateAssetMasterAccessWithHttpInfoAsync(ASSET_ID, updateAssetMasterAccessRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update master access Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMasterAccessRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse>> UpdateAssetMasterAccessWithHttpInfoAsync(string ASSET_ID, UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->UpdateAssetMasterAccess");
            }

            // verify the required parameter 'updateAssetMasterAccessRequest' is set
            if (updateAssetMasterAccessRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetMasterAccessRequest' when calling AssetsApi->UpdateAssetMasterAccess");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = updateAssetMasterAccessRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AssetResponse>("/video/v1/assets/{ASSET_ID}/master-access", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAssetMasterAccess", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update MP4 support Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <returns>AssetResponse</returns>
        public AssetResponse UpdateAssetMp4Support(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest)
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = UpdateAssetMp4SupportWithHttpInfo(ASSET_ID, updateAssetMP4SupportRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update MP4 support Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <returns>ApiResponse of AssetResponse</returns>
        public Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> UpdateAssetMp4SupportWithHttpInfo(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest)
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->UpdateAssetMp4Support");
            }

            // verify the required parameter 'updateAssetMP4SupportRequest' is set
            if (updateAssetMP4SupportRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetMP4SupportRequest' when calling AssetsApi->UpdateAssetMp4Support");
            }

            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = updateAssetMP4SupportRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AssetResponse>("/video/v1/assets/{ASSET_ID}/mp4-support", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAssetMp4Support", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update MP4 support Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponse</returns>
        public async System.Threading.Tasks.Task<AssetResponse> UpdateAssetMp4SupportAsync(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse> localVarResponse = await UpdateAssetMp4SupportWithHttpInfoAsync(ASSET_ID, updateAssetMP4SupportRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update MP4 support Allows you to add or remove mp4 support for assets that were created without it. The values supported are &#x60;capped-1080p&#x60;, &#x60;audio-only&#x60;, &#x60;audio-only,capped-1080p&#x60;, &#x60;standard&#x60;(deprecated),  and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
        /// </summary>
        /// <exception cref="Mux.Csharp.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ASSET_ID">The asset ID.</param>
        /// <param name="updateAssetMP4SupportRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponse)</returns>
        public async System.Threading.Tasks.Task<Mux.Csharp.Sdk.Client.ApiResponse<AssetResponse>> UpdateAssetMp4SupportWithHttpInfoAsync(string ASSET_ID, UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ASSET_ID' is set
            if (ASSET_ID == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'ASSET_ID' when calling AssetsApi->UpdateAssetMp4Support");
            }

            // verify the required parameter 'updateAssetMP4SupportRequest' is set
            if (updateAssetMP4SupportRequest == null)
            {
                throw new Mux.Csharp.Sdk.Client.ApiException(400, "Missing required parameter 'updateAssetMP4SupportRequest' when calling AssetsApi->UpdateAssetMp4Support");
            }


            Mux.Csharp.Sdk.Client.RequestOptions localVarRequestOptions = new Mux.Csharp.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Mux.Csharp.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("ASSET_ID", Mux.Csharp.Sdk.Client.ClientUtils.ParameterToString(ASSET_ID)); // path parameter
            localVarRequestOptions.Data = updateAssetMP4SupportRequest;

            // authentication (accessToken) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + Mux.Csharp.Sdk.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AssetResponse>("/video/v1/assets/{ASSET_ID}/mp4-support", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAssetMp4Support", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
