/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// RealTimeHistogramTimeseriesDatapoint
    /// </summary>
    [DataContract(Name = "RealTimeHistogramTimeseriesDatapoint")]
    public partial class RealTimeHistogramTimeseriesDatapoint : IEquatable<RealTimeHistogramTimeseriesDatapoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealTimeHistogramTimeseriesDatapoint" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="sum">sum.</param>
        /// <param name="p95">p95.</param>
        /// <param name="median">median.</param>
        /// <param name="maxPercentage">maxPercentage.</param>
        /// <param name="bucketValues">bucketValues.</param>
        /// <param name="average">average.</param>
        public RealTimeHistogramTimeseriesDatapoint(string timestamp = default(string), long sum = default(long), double? p95 = default(double?), double? median = default(double?), double maxPercentage = default(double), List<RealTimeHistogramTimeseriesBucketValues> bucketValues = default(List<RealTimeHistogramTimeseriesBucketValues>), double? average = default(double?))
        {
            this.Timestamp = timestamp;
            this.Sum = sum;
            this.P95 = p95;
            this.Median = median;
            this.MaxPercentage = maxPercentage;
            this.BucketValues = bucketValues;
            this.Average = average;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Sum
        /// </summary>
        [DataMember(Name = "sum", EmitDefaultValue = false)]
        public long Sum { get; set; }

        /// <summary>
        /// Gets or Sets P95
        /// </summary>
        [DataMember(Name = "p95", EmitDefaultValue = true)]
        public double? P95 { get; set; }

        /// <summary>
        /// Gets or Sets Median
        /// </summary>
        [DataMember(Name = "median", EmitDefaultValue = true)]
        public double? Median { get; set; }

        /// <summary>
        /// Gets or Sets MaxPercentage
        /// </summary>
        [DataMember(Name = "max_percentage", EmitDefaultValue = false)]
        public double MaxPercentage { get; set; }

        /// <summary>
        /// Gets or Sets BucketValues
        /// </summary>
        [DataMember(Name = "bucket_values", EmitDefaultValue = false)]
        public List<RealTimeHistogramTimeseriesBucketValues> BucketValues { get; set; }

        /// <summary>
        /// Gets or Sets Average
        /// </summary>
        [DataMember(Name = "average", EmitDefaultValue = true)]
        public double? Average { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RealTimeHistogramTimeseriesDatapoint {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Sum: ").Append(Sum).Append("\n");
            sb.Append("  P95: ").Append(P95).Append("\n");
            sb.Append("  Median: ").Append(Median).Append("\n");
            sb.Append("  MaxPercentage: ").Append(MaxPercentage).Append("\n");
            sb.Append("  BucketValues: ").Append(BucketValues).Append("\n");
            sb.Append("  Average: ").Append(Average).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealTimeHistogramTimeseriesDatapoint);
        }

        /// <summary>
        /// Returns true if RealTimeHistogramTimeseriesDatapoint instances are equal
        /// </summary>
        /// <param name="input">Instance of RealTimeHistogramTimeseriesDatapoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealTimeHistogramTimeseriesDatapoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Sum == input.Sum ||
                    this.Sum.Equals(input.Sum)
                ) && 
                (
                    this.P95 == input.P95 ||
                    (this.P95 != null &&
                    this.P95.Equals(input.P95))
                ) && 
                (
                    this.Median == input.Median ||
                    (this.Median != null &&
                    this.Median.Equals(input.Median))
                ) && 
                (
                    this.MaxPercentage == input.MaxPercentage ||
                    this.MaxPercentage.Equals(input.MaxPercentage)
                ) && 
                (
                    this.BucketValues == input.BucketValues ||
                    this.BucketValues != null &&
                    input.BucketValues != null &&
                    this.BucketValues.SequenceEqual(input.BucketValues)
                ) && 
                (
                    this.Average == input.Average ||
                    (this.Average != null &&
                    this.Average.Equals(input.Average))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Sum.GetHashCode();
                if (this.P95 != null)
                {
                    hashCode = (hashCode * 59) + this.P95.GetHashCode();
                }
                if (this.Median != null)
                {
                    hashCode = (hashCode * 59) + this.Median.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MaxPercentage.GetHashCode();
                if (this.BucketValues != null)
                {
                    hashCode = (hashCode * 59) + this.BucketValues.GetHashCode();
                }
                if (this.Average != null)
                {
                    hashCode = (hashCode * 59) + this.Average.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
