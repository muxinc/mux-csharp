/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// LiveStream
    /// </summary>
    [DataContract(Name = "LiveStream")]
    public partial class LiveStream : IEquatable<LiveStream>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public LiveStreamStatus? Status { get; set; }
        /// <summary>
        /// Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags.
        /// </summary>
        /// <value>Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LatencyModeEnum
        {
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 1,

            /// <summary>
            /// Enum Reduced for value: reduced
            /// </summary>
            [EnumMember(Value = "reduced")]
            Reduced = 2,

            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 3

        }


        /// <summary>
        /// Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags.
        /// </summary>
        /// <value>Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags.</value>
        [DataMember(Name = "latency_mode", EmitDefaultValue = false)]
        public LatencyModeEnum? LatencyMode { get; set; }
        /// <summary>
        /// The protocol used for the active ingest stream. This is only set when the live stream is active.
        /// </summary>
        /// <value>The protocol used for the active ingest stream. This is only set when the live stream is active.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActiveIngestProtocolEnum
        {
            /// <summary>
            /// Enum Rtmp for value: rtmp
            /// </summary>
            [EnumMember(Value = "rtmp")]
            Rtmp = 1,

            /// <summary>
            /// Enum Srt for value: srt
            /// </summary>
            [EnumMember(Value = "srt")]
            Srt = 2

        }


        /// <summary>
        /// The protocol used for the active ingest stream. This is only set when the live stream is active.
        /// </summary>
        /// <value>The protocol used for the active ingest stream. This is only set when the live stream is active.</value>
        [DataMember(Name = "active_ingest_protocol", EmitDefaultValue = false)]
        public ActiveIngestProtocolEnum? ActiveIngestProtocol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveStream" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the Live Stream. Max 255 characters..</param>
        /// <param name="createdAt">Time the Live Stream was created, defined as a Unix timestamp (seconds since epoch)..</param>
        /// <param name="streamKey">Unique key used for streaming to a Mux RTMP endpoint. This should be considered as sensitive as credentials, anyone with this stream key can begin streaming..</param>
        /// <param name="activeAssetId">The Asset that is currently being created if there is an active broadcast..</param>
        /// <param name="recentAssetIds">An array of strings with the most recent Asset IDs that were created from this Live Stream. The most recently generated Asset ID is the last entry in the list..</param>
        /// <param name="status">status.</param>
        /// <param name="playbackIds">An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/play-your-videos) for more details..</param>
        /// <param name="newAssetSettings">newAssetSettings.</param>
        /// <param name="passthrough">Arbitrary user-supplied metadata set for the asset. Max 255 characters..</param>
        /// <param name="audioOnly">The live stream only processes the audio track if the value is set to true. Mux drops the video track if broadcasted..</param>
        /// <param name="embeddedSubtitles">Describes the embedded closed caption configuration of the incoming live stream..</param>
        /// <param name="generatedSubtitles">Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with &#x60;generated_subtitles&#x60; configured will automatically receive two text tracks. The first of these will have a &#x60;text_source&#x60; value of &#x60;generated_live&#x60;, and will be available with &#x60;ready&#x60; status as soon as the stream is live. The second text track will have a &#x60;text_source&#x60; value of &#x60;generated_live_final&#x60; and will contain subtitles with improved accuracy, timing, and formatting. However, &#x60;generated_live_final&#x60; tracks will not be available in &#x60;ready&#x60; status until the live stream ends. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback..</param>
        /// <param name="reconnectWindow">When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. **Max**: 1800s (30 minutes).  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the &#x60;use_slate_for_standard_latency&#x60; option.  (default to 60F).</param>
        /// <param name="useSlateForStandardLatency">By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream. (default to false).</param>
        /// <param name="reconnectSlateUrl">The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used..</param>
        /// <param name="reducedLatency">This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. See the [Reduce live stream latency guide](https://docs.mux.com/guides/reduce-live-stream-latency) to understand the tradeoffs..</param>
        /// <param name="lowLatency">This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency..</param>
        /// <param name="simulcastTargets">Each Simulcast Target contains configuration details to broadcast (or \&quot;restream\&quot;) a live stream to a third-party streaming service. [See the Stream live to 3rd party platforms guide](https://docs.mux.com/guides/stream-live-to-3rd-party-platforms)..</param>
        /// <param name="latencyMode">Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags..</param>
        /// <param name="test">True means this live stream is a test live stream. Test live streams can be used to help evaluate the Mux Video APIs for free. There is no limit on the number of test live streams, but they are watermarked with the Mux logo, and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours..</param>
        /// <param name="maxContinuousDuration">The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours. (default to 43200).</param>
        /// <param name="srtPassphrase">Unique key used for encrypting a stream to a Mux SRT endpoint..</param>
        /// <param name="activeIngestProtocol">The protocol used for the active ingest stream. This is only set when the live stream is active..</param>
        public LiveStream(string id = default(string), string createdAt = default(string), string streamKey = default(string), string activeAssetId = default(string), List<string> recentAssetIds = default(List<string>), LiveStreamStatus? status = default(LiveStreamStatus?), List<PlaybackID> playbackIds = default(List<PlaybackID>), CreateAssetRequest newAssetSettings = default(CreateAssetRequest), string passthrough = default(string), bool audioOnly = default(bool), List<LiveStreamEmbeddedSubtitleSettings> embeddedSubtitles = default(List<LiveStreamEmbeddedSubtitleSettings>), List<LiveStreamGeneratedSubtitleSettings> generatedSubtitles = default(List<LiveStreamGeneratedSubtitleSettings>), float reconnectWindow = 60F, bool useSlateForStandardLatency = false, string reconnectSlateUrl = default(string), bool reducedLatency = default(bool), bool lowLatency = default(bool), List<SimulcastTarget> simulcastTargets = default(List<SimulcastTarget>), LatencyModeEnum? latencyMode = default(LatencyModeEnum?), bool test = default(bool), int maxContinuousDuration = 43200, string srtPassphrase = default(string), ActiveIngestProtocolEnum? activeIngestProtocol = default(ActiveIngestProtocolEnum?))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.StreamKey = streamKey;
            this.ActiveAssetId = activeAssetId;
            this.RecentAssetIds = recentAssetIds;
            this.Status = status;
            this.PlaybackIds = playbackIds;
            this.NewAssetSettings = newAssetSettings;
            this.Passthrough = passthrough;
            this.AudioOnly = audioOnly;
            this.EmbeddedSubtitles = embeddedSubtitles;
            this.GeneratedSubtitles = generatedSubtitles;
            this.ReconnectWindow = reconnectWindow;
            this.UseSlateForStandardLatency = useSlateForStandardLatency;
            this.ReconnectSlateUrl = reconnectSlateUrl;
            this.ReducedLatency = reducedLatency;
            this.LowLatency = lowLatency;
            this.SimulcastTargets = simulcastTargets;
            this.LatencyMode = latencyMode;
            this.Test = test;
            this.MaxContinuousDuration = maxContinuousDuration;
            this.SrtPassphrase = srtPassphrase;
            this.ActiveIngestProtocol = activeIngestProtocol;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the Live Stream. Max 255 characters.
        /// </summary>
        /// <value>Unique identifier for the Live Stream. Max 255 characters.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Time the Live Stream was created, defined as a Unix timestamp (seconds since epoch).
        /// </summary>
        /// <value>Time the Live Stream was created, defined as a Unix timestamp (seconds since epoch).</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Unique key used for streaming to a Mux RTMP endpoint. This should be considered as sensitive as credentials, anyone with this stream key can begin streaming.
        /// </summary>
        /// <value>Unique key used for streaming to a Mux RTMP endpoint. This should be considered as sensitive as credentials, anyone with this stream key can begin streaming.</value>
        [DataMember(Name = "stream_key", EmitDefaultValue = false)]
        public string StreamKey { get; set; }

        /// <summary>
        /// The Asset that is currently being created if there is an active broadcast.
        /// </summary>
        /// <value>The Asset that is currently being created if there is an active broadcast.</value>
        [DataMember(Name = "active_asset_id", EmitDefaultValue = false)]
        public string ActiveAssetId { get; set; }

        /// <summary>
        /// An array of strings with the most recent Asset IDs that were created from this Live Stream. The most recently generated Asset ID is the last entry in the list.
        /// </summary>
        /// <value>An array of strings with the most recent Asset IDs that were created from this Live Stream. The most recently generated Asset ID is the last entry in the list.</value>
        [DataMember(Name = "recent_asset_ids", EmitDefaultValue = false)]
        public List<string> RecentAssetIds { get; set; }

        /// <summary>
        /// An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/play-your-videos) for more details.
        /// </summary>
        /// <value>An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/play-your-videos) for more details.</value>
        [DataMember(Name = "playback_ids", EmitDefaultValue = false)]
        public List<PlaybackID> PlaybackIds { get; set; }

        /// <summary>
        /// Gets or Sets NewAssetSettings
        /// </summary>
        [DataMember(Name = "new_asset_settings", EmitDefaultValue = false)]
        public CreateAssetRequest NewAssetSettings { get; set; }

        /// <summary>
        /// Arbitrary user-supplied metadata set for the asset. Max 255 characters.
        /// </summary>
        /// <value>Arbitrary user-supplied metadata set for the asset. Max 255 characters.</value>
        [DataMember(Name = "passthrough", EmitDefaultValue = false)]
        public string Passthrough { get; set; }

        /// <summary>
        /// The live stream only processes the audio track if the value is set to true. Mux drops the video track if broadcasted.
        /// </summary>
        /// <value>The live stream only processes the audio track if the value is set to true. Mux drops the video track if broadcasted.</value>
        [DataMember(Name = "audio_only", EmitDefaultValue = true)]
        public bool AudioOnly { get; set; }

        /// <summary>
        /// Describes the embedded closed caption configuration of the incoming live stream.
        /// </summary>
        /// <value>Describes the embedded closed caption configuration of the incoming live stream.</value>
        [DataMember(Name = "embedded_subtitles", EmitDefaultValue = false)]
        public List<LiveStreamEmbeddedSubtitleSettings> EmbeddedSubtitles { get; set; }

        /// <summary>
        /// Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with &#x60;generated_subtitles&#x60; configured will automatically receive two text tracks. The first of these will have a &#x60;text_source&#x60; value of &#x60;generated_live&#x60;, and will be available with &#x60;ready&#x60; status as soon as the stream is live. The second text track will have a &#x60;text_source&#x60; value of &#x60;generated_live_final&#x60; and will contain subtitles with improved accuracy, timing, and formatting. However, &#x60;generated_live_final&#x60; tracks will not be available in &#x60;ready&#x60; status until the live stream ends. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback.
        /// </summary>
        /// <value>Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with &#x60;generated_subtitles&#x60; configured will automatically receive two text tracks. The first of these will have a &#x60;text_source&#x60; value of &#x60;generated_live&#x60;, and will be available with &#x60;ready&#x60; status as soon as the stream is live. The second text track will have a &#x60;text_source&#x60; value of &#x60;generated_live_final&#x60; and will contain subtitles with improved accuracy, timing, and formatting. However, &#x60;generated_live_final&#x60; tracks will not be available in &#x60;ready&#x60; status until the live stream ends. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback.</value>
        [DataMember(Name = "generated_subtitles", EmitDefaultValue = false)]
        public List<LiveStreamGeneratedSubtitleSettings> GeneratedSubtitles { get; set; }

        /// <summary>
        /// When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. **Max**: 1800s (30 minutes).  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the &#x60;use_slate_for_standard_latency&#x60; option. 
        /// </summary>
        /// <value>When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. **Max**: 1800s (30 minutes).  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the &#x60;use_slate_for_standard_latency&#x60; option. </value>
        [DataMember(Name = "reconnect_window", EmitDefaultValue = false)]
        public float ReconnectWindow { get; set; }

        /// <summary>
        /// By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.
        /// </summary>
        /// <value>By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.</value>
        [DataMember(Name = "use_slate_for_standard_latency", EmitDefaultValue = true)]
        public bool UseSlateForStandardLatency { get; set; }

        /// <summary>
        /// The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used.
        /// </summary>
        /// <value>The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used.</value>
        [DataMember(Name = "reconnect_slate_url", EmitDefaultValue = false)]
        public string ReconnectSlateUrl { get; set; }

        /// <summary>
        /// This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. See the [Reduce live stream latency guide](https://docs.mux.com/guides/reduce-live-stream-latency) to understand the tradeoffs.
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. See the [Reduce live stream latency guide](https://docs.mux.com/guides/reduce-live-stream-latency) to understand the tradeoffs.</value>
        [DataMember(Name = "reduced_latency", EmitDefaultValue = true)]
        [Obsolete]
        public bool ReducedLatency { get; set; }

        /// <summary>
        /// This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency.
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency.</value>
        [DataMember(Name = "low_latency", EmitDefaultValue = true)]
        [Obsolete]
        public bool LowLatency { get; set; }

        /// <summary>
        /// Each Simulcast Target contains configuration details to broadcast (or \&quot;restream\&quot;) a live stream to a third-party streaming service. [See the Stream live to 3rd party platforms guide](https://docs.mux.com/guides/stream-live-to-3rd-party-platforms).
        /// </summary>
        /// <value>Each Simulcast Target contains configuration details to broadcast (or \&quot;restream\&quot;) a live stream to a third-party streaming service. [See the Stream live to 3rd party platforms guide](https://docs.mux.com/guides/stream-live-to-3rd-party-platforms).</value>
        [DataMember(Name = "simulcast_targets", EmitDefaultValue = false)]
        public List<SimulcastTarget> SimulcastTargets { get; set; }

        /// <summary>
        /// True means this live stream is a test live stream. Test live streams can be used to help evaluate the Mux Video APIs for free. There is no limit on the number of test live streams, but they are watermarked with the Mux logo, and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.
        /// </summary>
        /// <value>True means this live stream is a test live stream. Test live streams can be used to help evaluate the Mux Video APIs for free. There is no limit on the number of test live streams, but they are watermarked with the Mux logo, and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.</value>
        [DataMember(Name = "test", EmitDefaultValue = true)]
        public bool Test { get; set; }

        /// <summary>
        /// The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.
        /// </summary>
        /// <value>The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.</value>
        [DataMember(Name = "max_continuous_duration", EmitDefaultValue = false)]
        public int MaxContinuousDuration { get; set; }

        /// <summary>
        /// Unique key used for encrypting a stream to a Mux SRT endpoint.
        /// </summary>
        /// <value>Unique key used for encrypting a stream to a Mux SRT endpoint.</value>
        [DataMember(Name = "srt_passphrase", EmitDefaultValue = false)]
        public string SrtPassphrase { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveStream {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  StreamKey: ").Append(StreamKey).Append("\n");
            sb.Append("  ActiveAssetId: ").Append(ActiveAssetId).Append("\n");
            sb.Append("  RecentAssetIds: ").Append(RecentAssetIds).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PlaybackIds: ").Append(PlaybackIds).Append("\n");
            sb.Append("  NewAssetSettings: ").Append(NewAssetSettings).Append("\n");
            sb.Append("  Passthrough: ").Append(Passthrough).Append("\n");
            sb.Append("  AudioOnly: ").Append(AudioOnly).Append("\n");
            sb.Append("  EmbeddedSubtitles: ").Append(EmbeddedSubtitles).Append("\n");
            sb.Append("  GeneratedSubtitles: ").Append(GeneratedSubtitles).Append("\n");
            sb.Append("  ReconnectWindow: ").Append(ReconnectWindow).Append("\n");
            sb.Append("  UseSlateForStandardLatency: ").Append(UseSlateForStandardLatency).Append("\n");
            sb.Append("  ReconnectSlateUrl: ").Append(ReconnectSlateUrl).Append("\n");
            sb.Append("  ReducedLatency: ").Append(ReducedLatency).Append("\n");
            sb.Append("  LowLatency: ").Append(LowLatency).Append("\n");
            sb.Append("  SimulcastTargets: ").Append(SimulcastTargets).Append("\n");
            sb.Append("  LatencyMode: ").Append(LatencyMode).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  MaxContinuousDuration: ").Append(MaxContinuousDuration).Append("\n");
            sb.Append("  SrtPassphrase: ").Append(SrtPassphrase).Append("\n");
            sb.Append("  ActiveIngestProtocol: ").Append(ActiveIngestProtocol).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveStream);
        }

        /// <summary>
        /// Returns true if LiveStream instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveStream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveStream input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.StreamKey == input.StreamKey ||
                    (this.StreamKey != null &&
                    this.StreamKey.Equals(input.StreamKey))
                ) && 
                (
                    this.ActiveAssetId == input.ActiveAssetId ||
                    (this.ActiveAssetId != null &&
                    this.ActiveAssetId.Equals(input.ActiveAssetId))
                ) && 
                (
                    this.RecentAssetIds == input.RecentAssetIds ||
                    this.RecentAssetIds != null &&
                    input.RecentAssetIds != null &&
                    this.RecentAssetIds.SequenceEqual(input.RecentAssetIds)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.PlaybackIds == input.PlaybackIds ||
                    this.PlaybackIds != null &&
                    input.PlaybackIds != null &&
                    this.PlaybackIds.SequenceEqual(input.PlaybackIds)
                ) && 
                (
                    this.NewAssetSettings == input.NewAssetSettings ||
                    (this.NewAssetSettings != null &&
                    this.NewAssetSettings.Equals(input.NewAssetSettings))
                ) && 
                (
                    this.Passthrough == input.Passthrough ||
                    (this.Passthrough != null &&
                    this.Passthrough.Equals(input.Passthrough))
                ) && 
                (
                    this.AudioOnly == input.AudioOnly ||
                    this.AudioOnly.Equals(input.AudioOnly)
                ) && 
                (
                    this.EmbeddedSubtitles == input.EmbeddedSubtitles ||
                    this.EmbeddedSubtitles != null &&
                    input.EmbeddedSubtitles != null &&
                    this.EmbeddedSubtitles.SequenceEqual(input.EmbeddedSubtitles)
                ) && 
                (
                    this.GeneratedSubtitles == input.GeneratedSubtitles ||
                    this.GeneratedSubtitles != null &&
                    input.GeneratedSubtitles != null &&
                    this.GeneratedSubtitles.SequenceEqual(input.GeneratedSubtitles)
                ) && 
                (
                    this.ReconnectWindow == input.ReconnectWindow ||
                    this.ReconnectWindow.Equals(input.ReconnectWindow)
                ) && 
                (
                    this.UseSlateForStandardLatency == input.UseSlateForStandardLatency ||
                    this.UseSlateForStandardLatency.Equals(input.UseSlateForStandardLatency)
                ) && 
                (
                    this.ReconnectSlateUrl == input.ReconnectSlateUrl ||
                    (this.ReconnectSlateUrl != null &&
                    this.ReconnectSlateUrl.Equals(input.ReconnectSlateUrl))
                ) && 
                (
                    this.ReducedLatency == input.ReducedLatency ||
                    this.ReducedLatency.Equals(input.ReducedLatency)
                ) && 
                (
                    this.LowLatency == input.LowLatency ||
                    this.LowLatency.Equals(input.LowLatency)
                ) && 
                (
                    this.SimulcastTargets == input.SimulcastTargets ||
                    this.SimulcastTargets != null &&
                    input.SimulcastTargets != null &&
                    this.SimulcastTargets.SequenceEqual(input.SimulcastTargets)
                ) && 
                (
                    this.LatencyMode == input.LatencyMode ||
                    this.LatencyMode.Equals(input.LatencyMode)
                ) && 
                (
                    this.Test == input.Test ||
                    this.Test.Equals(input.Test)
                ) && 
                (
                    this.MaxContinuousDuration == input.MaxContinuousDuration ||
                    this.MaxContinuousDuration.Equals(input.MaxContinuousDuration)
                ) && 
                (
                    this.SrtPassphrase == input.SrtPassphrase ||
                    (this.SrtPassphrase != null &&
                    this.SrtPassphrase.Equals(input.SrtPassphrase))
                ) && 
                (
                    this.ActiveIngestProtocol == input.ActiveIngestProtocol ||
                    this.ActiveIngestProtocol.Equals(input.ActiveIngestProtocol)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.StreamKey != null)
                {
                    hashCode = (hashCode * 59) + this.StreamKey.GetHashCode();
                }
                if (this.ActiveAssetId != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveAssetId.GetHashCode();
                }
                if (this.RecentAssetIds != null)
                {
                    hashCode = (hashCode * 59) + this.RecentAssetIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.PlaybackIds != null)
                {
                    hashCode = (hashCode * 59) + this.PlaybackIds.GetHashCode();
                }
                if (this.NewAssetSettings != null)
                {
                    hashCode = (hashCode * 59) + this.NewAssetSettings.GetHashCode();
                }
                if (this.Passthrough != null)
                {
                    hashCode = (hashCode * 59) + this.Passthrough.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AudioOnly.GetHashCode();
                if (this.EmbeddedSubtitles != null)
                {
                    hashCode = (hashCode * 59) + this.EmbeddedSubtitles.GetHashCode();
                }
                if (this.GeneratedSubtitles != null)
                {
                    hashCode = (hashCode * 59) + this.GeneratedSubtitles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReconnectWindow.GetHashCode();
                hashCode = (hashCode * 59) + this.UseSlateForStandardLatency.GetHashCode();
                if (this.ReconnectSlateUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ReconnectSlateUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReducedLatency.GetHashCode();
                hashCode = (hashCode * 59) + this.LowLatency.GetHashCode();
                if (this.SimulcastTargets != null)
                {
                    hashCode = (hashCode * 59) + this.SimulcastTargets.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LatencyMode.GetHashCode();
                hashCode = (hashCode * 59) + this.Test.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxContinuousDuration.GetHashCode();
                if (this.SrtPassphrase != null)
                {
                    hashCode = (hashCode * 59) + this.SrtPassphrase.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ActiveIngestProtocol.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ReconnectWindow (float) maximum
            if (this.ReconnectWindow > (float)1800)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReconnectWindow, must be a value less than or equal to 1800.", new [] { "ReconnectWindow" });
            }

            // ReconnectWindow (float) minimum
            if (this.ReconnectWindow < (float)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReconnectWindow, must be a value greater than or equal to 0.", new [] { "ReconnectWindow" });
            }

            // MaxContinuousDuration (int) maximum
            if (this.MaxContinuousDuration > (int)43200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxContinuousDuration, must be a value less than or equal to 43200.", new [] { "MaxContinuousDuration" });
            }

            // MaxContinuousDuration (int) minimum
            if (this.MaxContinuousDuration < (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxContinuousDuration, must be a value greater than or equal to 60.", new [] { "MaxContinuousDuration" });
            }

            yield break;
        }
    }

}
