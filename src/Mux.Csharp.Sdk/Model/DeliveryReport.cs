/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// DeliveryReport
    /// </summary>
    [DataContract(Name = "DeliveryReport")]
    public partial class DeliveryReport : IEquatable<DeliveryReport>, IValidatableObject
    {
        /// <summary>
        /// The state of the asset.
        /// </summary>
        /// <value>The state of the asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetStateEnum
        {
            /// <summary>
            /// Enum Ready for value: ready
            /// </summary>
            [EnumMember(Value = "ready")]
            Ready = 1,

            /// <summary>
            /// Enum Errored for value: errored
            /// </summary>
            [EnumMember(Value = "errored")]
            Errored = 2,

            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            [EnumMember(Value = "deleted")]
            Deleted = 3

        }


        /// <summary>
        /// The state of the asset.
        /// </summary>
        /// <value>The state of the asset.</value>
        [DataMember(Name = "asset_state", EmitDefaultValue = false)]
        public AssetStateEnum? AssetState { get; set; }
        /// <summary>
        /// The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage
        /// </summary>
        /// <value>The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetResolutionTierEnum
        {
            /// <summary>
            /// Enum AudioOnly for value: audio-only
            /// </summary>
            [EnumMember(Value = "audio-only")]
            AudioOnly = 1,

            /// <summary>
            /// Enum _720p for value: 720p
            /// </summary>
            [EnumMember(Value = "720p")]
            _720p = 2,

            /// <summary>
            /// Enum _1080p for value: 1080p
            /// </summary>
            [EnumMember(Value = "1080p")]
            _1080p = 3,

            /// <summary>
            /// Enum _1440p for value: 1440p
            /// </summary>
            [EnumMember(Value = "1440p")]
            _1440p = 4,

            /// <summary>
            /// Enum _2160p for value: 2160p
            /// </summary>
            [EnumMember(Value = "2160p")]
            _2160p = 5

        }


        /// <summary>
        /// The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage
        /// </summary>
        /// <value>The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage</value>
        [DataMember(Name = "asset_resolution_tier", EmitDefaultValue = false)]
        public AssetResolutionTierEnum? AssetResolutionTier { get; set; }
        /// <summary>
        /// This field is deprecated. Please use &#x60;asset_video_quality&#x60; instead. The encoding tier that the asset was ingested at. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;asset_video_quality&#x60; instead. The encoding tier that the asset was ingested at. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetEncodingTierEnum
        {
            /// <summary>
            /// Enum Smart for value: smart
            /// </summary>
            [EnumMember(Value = "smart")]
            Smart = 1,

            /// <summary>
            /// Enum Baseline for value: baseline
            /// </summary>
            [EnumMember(Value = "baseline")]
            Baseline = 2

        }


        /// <summary>
        /// This field is deprecated. Please use &#x60;asset_video_quality&#x60; instead. The encoding tier that the asset was ingested at. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;asset_video_quality&#x60; instead. The encoding tier that the asset was ingested at. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [DataMember(Name = "asset_encoding_tier", EmitDefaultValue = false)]
        [Obsolete]
        public AssetEncodingTierEnum? AssetEncodingTier { get; set; }
        /// <summary>
        /// The video quality that the asset was ingested at. This field replaces &#x60;asset_encoding_tier&#x60;. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>The video quality that the asset was ingested at. This field replaces &#x60;asset_encoding_tier&#x60;. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetVideoQualityEnum
        {
            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 1,

            /// <summary>
            /// Enum Plus for value: plus
            /// </summary>
            [EnumMember(Value = "plus")]
            Plus = 2

        }


        /// <summary>
        /// The video quality that the asset was ingested at. This field replaces &#x60;asset_encoding_tier&#x60;. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>The video quality that the asset was ingested at. This field replaces &#x60;asset_encoding_tier&#x60;. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [DataMember(Name = "asset_video_quality", EmitDefaultValue = false)]
        public AssetVideoQualityEnum? AssetVideoQuality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryReport" /> class.
        /// </summary>
        /// <param name="liveStreamId">Unique identifier for the live stream that created the asset..</param>
        /// <param name="assetId">Unique identifier for the asset..</param>
        /// <param name="passthrough">The &#x60;passthrough&#x60; value for the asset..</param>
        /// <param name="createdAt">Time at which the asset was created. Measured in seconds since the Unix epoch..</param>
        /// <param name="deletedAt">If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch..</param>
        /// <param name="assetState">The state of the asset..</param>
        /// <param name="assetDuration">The duration of the asset in seconds..</param>
        /// <param name="assetResolutionTier">The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage.</param>
        /// <param name="assetEncodingTier">This field is deprecated. Please use &#x60;asset_video_quality&#x60; instead. The encoding tier that the asset was ingested at. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers).</param>
        /// <param name="assetVideoQuality">The video quality that the asset was ingested at. This field replaces &#x60;asset_encoding_tier&#x60;. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers).</param>
        /// <param name="deliveredSeconds">Total number of delivered seconds during this time window..</param>
        /// <param name="deliveredSecondsByResolution">deliveredSecondsByResolution.</param>
        public DeliveryReport(string liveStreamId = default(string), string assetId = default(string), string passthrough = default(string), string createdAt = default(string), string deletedAt = default(string), AssetStateEnum? assetState = default(AssetStateEnum?), double assetDuration = default(double), AssetResolutionTierEnum? assetResolutionTier = default(AssetResolutionTierEnum?), AssetEncodingTierEnum? assetEncodingTier = default(AssetEncodingTierEnum?), AssetVideoQualityEnum? assetVideoQuality = default(AssetVideoQualityEnum?), double deliveredSeconds = default(double), DeliveryReportDeliveredSecondsByResolution deliveredSecondsByResolution = default(DeliveryReportDeliveredSecondsByResolution))
        {
            this.LiveStreamId = liveStreamId;
            this.AssetId = assetId;
            this.Passthrough = passthrough;
            this.CreatedAt = createdAt;
            this.DeletedAt = deletedAt;
            this.AssetState = assetState;
            this.AssetDuration = assetDuration;
            this.AssetResolutionTier = assetResolutionTier;
            this.AssetEncodingTier = assetEncodingTier;
            this.AssetVideoQuality = assetVideoQuality;
            this.DeliveredSeconds = deliveredSeconds;
            this.DeliveredSecondsByResolution = deliveredSecondsByResolution;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the live stream that created the asset.
        /// </summary>
        /// <value>Unique identifier for the live stream that created the asset.</value>
        [DataMember(Name = "live_stream_id", EmitDefaultValue = false)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Unique identifier for the asset.
        /// </summary>
        /// <value>Unique identifier for the asset.</value>
        [DataMember(Name = "asset_id", EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// The &#x60;passthrough&#x60; value for the asset.
        /// </summary>
        /// <value>The &#x60;passthrough&#x60; value for the asset.</value>
        [DataMember(Name = "passthrough", EmitDefaultValue = false)]
        public string Passthrough { get; set; }

        /// <summary>
        /// Time at which the asset was created. Measured in seconds since the Unix epoch.
        /// </summary>
        /// <value>Time at which the asset was created. Measured in seconds since the Unix epoch.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch.
        /// </summary>
        /// <value>If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch.</value>
        [DataMember(Name = "deleted_at", EmitDefaultValue = false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// The duration of the asset in seconds.
        /// </summary>
        /// <value>The duration of the asset in seconds.</value>
        [DataMember(Name = "asset_duration", EmitDefaultValue = false)]
        public double AssetDuration { get; set; }

        /// <summary>
        /// Total number of delivered seconds during this time window.
        /// </summary>
        /// <value>Total number of delivered seconds during this time window.</value>
        [DataMember(Name = "delivered_seconds", EmitDefaultValue = false)]
        public double DeliveredSeconds { get; set; }

        /// <summary>
        /// Gets or Sets DeliveredSecondsByResolution
        /// </summary>
        [DataMember(Name = "delivered_seconds_by_resolution", EmitDefaultValue = false)]
        public DeliveryReportDeliveredSecondsByResolution DeliveredSecondsByResolution { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryReport {\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Passthrough: ").Append(Passthrough).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  AssetState: ").Append(AssetState).Append("\n");
            sb.Append("  AssetDuration: ").Append(AssetDuration).Append("\n");
            sb.Append("  AssetResolutionTier: ").Append(AssetResolutionTier).Append("\n");
            sb.Append("  AssetEncodingTier: ").Append(AssetEncodingTier).Append("\n");
            sb.Append("  AssetVideoQuality: ").Append(AssetVideoQuality).Append("\n");
            sb.Append("  DeliveredSeconds: ").Append(DeliveredSeconds).Append("\n");
            sb.Append("  DeliveredSecondsByResolution: ").Append(DeliveredSecondsByResolution).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryReport);
        }

        /// <summary>
        /// Returns true if DeliveryReport instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LiveStreamId == input.LiveStreamId ||
                    (this.LiveStreamId != null &&
                    this.LiveStreamId.Equals(input.LiveStreamId))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.Passthrough == input.Passthrough ||
                    (this.Passthrough != null &&
                    this.Passthrough.Equals(input.Passthrough))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                ) && 
                (
                    this.AssetState == input.AssetState ||
                    this.AssetState.Equals(input.AssetState)
                ) && 
                (
                    this.AssetDuration == input.AssetDuration ||
                    this.AssetDuration.Equals(input.AssetDuration)
                ) && 
                (
                    this.AssetResolutionTier == input.AssetResolutionTier ||
                    this.AssetResolutionTier.Equals(input.AssetResolutionTier)
                ) && 
                (
                    this.AssetEncodingTier == input.AssetEncodingTier ||
                    this.AssetEncodingTier.Equals(input.AssetEncodingTier)
                ) && 
                (
                    this.AssetVideoQuality == input.AssetVideoQuality ||
                    this.AssetVideoQuality.Equals(input.AssetVideoQuality)
                ) && 
                (
                    this.DeliveredSeconds == input.DeliveredSeconds ||
                    this.DeliveredSeconds.Equals(input.DeliveredSeconds)
                ) && 
                (
                    this.DeliveredSecondsByResolution == input.DeliveredSecondsByResolution ||
                    (this.DeliveredSecondsByResolution != null &&
                    this.DeliveredSecondsByResolution.Equals(input.DeliveredSecondsByResolution))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LiveStreamId != null)
                {
                    hashCode = (hashCode * 59) + this.LiveStreamId.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.Passthrough != null)
                {
                    hashCode = (hashCode * 59) + this.Passthrough.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.DeletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AssetState.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetDuration.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetResolutionTier.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetEncodingTier.GetHashCode();
                hashCode = (hashCode * 59) + this.AssetVideoQuality.GetHashCode();
                hashCode = (hashCode * 59) + this.DeliveredSeconds.GetHashCode();
                if (this.DeliveredSecondsByResolution != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveredSecondsByResolution.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
