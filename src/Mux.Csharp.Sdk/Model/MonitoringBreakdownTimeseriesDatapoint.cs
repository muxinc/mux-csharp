/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// MonitoringBreakdownTimeseriesDatapoint
    /// </summary>
    [DataContract(Name = "MonitoringBreakdownTimeseriesDatapoint")]
    public partial class MonitoringBreakdownTimeseriesDatapoint : IEquatable<MonitoringBreakdownTimeseriesDatapoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringBreakdownTimeseriesDatapoint" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="metricValue">metricValue.</param>
        /// <param name="concurrentViewers">concurrentViewers.</param>
        /// <param name="startingUpViewers">startingUpViewers.</param>
        public MonitoringBreakdownTimeseriesDatapoint(string value = default(string), double? metricValue = default(double?), long concurrentViewers = default(long), long startingUpViewers = default(long))
        {
            this.Value = value;
            this.MetricValue = metricValue;
            this.ConcurrentViewers = concurrentViewers;
            this.StartingUpViewers = startingUpViewers;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets MetricValue
        /// </summary>
        [DataMember(Name = "metric_value", EmitDefaultValue = true)]
        public double? MetricValue { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrentViewers
        /// </summary>
        [DataMember(Name = "concurrent_viewers", EmitDefaultValue = false)]
        public long ConcurrentViewers { get; set; }

        /// <summary>
        /// Gets or Sets StartingUpViewers
        /// </summary>
        [DataMember(Name = "starting_up_viewers", EmitDefaultValue = false)]
        public long StartingUpViewers { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonitoringBreakdownTimeseriesDatapoint {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  MetricValue: ").Append(MetricValue).Append("\n");
            sb.Append("  ConcurrentViewers: ").Append(ConcurrentViewers).Append("\n");
            sb.Append("  StartingUpViewers: ").Append(StartingUpViewers).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitoringBreakdownTimeseriesDatapoint);
        }

        /// <summary>
        /// Returns true if MonitoringBreakdownTimeseriesDatapoint instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitoringBreakdownTimeseriesDatapoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitoringBreakdownTimeseriesDatapoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.MetricValue == input.MetricValue ||
                    (this.MetricValue != null &&
                    this.MetricValue.Equals(input.MetricValue))
                ) && 
                (
                    this.ConcurrentViewers == input.ConcurrentViewers ||
                    this.ConcurrentViewers.Equals(input.ConcurrentViewers)
                ) && 
                (
                    this.StartingUpViewers == input.StartingUpViewers ||
                    this.StartingUpViewers.Equals(input.StartingUpViewers)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.MetricValue != null)
                {
                    hashCode = (hashCode * 59) + this.MetricValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConcurrentViewers.GetHashCode();
                hashCode = (hashCode * 59) + this.StartingUpViewers.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
