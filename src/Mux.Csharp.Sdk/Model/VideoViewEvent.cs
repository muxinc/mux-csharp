/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// VideoViewEvent
    /// </summary>
    [DataContract(Name = "VideoViewEvent")]
    public partial class VideoViewEvent : IEquatable<VideoViewEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoViewEvent" /> class.
        /// </summary>
        /// <param name="viewerTime">viewerTime.</param>
        /// <param name="playbackTime">playbackTime.</param>
        /// <param name="name">name.</param>
        /// <param name="eventTime">eventTime.</param>
        /// <param name="details">details.</param>
        public VideoViewEvent(long viewerTime = default(long), long playbackTime = default(long), string name = default(string), long eventTime = default(long), Dictionary<string, Object> details = default(Dictionary<string, Object>))
        {
            this.ViewerTime = viewerTime;
            this.PlaybackTime = playbackTime;
            this.Name = name;
            this.EventTime = eventTime;
            this.Details = details;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ViewerTime
        /// </summary>
        [DataMember(Name = "viewer_time", EmitDefaultValue = false)]
        public long ViewerTime { get; set; }

        /// <summary>
        /// Gets or Sets PlaybackTime
        /// </summary>
        [DataMember(Name = "playback_time", EmitDefaultValue = false)]
        public long PlaybackTime { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets EventTime
        /// </summary>
        [DataMember(Name = "event_time", EmitDefaultValue = false)]
        public long EventTime { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Dictionary<string, Object> Details { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoViewEvent {\n");
            sb.Append("  ViewerTime: ").Append(ViewerTime).Append("\n");
            sb.Append("  PlaybackTime: ").Append(PlaybackTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoViewEvent);
        }

        /// <summary>
        /// Returns true if VideoViewEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoViewEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoViewEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ViewerTime == input.ViewerTime ||
                    this.ViewerTime.Equals(input.ViewerTime)
                ) && 
                (
                    this.PlaybackTime == input.PlaybackTime ||
                    this.PlaybackTime.Equals(input.PlaybackTime)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EventTime == input.EventTime ||
                    this.EventTime.Equals(input.EventTime)
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ViewerTime.GetHashCode();
                hashCode = (hashCode * 59) + this.PlaybackTime.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EventTime.GetHashCode();
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
