/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// Score
    /// </summary>
    [DataContract(Name = "Score")]
    public partial class Score : IEquatable<Score>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Score" /> class.
        /// </summary>
        /// <param name="watchTime">watchTime.</param>
        /// <param name="viewCount">viewCount.</param>
        /// <param name="uniqueViewers">uniqueViewers.</param>
        /// <param name="startedViews">startedViews.</param>
        /// <param name="totalPlayingTime">totalPlayingTime.</param>
        /// <param name="name">name.</param>
        /// <param name="endedViews">endedViews.</param>
        /// <param name="value">value.</param>
        /// <param name="type">type.</param>
        /// <param name="metric">metric.</param>
        /// <param name="items">items.</param>
        public Score(long? watchTime = default(long?), long viewCount = default(long), long uniqueViewers = default(long), long startedViews = default(long), long? totalPlayingTime = default(long?), string name = default(string), long endedViews = default(long), double value = default(double), string type = default(string), string metric = default(string), List<Metric> items = default(List<Metric>))
        {
            this.WatchTime = watchTime;
            this.ViewCount = viewCount;
            this.UniqueViewers = uniqueViewers;
            this.StartedViews = startedViews;
            this.TotalPlayingTime = totalPlayingTime;
            this.Name = name;
            this.EndedViews = endedViews;
            this.Value = value;
            this.Type = type;
            this.Metric = metric;
            this.Items = items;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets WatchTime
        /// </summary>
        [DataMember(Name = "watch_time", EmitDefaultValue = true)]
        public long? WatchTime { get; set; }

        /// <summary>
        /// Gets or Sets ViewCount
        /// </summary>
        [DataMember(Name = "view_count", EmitDefaultValue = false)]
        public long ViewCount { get; set; }

        /// <summary>
        /// Gets or Sets UniqueViewers
        /// </summary>
        [DataMember(Name = "unique_viewers", EmitDefaultValue = false)]
        public long UniqueViewers { get; set; }

        /// <summary>
        /// Gets or Sets StartedViews
        /// </summary>
        [DataMember(Name = "started_views", EmitDefaultValue = false)]
        public long StartedViews { get; set; }

        /// <summary>
        /// Gets or Sets TotalPlayingTime
        /// </summary>
        [DataMember(Name = "total_playing_time", EmitDefaultValue = true)]
        public long? TotalPlayingTime { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets EndedViews
        /// </summary>
        [DataMember(Name = "ended_views", EmitDefaultValue = false)]
        public long EndedViews { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Metric
        /// </summary>
        [DataMember(Name = "metric", EmitDefaultValue = false)]
        public string Metric { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<Metric> Items { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Score {\n");
            sb.Append("  WatchTime: ").Append(WatchTime).Append("\n");
            sb.Append("  ViewCount: ").Append(ViewCount).Append("\n");
            sb.Append("  UniqueViewers: ").Append(UniqueViewers).Append("\n");
            sb.Append("  StartedViews: ").Append(StartedViews).Append("\n");
            sb.Append("  TotalPlayingTime: ").Append(TotalPlayingTime).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EndedViews: ").Append(EndedViews).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Score);
        }

        /// <summary>
        /// Returns true if Score instances are equal
        /// </summary>
        /// <param name="input">Instance of Score to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Score input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WatchTime == input.WatchTime ||
                    (this.WatchTime != null &&
                    this.WatchTime.Equals(input.WatchTime))
                ) && 
                (
                    this.ViewCount == input.ViewCount ||
                    this.ViewCount.Equals(input.ViewCount)
                ) && 
                (
                    this.UniqueViewers == input.UniqueViewers ||
                    this.UniqueViewers.Equals(input.UniqueViewers)
                ) && 
                (
                    this.StartedViews == input.StartedViews ||
                    this.StartedViews.Equals(input.StartedViews)
                ) && 
                (
                    this.TotalPlayingTime == input.TotalPlayingTime ||
                    (this.TotalPlayingTime != null &&
                    this.TotalPlayingTime.Equals(input.TotalPlayingTime))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EndedViews == input.EndedViews ||
                    this.EndedViews.Equals(input.EndedViews)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Metric == input.Metric ||
                    (this.Metric != null &&
                    this.Metric.Equals(input.Metric))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WatchTime != null)
                {
                    hashCode = (hashCode * 59) + this.WatchTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ViewCount.GetHashCode();
                hashCode = (hashCode * 59) + this.UniqueViewers.GetHashCode();
                hashCode = (hashCode * 59) + this.StartedViews.GetHashCode();
                if (this.TotalPlayingTime != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPlayingTime.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EndedViews.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Metric != null)
                {
                    hashCode = (hashCode * 59) + this.Metric.GetHashCode();
                }
                if (this.Items != null)
                {
                    hashCode = (hashCode * 59) + this.Items.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
