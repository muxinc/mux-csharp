/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// VideoView
    /// </summary>
    [DataContract(Name = "VideoView")]
    public partial class VideoView : IEquatable<VideoView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoView" /> class.
        /// </summary>
        /// <param name="viewTotalUpscaling">viewTotalUpscaling.</param>
        /// <param name="prerollAdAssetHostname">prerollAdAssetHostname.</param>
        /// <param name="playerSourceDomain">playerSourceDomain.</param>
        /// <param name="region">region.</param>
        /// <param name="viewerUserAgent">viewerUserAgent.</param>
        /// <param name="prerollRequested">prerollRequested.</param>
        /// <param name="pageType">pageType.</param>
        /// <param name="startupScore">startupScore.</param>
        /// <param name="viewSeekDuration">viewSeekDuration.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="playerSourceHeight">playerSourceHeight.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="bufferingCount">bufferingCount.</param>
        /// <param name="videoDuration">videoDuration.</param>
        /// <param name="playerSourceType">playerSourceType.</param>
        /// <param name="city">city.</param>
        /// <param name="viewId">viewId.</param>
        /// <param name="platformDescription">platformDescription.</param>
        /// <param name="videoStartupPrerollRequestTime">videoStartupPrerollRequestTime.</param>
        /// <param name="viewerDeviceName">viewerDeviceName.</param>
        /// <param name="videoSeries">videoSeries.</param>
        /// <param name="viewerApplicationName">viewerApplicationName.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="viewTotalContentPlaybackTime">viewTotalContentPlaybackTime.</param>
        /// <param name="cdn">cdn.</param>
        /// <param name="playerInstanceId">playerInstanceId.</param>
        /// <param name="videoLanguage">videoLanguage.</param>
        /// <param name="playerSourceWidth">playerSourceWidth.</param>
        /// <param name="playerErrorMessage">playerErrorMessage.</param>
        /// <param name="playerMuxPluginVersion">playerMuxPluginVersion.</param>
        /// <param name="watched">watched.</param>
        /// <param name="playbackScore">playbackScore.</param>
        /// <param name="pageUrl">pageUrl.</param>
        /// <param name="metro">metro.</param>
        /// <param name="viewMaxRequestLatency">viewMaxRequestLatency.</param>
        /// <param name="requestsForFirstPreroll">requestsForFirstPreroll.</param>
        /// <param name="viewTotalDownscaling">viewTotalDownscaling.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="playerSourceHostName">playerSourceHostName.</param>
        /// <param name="insertedAt">insertedAt.</param>
        /// <param name="viewEnd">viewEnd.</param>
        /// <param name="muxEmbedVersion">muxEmbedVersion.</param>
        /// <param name="playerLanguage">playerLanguage.</param>
        /// <param name="pageLoadTime">pageLoadTime.</param>
        /// <param name="viewerDeviceCategory">viewerDeviceCategory.</param>
        /// <param name="videoStartupPrerollLoadTime">videoStartupPrerollLoadTime.</param>
        /// <param name="playerVersion">playerVersion.</param>
        /// <param name="watchTime">watchTime.</param>
        /// <param name="playerSourceStreamType">playerSourceStreamType.</param>
        /// <param name="prerollAdTagHostname">prerollAdTagHostname.</param>
        /// <param name="viewerDeviceManufacturer">viewerDeviceManufacturer.</param>
        /// <param name="rebufferingScore">rebufferingScore.</param>
        /// <param name="experimentName">experimentName.</param>
        /// <param name="viewerOsVersion">viewerOsVersion.</param>
        /// <param name="playerPreload">playerPreload.</param>
        /// <param name="bufferingDuration">bufferingDuration.</param>
        /// <param name="playerViewCount">playerViewCount.</param>
        /// <param name="playerSoftware">playerSoftware.</param>
        /// <param name="playerLoadTime">playerLoadTime.</param>
        /// <param name="platformSummary">platformSummary.</param>
        /// <param name="videoEncodingVariant">videoEncodingVariant.</param>
        /// <param name="playerWidth">playerWidth.</param>
        /// <param name="viewSeekCount">viewSeekCount.</param>
        /// <param name="viewerExperienceScore">viewerExperienceScore.</param>
        /// <param name="viewErrorId">viewErrorId.</param>
        /// <param name="videoVariantName">videoVariantName.</param>
        /// <param name="prerollPlayed">prerollPlayed.</param>
        /// <param name="viewerApplicationEngine">viewerApplicationEngine.</param>
        /// <param name="viewerOsArchitecture">viewerOsArchitecture.</param>
        /// <param name="playerErrorCode">playerErrorCode.</param>
        /// <param name="bufferingRate">bufferingRate.</param>
        /// <param name="events">events.</param>
        /// <param name="playerName">playerName.</param>
        /// <param name="viewStart">viewStart.</param>
        /// <param name="viewAverageRequestThroughput">viewAverageRequestThroughput.</param>
        /// <param name="videoProducer">videoProducer.</param>
        /// <param name="errorTypeId">errorTypeId.</param>
        /// <param name="muxViewerId">muxViewerId.</param>
        /// <param name="videoId">videoId.</param>
        /// <param name="continentCode">continentCode.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="exitBeforeVideoStart">exitBeforeVideoStart.</param>
        /// <param name="videoContentType">videoContentType.</param>
        /// <param name="viewerOsFamily">viewerOsFamily.</param>
        /// <param name="playerPoster">playerPoster.</param>
        /// <param name="viewAverageRequestLatency">viewAverageRequestLatency.</param>
        /// <param name="videoVariantId">videoVariantId.</param>
        /// <param name="playerSourceDuration">playerSourceDuration.</param>
        /// <param name="playerSourceUrl">playerSourceUrl.</param>
        /// <param name="muxApiVersion">muxApiVersion.</param>
        /// <param name="videoTitle">videoTitle.</param>
        /// <param name="id">id.</param>
        /// <param name="shortTime">shortTime.</param>
        /// <param name="rebufferPercentage">rebufferPercentage.</param>
        /// <param name="timeToFirstFrame">timeToFirstFrame.</param>
        /// <param name="viewerUserId">viewerUserId.</param>
        /// <param name="videoStreamType">videoStreamType.</param>
        /// <param name="playerStartupTime">playerStartupTime.</param>
        /// <param name="viewerApplicationVersion">viewerApplicationVersion.</param>
        /// <param name="viewMaxDownscalePercentage">viewMaxDownscalePercentage.</param>
        /// <param name="viewMaxUpscalePercentage">viewMaxUpscalePercentage.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="usedFullscreen">usedFullscreen.</param>
        /// <param name="isp">isp.</param>
        /// <param name="propertyId">propertyId.</param>
        /// <param name="playerAutoplay">playerAutoplay.</param>
        /// <param name="playerHeight">playerHeight.</param>
        /// <param name="asn">asn.</param>
        /// <param name="asnName">asnName.</param>
        /// <param name="qualityScore">qualityScore.</param>
        /// <param name="playerSoftwareVersion">playerSoftwareVersion.</param>
        /// <param name="playerMuxPluginName">playerMuxPluginName.</param>
        /// <param name="subPropertyId">subPropertyId.</param>
        /// <param name="playerRemotePlayed">playerRemotePlayed.</param>
        /// <param name="viewMaxPlayheadPosition">viewMaxPlayheadPosition.</param>
        /// <param name="viewPlayingTime">viewPlayingTime.</param>
        /// <param name="viewSessionId">viewSessionId.</param>
        /// <param name="viewerConnectionType">viewerConnectionType.</param>
        /// <param name="viewerDeviceModel">viewerDeviceModel.</param>
        /// <param name="weightedAverageBitrate">weightedAverageBitrate.</param>
        /// <param name="custom1">custom1.</param>
        /// <param name="custom2">custom2.</param>
        /// <param name="custom3">custom3.</param>
        /// <param name="custom4">custom4.</param>
        /// <param name="custom5">custom5.</param>
        /// <param name="custom6">custom6.</param>
        /// <param name="custom7">custom7.</param>
        /// <param name="custom8">custom8.</param>
        /// <param name="custom9">custom9.</param>
        /// <param name="custom10">custom10.</param>
        /// <param name="liveStreamLatency">liveStreamLatency.</param>
        /// <param name="assetId">assetId.</param>
        /// <param name="environmentId">environmentId.</param>
        /// <param name="liveStreamId">liveStreamId.</param>
        /// <param name="muxEmbed">muxEmbed.</param>
        /// <param name="playbackId">playbackId.</param>
        /// <param name="playerErrorContext">playerErrorContext.</param>
        /// <param name="viewDrmType">viewDrmType.</param>
        /// <param name="viewDroppedFrameCount">viewDroppedFrameCount.</param>
        /// <param name="viewHasAd">viewHasAd.</param>
        /// <param name="videoStartupFailure">videoStartupFailure.</param>
        /// <param name="adAttemptCount">adAttemptCount.</param>
        /// <param name="adBreakCount">adBreakCount.</param>
        /// <param name="adBreakErrorCount">adBreakErrorCount.</param>
        /// <param name="adBreakErrorPercentage">adBreakErrorPercentage.</param>
        /// <param name="adErrorCount">adErrorCount.</param>
        /// <param name="adErrorPercentage">adErrorPercentage.</param>
        /// <param name="adImpressionCount">adImpressionCount.</param>
        /// <param name="adStartupErrorCount">adStartupErrorCount.</param>
        /// <param name="adStartupErrorPercentage">adStartupErrorPercentage.</param>
        /// <param name="adExitBeforeStartCount">adExitBeforeStartCount.</param>
        /// <param name="adExitBeforeStartPercentage">adExitBeforeStartPercentage.</param>
        /// <param name="longResume">longResume.</param>
        /// <param name="longRebuffering">longRebuffering.</param>
        public VideoView(string viewTotalUpscaling = default(string), string prerollAdAssetHostname = default(string), string playerSourceDomain = default(string), string region = default(string), string viewerUserAgent = default(string), bool? prerollRequested = default(bool?), string pageType = default(string), string startupScore = default(string), long? viewSeekDuration = default(long?), string countryName = default(string), int? playerSourceHeight = default(int?), string longitude = default(string), long? bufferingCount = default(long?), long? videoDuration = default(long?), string playerSourceType = default(string), string city = default(string), string viewId = default(string), string platformDescription = default(string), long? videoStartupPrerollRequestTime = default(long?), string viewerDeviceName = default(string), string videoSeries = default(string), string viewerApplicationName = default(string), string updatedAt = default(string), long? viewTotalContentPlaybackTime = default(long?), string cdn = default(string), string playerInstanceId = default(string), string videoLanguage = default(string), int? playerSourceWidth = default(int?), string playerErrorMessage = default(string), string playerMuxPluginVersion = default(string), bool watched = default(bool), string playbackScore = default(string), string pageUrl = default(string), string metro = default(string), long? viewMaxRequestLatency = default(long?), long? requestsForFirstPreroll = default(long?), string viewTotalDownscaling = default(string), string latitude = default(string), string playerSourceHostName = default(string), string insertedAt = default(string), string viewEnd = default(string), string muxEmbedVersion = default(string), string playerLanguage = default(string), long? pageLoadTime = default(long?), string viewerDeviceCategory = default(string), long? videoStartupPrerollLoadTime = default(long?), string playerVersion = default(string), long? watchTime = default(long?), string playerSourceStreamType = default(string), string prerollAdTagHostname = default(string), string viewerDeviceManufacturer = default(string), string rebufferingScore = default(string), string experimentName = default(string), string viewerOsVersion = default(string), bool playerPreload = default(bool), long? bufferingDuration = default(long?), long? playerViewCount = default(long?), string playerSoftware = default(string), long? playerLoadTime = default(long?), string platformSummary = default(string), string videoEncodingVariant = default(string), int? playerWidth = default(int?), long? viewSeekCount = default(long?), string viewerExperienceScore = default(string), int? viewErrorId = default(int?), string videoVariantName = default(string), bool? prerollPlayed = default(bool?), string viewerApplicationEngine = default(string), string viewerOsArchitecture = default(string), string playerErrorCode = default(string), string bufferingRate = default(string), List<VideoViewEvent> events = default(List<VideoViewEvent>), string playerName = default(string), string viewStart = default(string), long? viewAverageRequestThroughput = default(long?), string videoProducer = default(string), int? errorTypeId = default(int?), string muxViewerId = default(string), string videoId = default(string), string continentCode = default(string), string sessionId = default(string), bool exitBeforeVideoStart = default(bool), string videoContentType = default(string), string viewerOsFamily = default(string), string playerPoster = default(string), long? viewAverageRequestLatency = default(long?), string videoVariantId = default(string), long? playerSourceDuration = default(long?), string playerSourceUrl = default(string), string muxApiVersion = default(string), string videoTitle = default(string), string id = default(string), string shortTime = default(string), string rebufferPercentage = default(string), long? timeToFirstFrame = default(long?), string viewerUserId = default(string), string videoStreamType = default(string), long? playerStartupTime = default(long?), string viewerApplicationVersion = default(string), string viewMaxDownscalePercentage = default(string), string viewMaxUpscalePercentage = default(string), string countryCode = default(string), bool usedFullscreen = default(bool), string isp = default(string), long propertyId = default(long), bool playerAutoplay = default(bool), int? playerHeight = default(int?), long? asn = default(long?), string asnName = default(string), string qualityScore = default(string), string playerSoftwareVersion = default(string), string playerMuxPluginName = default(string), string subPropertyId = default(string), bool? playerRemotePlayed = default(bool?), string viewMaxPlayheadPosition = default(string), string viewPlayingTime = default(string), string viewSessionId = default(string), string viewerConnectionType = default(string), string viewerDeviceModel = default(string), double? weightedAverageBitrate = default(double?), string custom1 = default(string), string custom2 = default(string), string custom3 = default(string), string custom4 = default(string), string custom5 = default(string), string custom6 = default(string), string custom7 = default(string), string custom8 = default(string), string custom9 = default(string), string custom10 = default(string), long? liveStreamLatency = default(long?), string assetId = default(string), string environmentId = default(string), string liveStreamId = default(string), string muxEmbed = default(string), string playbackId = default(string), string playerErrorContext = default(string), string viewDrmType = default(string), long? viewDroppedFrameCount = default(long?), bool viewHasAd = default(bool), bool videoStartupFailure = default(bool), int? adAttemptCount = default(int?), int? adBreakCount = default(int?), int? adBreakErrorCount = default(int?), string adBreakErrorPercentage = default(string), int? adErrorCount = default(int?), string adErrorPercentage = default(string), int? adImpressionCount = default(int?), int? adStartupErrorCount = default(int?), string adStartupErrorPercentage = default(string), int? adExitBeforeStartCount = default(int?), string adExitBeforeStartPercentage = default(string), bool longResume = default(bool), bool longRebuffering = default(bool))
        {
            this.ViewTotalUpscaling = viewTotalUpscaling;
            this.PrerollAdAssetHostname = prerollAdAssetHostname;
            this.PlayerSourceDomain = playerSourceDomain;
            this.Region = region;
            this.ViewerUserAgent = viewerUserAgent;
            this.PrerollRequested = prerollRequested;
            this.PageType = pageType;
            this.StartupScore = startupScore;
            this.ViewSeekDuration = viewSeekDuration;
            this.CountryName = countryName;
            this.PlayerSourceHeight = playerSourceHeight;
            this.Longitude = longitude;
            this.BufferingCount = bufferingCount;
            this.VideoDuration = videoDuration;
            this.PlayerSourceType = playerSourceType;
            this.City = city;
            this.ViewId = viewId;
            this.PlatformDescription = platformDescription;
            this.VideoStartupPrerollRequestTime = videoStartupPrerollRequestTime;
            this.ViewerDeviceName = viewerDeviceName;
            this.VideoSeries = videoSeries;
            this.ViewerApplicationName = viewerApplicationName;
            this.UpdatedAt = updatedAt;
            this.ViewTotalContentPlaybackTime = viewTotalContentPlaybackTime;
            this.Cdn = cdn;
            this.PlayerInstanceId = playerInstanceId;
            this.VideoLanguage = videoLanguage;
            this.PlayerSourceWidth = playerSourceWidth;
            this.PlayerErrorMessage = playerErrorMessage;
            this.PlayerMuxPluginVersion = playerMuxPluginVersion;
            this.Watched = watched;
            this.PlaybackScore = playbackScore;
            this.PageUrl = pageUrl;
            this.Metro = metro;
            this.ViewMaxRequestLatency = viewMaxRequestLatency;
            this.RequestsForFirstPreroll = requestsForFirstPreroll;
            this.ViewTotalDownscaling = viewTotalDownscaling;
            this.Latitude = latitude;
            this.PlayerSourceHostName = playerSourceHostName;
            this.InsertedAt = insertedAt;
            this.ViewEnd = viewEnd;
            this.MuxEmbedVersion = muxEmbedVersion;
            this.PlayerLanguage = playerLanguage;
            this.PageLoadTime = pageLoadTime;
            this.ViewerDeviceCategory = viewerDeviceCategory;
            this.VideoStartupPrerollLoadTime = videoStartupPrerollLoadTime;
            this.PlayerVersion = playerVersion;
            this.WatchTime = watchTime;
            this.PlayerSourceStreamType = playerSourceStreamType;
            this.PrerollAdTagHostname = prerollAdTagHostname;
            this.ViewerDeviceManufacturer = viewerDeviceManufacturer;
            this.RebufferingScore = rebufferingScore;
            this.ExperimentName = experimentName;
            this.ViewerOsVersion = viewerOsVersion;
            this.PlayerPreload = playerPreload;
            this.BufferingDuration = bufferingDuration;
            this.PlayerViewCount = playerViewCount;
            this.PlayerSoftware = playerSoftware;
            this.PlayerLoadTime = playerLoadTime;
            this.PlatformSummary = platformSummary;
            this.VideoEncodingVariant = videoEncodingVariant;
            this.PlayerWidth = playerWidth;
            this.ViewSeekCount = viewSeekCount;
            this.ViewerExperienceScore = viewerExperienceScore;
            this.ViewErrorId = viewErrorId;
            this.VideoVariantName = videoVariantName;
            this.PrerollPlayed = prerollPlayed;
            this.ViewerApplicationEngine = viewerApplicationEngine;
            this.ViewerOsArchitecture = viewerOsArchitecture;
            this.PlayerErrorCode = playerErrorCode;
            this.BufferingRate = bufferingRate;
            this.Events = events;
            this.PlayerName = playerName;
            this.ViewStart = viewStart;
            this.ViewAverageRequestThroughput = viewAverageRequestThroughput;
            this.VideoProducer = videoProducer;
            this.ErrorTypeId = errorTypeId;
            this.MuxViewerId = muxViewerId;
            this.VideoId = videoId;
            this.ContinentCode = continentCode;
            this.SessionId = sessionId;
            this.ExitBeforeVideoStart = exitBeforeVideoStart;
            this.VideoContentType = videoContentType;
            this.ViewerOsFamily = viewerOsFamily;
            this.PlayerPoster = playerPoster;
            this.ViewAverageRequestLatency = viewAverageRequestLatency;
            this.VideoVariantId = videoVariantId;
            this.PlayerSourceDuration = playerSourceDuration;
            this.PlayerSourceUrl = playerSourceUrl;
            this.MuxApiVersion = muxApiVersion;
            this.VideoTitle = videoTitle;
            this.Id = id;
            this.ShortTime = shortTime;
            this.RebufferPercentage = rebufferPercentage;
            this.TimeToFirstFrame = timeToFirstFrame;
            this.ViewerUserId = viewerUserId;
            this.VideoStreamType = videoStreamType;
            this.PlayerStartupTime = playerStartupTime;
            this.ViewerApplicationVersion = viewerApplicationVersion;
            this.ViewMaxDownscalePercentage = viewMaxDownscalePercentage;
            this.ViewMaxUpscalePercentage = viewMaxUpscalePercentage;
            this.CountryCode = countryCode;
            this.UsedFullscreen = usedFullscreen;
            this.Isp = isp;
            this.PropertyId = propertyId;
            this.PlayerAutoplay = playerAutoplay;
            this.PlayerHeight = playerHeight;
            this.Asn = asn;
            this.AsnName = asnName;
            this.QualityScore = qualityScore;
            this.PlayerSoftwareVersion = playerSoftwareVersion;
            this.PlayerMuxPluginName = playerMuxPluginName;
            this.SubPropertyId = subPropertyId;
            this.PlayerRemotePlayed = playerRemotePlayed;
            this.ViewMaxPlayheadPosition = viewMaxPlayheadPosition;
            this.ViewPlayingTime = viewPlayingTime;
            this.ViewSessionId = viewSessionId;
            this.ViewerConnectionType = viewerConnectionType;
            this.ViewerDeviceModel = viewerDeviceModel;
            this.WeightedAverageBitrate = weightedAverageBitrate;
            this.Custom1 = custom1;
            this.Custom2 = custom2;
            this.Custom3 = custom3;
            this.Custom4 = custom4;
            this.Custom5 = custom5;
            this.Custom6 = custom6;
            this.Custom7 = custom7;
            this.Custom8 = custom8;
            this.Custom9 = custom9;
            this.Custom10 = custom10;
            this.LiveStreamLatency = liveStreamLatency;
            this.AssetId = assetId;
            this.EnvironmentId = environmentId;
            this.LiveStreamId = liveStreamId;
            this.MuxEmbed = muxEmbed;
            this.PlaybackId = playbackId;
            this.PlayerErrorContext = playerErrorContext;
            this.ViewDrmType = viewDrmType;
            this.ViewDroppedFrameCount = viewDroppedFrameCount;
            this.ViewHasAd = viewHasAd;
            this.VideoStartupFailure = videoStartupFailure;
            this.AdAttemptCount = adAttemptCount;
            this.AdBreakCount = adBreakCount;
            this.AdBreakErrorCount = adBreakErrorCount;
            this.AdBreakErrorPercentage = adBreakErrorPercentage;
            this.AdErrorCount = adErrorCount;
            this.AdErrorPercentage = adErrorPercentage;
            this.AdImpressionCount = adImpressionCount;
            this.AdStartupErrorCount = adStartupErrorCount;
            this.AdStartupErrorPercentage = adStartupErrorPercentage;
            this.AdExitBeforeStartCount = adExitBeforeStartCount;
            this.AdExitBeforeStartPercentage = adExitBeforeStartPercentage;
            this.LongResume = longResume;
            this.LongRebuffering = longRebuffering;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets ViewTotalUpscaling
        /// </summary>
        [DataMember(Name = "view_total_upscaling", EmitDefaultValue = true)]
        public string ViewTotalUpscaling { get; set; }

        /// <summary>
        /// Gets or Sets PrerollAdAssetHostname
        /// </summary>
        [DataMember(Name = "preroll_ad_asset_hostname", EmitDefaultValue = true)]
        public string PrerollAdAssetHostname { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceDomain
        /// </summary>
        [DataMember(Name = "player_source_domain", EmitDefaultValue = true)]
        public string PlayerSourceDomain { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets ViewerUserAgent
        /// </summary>
        [DataMember(Name = "viewer_user_agent", EmitDefaultValue = true)]
        public string ViewerUserAgent { get; set; }

        /// <summary>
        /// Gets or Sets PrerollRequested
        /// </summary>
        [DataMember(Name = "preroll_requested", EmitDefaultValue = true)]
        public bool? PrerollRequested { get; set; }

        /// <summary>
        /// Gets or Sets PageType
        /// </summary>
        [DataMember(Name = "page_type", EmitDefaultValue = true)]
        public string PageType { get; set; }

        /// <summary>
        /// Gets or Sets StartupScore
        /// </summary>
        [DataMember(Name = "startup_score", EmitDefaultValue = true)]
        public string StartupScore { get; set; }

        /// <summary>
        /// Gets or Sets ViewSeekDuration
        /// </summary>
        [DataMember(Name = "view_seek_duration", EmitDefaultValue = true)]
        public long? ViewSeekDuration { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name = "country_name", EmitDefaultValue = true)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceHeight
        /// </summary>
        [DataMember(Name = "player_source_height", EmitDefaultValue = true)]
        public int? PlayerSourceHeight { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = true)]
        public string Longitude { get; set; }

        /// <summary>
        /// Gets or Sets BufferingCount
        /// </summary>
        [DataMember(Name = "buffering_count", EmitDefaultValue = true)]
        public long? BufferingCount { get; set; }

        /// <summary>
        /// Gets or Sets VideoDuration
        /// </summary>
        [DataMember(Name = "video_duration", EmitDefaultValue = true)]
        public long? VideoDuration { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceType
        /// </summary>
        [DataMember(Name = "player_source_type", EmitDefaultValue = true)]
        public string PlayerSourceType { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets ViewId
        /// </summary>
        [DataMember(Name = "view_id", EmitDefaultValue = false)]
        public string ViewId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformDescription
        /// </summary>
        [DataMember(Name = "platform_description", EmitDefaultValue = true)]
        public string PlatformDescription { get; set; }

        /// <summary>
        /// Gets or Sets VideoStartupPrerollRequestTime
        /// </summary>
        [DataMember(Name = "video_startup_preroll_request_time", EmitDefaultValue = true)]
        public long? VideoStartupPrerollRequestTime { get; set; }

        /// <summary>
        /// Gets or Sets ViewerDeviceName
        /// </summary>
        [DataMember(Name = "viewer_device_name", EmitDefaultValue = true)]
        public string ViewerDeviceName { get; set; }

        /// <summary>
        /// Gets or Sets VideoSeries
        /// </summary>
        [DataMember(Name = "video_series", EmitDefaultValue = true)]
        public string VideoSeries { get; set; }

        /// <summary>
        /// Gets or Sets ViewerApplicationName
        /// </summary>
        [DataMember(Name = "viewer_application_name", EmitDefaultValue = true)]
        public string ViewerApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ViewTotalContentPlaybackTime
        /// </summary>
        [DataMember(Name = "view_total_content_playback_time", EmitDefaultValue = true)]
        public long? ViewTotalContentPlaybackTime { get; set; }

        /// <summary>
        /// Gets or Sets Cdn
        /// </summary>
        [DataMember(Name = "cdn", EmitDefaultValue = true)]
        public string Cdn { get; set; }

        /// <summary>
        /// Gets or Sets PlayerInstanceId
        /// </summary>
        [DataMember(Name = "player_instance_id", EmitDefaultValue = true)]
        public string PlayerInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets VideoLanguage
        /// </summary>
        [DataMember(Name = "video_language", EmitDefaultValue = true)]
        public string VideoLanguage { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceWidth
        /// </summary>
        [DataMember(Name = "player_source_width", EmitDefaultValue = true)]
        public int? PlayerSourceWidth { get; set; }

        /// <summary>
        /// Gets or Sets PlayerErrorMessage
        /// </summary>
        [DataMember(Name = "player_error_message", EmitDefaultValue = true)]
        public string PlayerErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets PlayerMuxPluginVersion
        /// </summary>
        [DataMember(Name = "player_mux_plugin_version", EmitDefaultValue = true)]
        public string PlayerMuxPluginVersion { get; set; }

        /// <summary>
        /// Gets or Sets Watched
        /// </summary>
        [DataMember(Name = "watched", EmitDefaultValue = true)]
        public bool Watched { get; set; }

        /// <summary>
        /// Gets or Sets PlaybackScore
        /// </summary>
        [DataMember(Name = "playback_score", EmitDefaultValue = true)]
        public string PlaybackScore { get; set; }

        /// <summary>
        /// Gets or Sets PageUrl
        /// </summary>
        [DataMember(Name = "page_url", EmitDefaultValue = true)]
        public string PageUrl { get; set; }

        /// <summary>
        /// Gets or Sets Metro
        /// </summary>
        [DataMember(Name = "metro", EmitDefaultValue = true)]
        public string Metro { get; set; }

        /// <summary>
        /// Gets or Sets ViewMaxRequestLatency
        /// </summary>
        [DataMember(Name = "view_max_request_latency", EmitDefaultValue = true)]
        public long? ViewMaxRequestLatency { get; set; }

        /// <summary>
        /// Gets or Sets RequestsForFirstPreroll
        /// </summary>
        [DataMember(Name = "requests_for_first_preroll", EmitDefaultValue = true)]
        public long? RequestsForFirstPreroll { get; set; }

        /// <summary>
        /// Gets or Sets ViewTotalDownscaling
        /// </summary>
        [DataMember(Name = "view_total_downscaling", EmitDefaultValue = true)]
        public string ViewTotalDownscaling { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = true)]
        public string Latitude { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceHostName
        /// </summary>
        [DataMember(Name = "player_source_host_name", EmitDefaultValue = true)]
        public string PlayerSourceHostName { get; set; }

        /// <summary>
        /// Gets or Sets InsertedAt
        /// </summary>
        [DataMember(Name = "inserted_at", EmitDefaultValue = false)]
        public string InsertedAt { get; set; }

        /// <summary>
        /// Gets or Sets ViewEnd
        /// </summary>
        [DataMember(Name = "view_end", EmitDefaultValue = false)]
        public string ViewEnd { get; set; }

        /// <summary>
        /// Gets or Sets MuxEmbedVersion
        /// </summary>
        [DataMember(Name = "mux_embed_version", EmitDefaultValue = true)]
        public string MuxEmbedVersion { get; set; }

        /// <summary>
        /// Gets or Sets PlayerLanguage
        /// </summary>
        [DataMember(Name = "player_language", EmitDefaultValue = true)]
        public string PlayerLanguage { get; set; }

        /// <summary>
        /// Gets or Sets PageLoadTime
        /// </summary>
        [DataMember(Name = "page_load_time", EmitDefaultValue = true)]
        public long? PageLoadTime { get; set; }

        /// <summary>
        /// Gets or Sets ViewerDeviceCategory
        /// </summary>
        [DataMember(Name = "viewer_device_category", EmitDefaultValue = true)]
        public string ViewerDeviceCategory { get; set; }

        /// <summary>
        /// Gets or Sets VideoStartupPrerollLoadTime
        /// </summary>
        [DataMember(Name = "video_startup_preroll_load_time", EmitDefaultValue = true)]
        public long? VideoStartupPrerollLoadTime { get; set; }

        /// <summary>
        /// Gets or Sets PlayerVersion
        /// </summary>
        [DataMember(Name = "player_version", EmitDefaultValue = true)]
        public string PlayerVersion { get; set; }

        /// <summary>
        /// Gets or Sets WatchTime
        /// </summary>
        [DataMember(Name = "watch_time", EmitDefaultValue = true)]
        public long? WatchTime { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceStreamType
        /// </summary>
        [DataMember(Name = "player_source_stream_type", EmitDefaultValue = true)]
        public string PlayerSourceStreamType { get; set; }

        /// <summary>
        /// Gets or Sets PrerollAdTagHostname
        /// </summary>
        [DataMember(Name = "preroll_ad_tag_hostname", EmitDefaultValue = true)]
        public string PrerollAdTagHostname { get; set; }

        /// <summary>
        /// Gets or Sets ViewerDeviceManufacturer
        /// </summary>
        [DataMember(Name = "viewer_device_manufacturer", EmitDefaultValue = true)]
        public string ViewerDeviceManufacturer { get; set; }

        /// <summary>
        /// Gets or Sets RebufferingScore
        /// </summary>
        [DataMember(Name = "rebuffering_score", EmitDefaultValue = true)]
        public string RebufferingScore { get; set; }

        /// <summary>
        /// Gets or Sets ExperimentName
        /// </summary>
        [DataMember(Name = "experiment_name", EmitDefaultValue = true)]
        public string ExperimentName { get; set; }

        /// <summary>
        /// Gets or Sets ViewerOsVersion
        /// </summary>
        [DataMember(Name = "viewer_os_version", EmitDefaultValue = true)]
        public string ViewerOsVersion { get; set; }

        /// <summary>
        /// Gets or Sets PlayerPreload
        /// </summary>
        [DataMember(Name = "player_preload", EmitDefaultValue = true)]
        public bool PlayerPreload { get; set; }

        /// <summary>
        /// Gets or Sets BufferingDuration
        /// </summary>
        [DataMember(Name = "buffering_duration", EmitDefaultValue = true)]
        public long? BufferingDuration { get; set; }

        /// <summary>
        /// Gets or Sets PlayerViewCount
        /// </summary>
        [DataMember(Name = "player_view_count", EmitDefaultValue = true)]
        public long? PlayerViewCount { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSoftware
        /// </summary>
        [DataMember(Name = "player_software", EmitDefaultValue = true)]
        public string PlayerSoftware { get; set; }

        /// <summary>
        /// Gets or Sets PlayerLoadTime
        /// </summary>
        [DataMember(Name = "player_load_time", EmitDefaultValue = true)]
        public long? PlayerLoadTime { get; set; }

        /// <summary>
        /// Gets or Sets PlatformSummary
        /// </summary>
        [DataMember(Name = "platform_summary", EmitDefaultValue = true)]
        public string PlatformSummary { get; set; }

        /// <summary>
        /// Gets or Sets VideoEncodingVariant
        /// </summary>
        [DataMember(Name = "video_encoding_variant", EmitDefaultValue = true)]
        public string VideoEncodingVariant { get; set; }

        /// <summary>
        /// Gets or Sets PlayerWidth
        /// </summary>
        [DataMember(Name = "player_width", EmitDefaultValue = true)]
        public int? PlayerWidth { get; set; }

        /// <summary>
        /// Gets or Sets ViewSeekCount
        /// </summary>
        [DataMember(Name = "view_seek_count", EmitDefaultValue = true)]
        public long? ViewSeekCount { get; set; }

        /// <summary>
        /// Gets or Sets ViewerExperienceScore
        /// </summary>
        [DataMember(Name = "viewer_experience_score", EmitDefaultValue = true)]
        public string ViewerExperienceScore { get; set; }

        /// <summary>
        /// Gets or Sets ViewErrorId
        /// </summary>
        [DataMember(Name = "view_error_id", EmitDefaultValue = true)]
        public int? ViewErrorId { get; set; }

        /// <summary>
        /// Gets or Sets VideoVariantName
        /// </summary>
        [DataMember(Name = "video_variant_name", EmitDefaultValue = true)]
        public string VideoVariantName { get; set; }

        /// <summary>
        /// Gets or Sets PrerollPlayed
        /// </summary>
        [DataMember(Name = "preroll_played", EmitDefaultValue = true)]
        public bool? PrerollPlayed { get; set; }

        /// <summary>
        /// Gets or Sets ViewerApplicationEngine
        /// </summary>
        [DataMember(Name = "viewer_application_engine", EmitDefaultValue = true)]
        public string ViewerApplicationEngine { get; set; }

        /// <summary>
        /// Gets or Sets ViewerOsArchitecture
        /// </summary>
        [DataMember(Name = "viewer_os_architecture", EmitDefaultValue = true)]
        public string ViewerOsArchitecture { get; set; }

        /// <summary>
        /// Gets or Sets PlayerErrorCode
        /// </summary>
        [DataMember(Name = "player_error_code", EmitDefaultValue = true)]
        public string PlayerErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets BufferingRate
        /// </summary>
        [DataMember(Name = "buffering_rate", EmitDefaultValue = true)]
        public string BufferingRate { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<VideoViewEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets PlayerName
        /// </summary>
        [DataMember(Name = "player_name", EmitDefaultValue = true)]
        public string PlayerName { get; set; }

        /// <summary>
        /// Gets or Sets ViewStart
        /// </summary>
        [DataMember(Name = "view_start", EmitDefaultValue = false)]
        public string ViewStart { get; set; }

        /// <summary>
        /// Gets or Sets ViewAverageRequestThroughput
        /// </summary>
        [DataMember(Name = "view_average_request_throughput", EmitDefaultValue = true)]
        public long? ViewAverageRequestThroughput { get; set; }

        /// <summary>
        /// Gets or Sets VideoProducer
        /// </summary>
        [DataMember(Name = "video_producer", EmitDefaultValue = true)]
        public string VideoProducer { get; set; }

        /// <summary>
        /// Gets or Sets ErrorTypeId
        /// </summary>
        [DataMember(Name = "error_type_id", EmitDefaultValue = true)]
        public int? ErrorTypeId { get; set; }

        /// <summary>
        /// Gets or Sets MuxViewerId
        /// </summary>
        [DataMember(Name = "mux_viewer_id", EmitDefaultValue = false)]
        public string MuxViewerId { get; set; }

        /// <summary>
        /// Gets or Sets VideoId
        /// </summary>
        [DataMember(Name = "video_id", EmitDefaultValue = true)]
        public string VideoId { get; set; }

        /// <summary>
        /// Gets or Sets ContinentCode
        /// </summary>
        [DataMember(Name = "continent_code", EmitDefaultValue = true)]
        public string ContinentCode { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "session_id", EmitDefaultValue = false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets ExitBeforeVideoStart
        /// </summary>
        [DataMember(Name = "exit_before_video_start", EmitDefaultValue = true)]
        public bool ExitBeforeVideoStart { get; set; }

        /// <summary>
        /// Gets or Sets VideoContentType
        /// </summary>
        [DataMember(Name = "video_content_type", EmitDefaultValue = true)]
        public string VideoContentType { get; set; }

        /// <summary>
        /// Gets or Sets ViewerOsFamily
        /// </summary>
        [DataMember(Name = "viewer_os_family", EmitDefaultValue = true)]
        public string ViewerOsFamily { get; set; }

        /// <summary>
        /// Gets or Sets PlayerPoster
        /// </summary>
        [DataMember(Name = "player_poster", EmitDefaultValue = true)]
        public string PlayerPoster { get; set; }

        /// <summary>
        /// Gets or Sets ViewAverageRequestLatency
        /// </summary>
        [DataMember(Name = "view_average_request_latency", EmitDefaultValue = true)]
        public long? ViewAverageRequestLatency { get; set; }

        /// <summary>
        /// Gets or Sets VideoVariantId
        /// </summary>
        [DataMember(Name = "video_variant_id", EmitDefaultValue = true)]
        public string VideoVariantId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceDuration
        /// </summary>
        [DataMember(Name = "player_source_duration", EmitDefaultValue = true)]
        public long? PlayerSourceDuration { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSourceUrl
        /// </summary>
        [DataMember(Name = "player_source_url", EmitDefaultValue = true)]
        public string PlayerSourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets MuxApiVersion
        /// </summary>
        [DataMember(Name = "mux_api_version", EmitDefaultValue = false)]
        public string MuxApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets VideoTitle
        /// </summary>
        [DataMember(Name = "video_title", EmitDefaultValue = true)]
        public string VideoTitle { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ShortTime
        /// </summary>
        [DataMember(Name = "short_time", EmitDefaultValue = false)]
        public string ShortTime { get; set; }

        /// <summary>
        /// Gets or Sets RebufferPercentage
        /// </summary>
        [DataMember(Name = "rebuffer_percentage", EmitDefaultValue = true)]
        public string RebufferPercentage { get; set; }

        /// <summary>
        /// Gets or Sets TimeToFirstFrame
        /// </summary>
        [DataMember(Name = "time_to_first_frame", EmitDefaultValue = true)]
        public long? TimeToFirstFrame { get; set; }

        /// <summary>
        /// Gets or Sets ViewerUserId
        /// </summary>
        [DataMember(Name = "viewer_user_id", EmitDefaultValue = true)]
        public string ViewerUserId { get; set; }

        /// <summary>
        /// Gets or Sets VideoStreamType
        /// </summary>
        [DataMember(Name = "video_stream_type", EmitDefaultValue = true)]
        public string VideoStreamType { get; set; }

        /// <summary>
        /// Gets or Sets PlayerStartupTime
        /// </summary>
        [DataMember(Name = "player_startup_time", EmitDefaultValue = true)]
        public long? PlayerStartupTime { get; set; }

        /// <summary>
        /// Gets or Sets ViewerApplicationVersion
        /// </summary>
        [DataMember(Name = "viewer_application_version", EmitDefaultValue = true)]
        public string ViewerApplicationVersion { get; set; }

        /// <summary>
        /// Gets or Sets ViewMaxDownscalePercentage
        /// </summary>
        [DataMember(Name = "view_max_downscale_percentage", EmitDefaultValue = true)]
        public string ViewMaxDownscalePercentage { get; set; }

        /// <summary>
        /// Gets or Sets ViewMaxUpscalePercentage
        /// </summary>
        [DataMember(Name = "view_max_upscale_percentage", EmitDefaultValue = true)]
        public string ViewMaxUpscalePercentage { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "country_code", EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets UsedFullscreen
        /// </summary>
        [DataMember(Name = "used_fullscreen", EmitDefaultValue = true)]
        public bool UsedFullscreen { get; set; }

        /// <summary>
        /// Gets or Sets Isp
        /// </summary>
        [DataMember(Name = "isp", EmitDefaultValue = true)]
        public string Isp { get; set; }

        /// <summary>
        /// Gets or Sets PropertyId
        /// </summary>
        [DataMember(Name = "property_id", EmitDefaultValue = false)]
        public long PropertyId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerAutoplay
        /// </summary>
        [DataMember(Name = "player_autoplay", EmitDefaultValue = true)]
        public bool PlayerAutoplay { get; set; }

        /// <summary>
        /// Gets or Sets PlayerHeight
        /// </summary>
        [DataMember(Name = "player_height", EmitDefaultValue = true)]
        public int? PlayerHeight { get; set; }

        /// <summary>
        /// Gets or Sets Asn
        /// </summary>
        [DataMember(Name = "asn", EmitDefaultValue = true)]
        public long? Asn { get; set; }

        /// <summary>
        /// Gets or Sets AsnName
        /// </summary>
        [DataMember(Name = "asn_name", EmitDefaultValue = true)]
        public string AsnName { get; set; }

        /// <summary>
        /// Gets or Sets QualityScore
        /// </summary>
        [DataMember(Name = "quality_score", EmitDefaultValue = true)]
        public string QualityScore { get; set; }

        /// <summary>
        /// Gets or Sets PlayerSoftwareVersion
        /// </summary>
        [DataMember(Name = "player_software_version", EmitDefaultValue = true)]
        public string PlayerSoftwareVersion { get; set; }

        /// <summary>
        /// Gets or Sets PlayerMuxPluginName
        /// </summary>
        [DataMember(Name = "player_mux_plugin_name", EmitDefaultValue = true)]
        public string PlayerMuxPluginName { get; set; }

        /// <summary>
        /// Gets or Sets SubPropertyId
        /// </summary>
        [DataMember(Name = "sub_property_id", EmitDefaultValue = true)]
        public string SubPropertyId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerRemotePlayed
        /// </summary>
        [DataMember(Name = "player_remote_played", EmitDefaultValue = true)]
        public bool? PlayerRemotePlayed { get; set; }

        /// <summary>
        /// Gets or Sets ViewMaxPlayheadPosition
        /// </summary>
        [DataMember(Name = "view_max_playhead_position", EmitDefaultValue = true)]
        public string ViewMaxPlayheadPosition { get; set; }

        /// <summary>
        /// Gets or Sets ViewPlayingTime
        /// </summary>
        [DataMember(Name = "view_playing_time", EmitDefaultValue = true)]
        public string ViewPlayingTime { get; set; }

        /// <summary>
        /// Gets or Sets ViewSessionId
        /// </summary>
        [DataMember(Name = "view_session_id", EmitDefaultValue = true)]
        public string ViewSessionId { get; set; }

        /// <summary>
        /// Gets or Sets ViewerConnectionType
        /// </summary>
        [DataMember(Name = "viewer_connection_type", EmitDefaultValue = true)]
        public string ViewerConnectionType { get; set; }

        /// <summary>
        /// Gets or Sets ViewerDeviceModel
        /// </summary>
        [DataMember(Name = "viewer_device_model", EmitDefaultValue = true)]
        public string ViewerDeviceModel { get; set; }

        /// <summary>
        /// Gets or Sets WeightedAverageBitrate
        /// </summary>
        [DataMember(Name = "weighted_average_bitrate", EmitDefaultValue = true)]
        public double? WeightedAverageBitrate { get; set; }

        /// <summary>
        /// Gets or Sets Custom1
        /// </summary>
        [DataMember(Name = "custom_1", EmitDefaultValue = true)]
        public string Custom1 { get; set; }

        /// <summary>
        /// Gets or Sets Custom2
        /// </summary>
        [DataMember(Name = "custom_2", EmitDefaultValue = true)]
        public string Custom2 { get; set; }

        /// <summary>
        /// Gets or Sets Custom3
        /// </summary>
        [DataMember(Name = "custom_3", EmitDefaultValue = true)]
        public string Custom3 { get; set; }

        /// <summary>
        /// Gets or Sets Custom4
        /// </summary>
        [DataMember(Name = "custom_4", EmitDefaultValue = true)]
        public string Custom4 { get; set; }

        /// <summary>
        /// Gets or Sets Custom5
        /// </summary>
        [DataMember(Name = "custom_5", EmitDefaultValue = true)]
        public string Custom5 { get; set; }

        /// <summary>
        /// Gets or Sets Custom6
        /// </summary>
        [DataMember(Name = "custom_6", EmitDefaultValue = true)]
        public string Custom6 { get; set; }

        /// <summary>
        /// Gets or Sets Custom7
        /// </summary>
        [DataMember(Name = "custom_7", EmitDefaultValue = true)]
        public string Custom7 { get; set; }

        /// <summary>
        /// Gets or Sets Custom8
        /// </summary>
        [DataMember(Name = "custom_8", EmitDefaultValue = true)]
        public string Custom8 { get; set; }

        /// <summary>
        /// Gets or Sets Custom9
        /// </summary>
        [DataMember(Name = "custom_9", EmitDefaultValue = true)]
        public string Custom9 { get; set; }

        /// <summary>
        /// Gets or Sets Custom10
        /// </summary>
        [DataMember(Name = "custom_10", EmitDefaultValue = true)]
        public string Custom10 { get; set; }

        /// <summary>
        /// Gets or Sets LiveStreamLatency
        /// </summary>
        [DataMember(Name = "live_stream_latency", EmitDefaultValue = true)]
        public long? LiveStreamLatency { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name = "asset_id", EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets EnvironmentId
        /// </summary>
        [DataMember(Name = "environment_id", EmitDefaultValue = false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or Sets LiveStreamId
        /// </summary>
        [DataMember(Name = "live_stream_id", EmitDefaultValue = true)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or Sets MuxEmbed
        /// </summary>
        [DataMember(Name = "mux_embed", EmitDefaultValue = true)]
        public string MuxEmbed { get; set; }

        /// <summary>
        /// Gets or Sets PlaybackId
        /// </summary>
        [DataMember(Name = "playback_id", EmitDefaultValue = true)]
        public string PlaybackId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerErrorContext
        /// </summary>
        [DataMember(Name = "player_error_context", EmitDefaultValue = true)]
        public string PlayerErrorContext { get; set; }

        /// <summary>
        /// Gets or Sets ViewDrmType
        /// </summary>
        [DataMember(Name = "view_drm_type", EmitDefaultValue = true)]
        public string ViewDrmType { get; set; }

        /// <summary>
        /// Gets or Sets ViewDroppedFrameCount
        /// </summary>
        [DataMember(Name = "view_dropped_frame_count", EmitDefaultValue = true)]
        public long? ViewDroppedFrameCount { get; set; }

        /// <summary>
        /// Gets or Sets ViewHasAd
        /// </summary>
        [DataMember(Name = "view_has_ad", EmitDefaultValue = true)]
        public bool ViewHasAd { get; set; }

        /// <summary>
        /// Gets or Sets VideoStartupFailure
        /// </summary>
        [DataMember(Name = "video_startup_failure", EmitDefaultValue = true)]
        public bool VideoStartupFailure { get; set; }

        /// <summary>
        /// Gets or Sets AdAttemptCount
        /// </summary>
        [DataMember(Name = "ad_attempt_count", EmitDefaultValue = true)]
        public int? AdAttemptCount { get; set; }

        /// <summary>
        /// Gets or Sets AdBreakCount
        /// </summary>
        [DataMember(Name = "ad_break_count", EmitDefaultValue = true)]
        public int? AdBreakCount { get; set; }

        /// <summary>
        /// Gets or Sets AdBreakErrorCount
        /// </summary>
        [DataMember(Name = "ad_break_error_count", EmitDefaultValue = true)]
        public int? AdBreakErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets AdBreakErrorPercentage
        /// </summary>
        [DataMember(Name = "ad_break_error_percentage", EmitDefaultValue = true)]
        public string AdBreakErrorPercentage { get; set; }

        /// <summary>
        /// Gets or Sets AdErrorCount
        /// </summary>
        [DataMember(Name = "ad_error_count", EmitDefaultValue = true)]
        public int? AdErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets AdErrorPercentage
        /// </summary>
        [DataMember(Name = "ad_error_percentage", EmitDefaultValue = true)]
        public string AdErrorPercentage { get; set; }

        /// <summary>
        /// Gets or Sets AdImpressionCount
        /// </summary>
        [DataMember(Name = "ad_impression_count", EmitDefaultValue = true)]
        public int? AdImpressionCount { get; set; }

        /// <summary>
        /// Gets or Sets AdStartupErrorCount
        /// </summary>
        [DataMember(Name = "ad_startup_error_count", EmitDefaultValue = true)]
        public int? AdStartupErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets AdStartupErrorPercentage
        /// </summary>
        [DataMember(Name = "ad_startup_error_percentage", EmitDefaultValue = true)]
        public string AdStartupErrorPercentage { get; set; }

        /// <summary>
        /// Gets or Sets AdExitBeforeStartCount
        /// </summary>
        [DataMember(Name = "ad_exit_before_start_count", EmitDefaultValue = true)]
        public int? AdExitBeforeStartCount { get; set; }

        /// <summary>
        /// Gets or Sets AdExitBeforeStartPercentage
        /// </summary>
        [DataMember(Name = "ad_exit_before_start_percentage", EmitDefaultValue = true)]
        public string AdExitBeforeStartPercentage { get; set; }

        /// <summary>
        /// Gets or Sets LongResume
        /// </summary>
        [DataMember(Name = "long_resume", EmitDefaultValue = true)]
        public bool LongResume { get; set; }

        /// <summary>
        /// Gets or Sets LongRebuffering
        /// </summary>
        [DataMember(Name = "long_rebuffering", EmitDefaultValue = true)]
        public bool LongRebuffering { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoView {\n");
            sb.Append("  ViewTotalUpscaling: ").Append(ViewTotalUpscaling).Append("\n");
            sb.Append("  PrerollAdAssetHostname: ").Append(PrerollAdAssetHostname).Append("\n");
            sb.Append("  PlayerSourceDomain: ").Append(PlayerSourceDomain).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ViewerUserAgent: ").Append(ViewerUserAgent).Append("\n");
            sb.Append("  PrerollRequested: ").Append(PrerollRequested).Append("\n");
            sb.Append("  PageType: ").Append(PageType).Append("\n");
            sb.Append("  StartupScore: ").Append(StartupScore).Append("\n");
            sb.Append("  ViewSeekDuration: ").Append(ViewSeekDuration).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  PlayerSourceHeight: ").Append(PlayerSourceHeight).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  BufferingCount: ").Append(BufferingCount).Append("\n");
            sb.Append("  VideoDuration: ").Append(VideoDuration).Append("\n");
            sb.Append("  PlayerSourceType: ").Append(PlayerSourceType).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ViewId: ").Append(ViewId).Append("\n");
            sb.Append("  PlatformDescription: ").Append(PlatformDescription).Append("\n");
            sb.Append("  VideoStartupPrerollRequestTime: ").Append(VideoStartupPrerollRequestTime).Append("\n");
            sb.Append("  ViewerDeviceName: ").Append(ViewerDeviceName).Append("\n");
            sb.Append("  VideoSeries: ").Append(VideoSeries).Append("\n");
            sb.Append("  ViewerApplicationName: ").Append(ViewerApplicationName).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ViewTotalContentPlaybackTime: ").Append(ViewTotalContentPlaybackTime).Append("\n");
            sb.Append("  Cdn: ").Append(Cdn).Append("\n");
            sb.Append("  PlayerInstanceId: ").Append(PlayerInstanceId).Append("\n");
            sb.Append("  VideoLanguage: ").Append(VideoLanguage).Append("\n");
            sb.Append("  PlayerSourceWidth: ").Append(PlayerSourceWidth).Append("\n");
            sb.Append("  PlayerErrorMessage: ").Append(PlayerErrorMessage).Append("\n");
            sb.Append("  PlayerMuxPluginVersion: ").Append(PlayerMuxPluginVersion).Append("\n");
            sb.Append("  Watched: ").Append(Watched).Append("\n");
            sb.Append("  PlaybackScore: ").Append(PlaybackScore).Append("\n");
            sb.Append("  PageUrl: ").Append(PageUrl).Append("\n");
            sb.Append("  Metro: ").Append(Metro).Append("\n");
            sb.Append("  ViewMaxRequestLatency: ").Append(ViewMaxRequestLatency).Append("\n");
            sb.Append("  RequestsForFirstPreroll: ").Append(RequestsForFirstPreroll).Append("\n");
            sb.Append("  ViewTotalDownscaling: ").Append(ViewTotalDownscaling).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  PlayerSourceHostName: ").Append(PlayerSourceHostName).Append("\n");
            sb.Append("  InsertedAt: ").Append(InsertedAt).Append("\n");
            sb.Append("  ViewEnd: ").Append(ViewEnd).Append("\n");
            sb.Append("  MuxEmbedVersion: ").Append(MuxEmbedVersion).Append("\n");
            sb.Append("  PlayerLanguage: ").Append(PlayerLanguage).Append("\n");
            sb.Append("  PageLoadTime: ").Append(PageLoadTime).Append("\n");
            sb.Append("  ViewerDeviceCategory: ").Append(ViewerDeviceCategory).Append("\n");
            sb.Append("  VideoStartupPrerollLoadTime: ").Append(VideoStartupPrerollLoadTime).Append("\n");
            sb.Append("  PlayerVersion: ").Append(PlayerVersion).Append("\n");
            sb.Append("  WatchTime: ").Append(WatchTime).Append("\n");
            sb.Append("  PlayerSourceStreamType: ").Append(PlayerSourceStreamType).Append("\n");
            sb.Append("  PrerollAdTagHostname: ").Append(PrerollAdTagHostname).Append("\n");
            sb.Append("  ViewerDeviceManufacturer: ").Append(ViewerDeviceManufacturer).Append("\n");
            sb.Append("  RebufferingScore: ").Append(RebufferingScore).Append("\n");
            sb.Append("  ExperimentName: ").Append(ExperimentName).Append("\n");
            sb.Append("  ViewerOsVersion: ").Append(ViewerOsVersion).Append("\n");
            sb.Append("  PlayerPreload: ").Append(PlayerPreload).Append("\n");
            sb.Append("  BufferingDuration: ").Append(BufferingDuration).Append("\n");
            sb.Append("  PlayerViewCount: ").Append(PlayerViewCount).Append("\n");
            sb.Append("  PlayerSoftware: ").Append(PlayerSoftware).Append("\n");
            sb.Append("  PlayerLoadTime: ").Append(PlayerLoadTime).Append("\n");
            sb.Append("  PlatformSummary: ").Append(PlatformSummary).Append("\n");
            sb.Append("  VideoEncodingVariant: ").Append(VideoEncodingVariant).Append("\n");
            sb.Append("  PlayerWidth: ").Append(PlayerWidth).Append("\n");
            sb.Append("  ViewSeekCount: ").Append(ViewSeekCount).Append("\n");
            sb.Append("  ViewerExperienceScore: ").Append(ViewerExperienceScore).Append("\n");
            sb.Append("  ViewErrorId: ").Append(ViewErrorId).Append("\n");
            sb.Append("  VideoVariantName: ").Append(VideoVariantName).Append("\n");
            sb.Append("  PrerollPlayed: ").Append(PrerollPlayed).Append("\n");
            sb.Append("  ViewerApplicationEngine: ").Append(ViewerApplicationEngine).Append("\n");
            sb.Append("  ViewerOsArchitecture: ").Append(ViewerOsArchitecture).Append("\n");
            sb.Append("  PlayerErrorCode: ").Append(PlayerErrorCode).Append("\n");
            sb.Append("  BufferingRate: ").Append(BufferingRate).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  PlayerName: ").Append(PlayerName).Append("\n");
            sb.Append("  ViewStart: ").Append(ViewStart).Append("\n");
            sb.Append("  ViewAverageRequestThroughput: ").Append(ViewAverageRequestThroughput).Append("\n");
            sb.Append("  VideoProducer: ").Append(VideoProducer).Append("\n");
            sb.Append("  ErrorTypeId: ").Append(ErrorTypeId).Append("\n");
            sb.Append("  MuxViewerId: ").Append(MuxViewerId).Append("\n");
            sb.Append("  VideoId: ").Append(VideoId).Append("\n");
            sb.Append("  ContinentCode: ").Append(ContinentCode).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  ExitBeforeVideoStart: ").Append(ExitBeforeVideoStart).Append("\n");
            sb.Append("  VideoContentType: ").Append(VideoContentType).Append("\n");
            sb.Append("  ViewerOsFamily: ").Append(ViewerOsFamily).Append("\n");
            sb.Append("  PlayerPoster: ").Append(PlayerPoster).Append("\n");
            sb.Append("  ViewAverageRequestLatency: ").Append(ViewAverageRequestLatency).Append("\n");
            sb.Append("  VideoVariantId: ").Append(VideoVariantId).Append("\n");
            sb.Append("  PlayerSourceDuration: ").Append(PlayerSourceDuration).Append("\n");
            sb.Append("  PlayerSourceUrl: ").Append(PlayerSourceUrl).Append("\n");
            sb.Append("  MuxApiVersion: ").Append(MuxApiVersion).Append("\n");
            sb.Append("  VideoTitle: ").Append(VideoTitle).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ShortTime: ").Append(ShortTime).Append("\n");
            sb.Append("  RebufferPercentage: ").Append(RebufferPercentage).Append("\n");
            sb.Append("  TimeToFirstFrame: ").Append(TimeToFirstFrame).Append("\n");
            sb.Append("  ViewerUserId: ").Append(ViewerUserId).Append("\n");
            sb.Append("  VideoStreamType: ").Append(VideoStreamType).Append("\n");
            sb.Append("  PlayerStartupTime: ").Append(PlayerStartupTime).Append("\n");
            sb.Append("  ViewerApplicationVersion: ").Append(ViewerApplicationVersion).Append("\n");
            sb.Append("  ViewMaxDownscalePercentage: ").Append(ViewMaxDownscalePercentage).Append("\n");
            sb.Append("  ViewMaxUpscalePercentage: ").Append(ViewMaxUpscalePercentage).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  UsedFullscreen: ").Append(UsedFullscreen).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  PlayerAutoplay: ").Append(PlayerAutoplay).Append("\n");
            sb.Append("  PlayerHeight: ").Append(PlayerHeight).Append("\n");
            sb.Append("  Asn: ").Append(Asn).Append("\n");
            sb.Append("  AsnName: ").Append(AsnName).Append("\n");
            sb.Append("  QualityScore: ").Append(QualityScore).Append("\n");
            sb.Append("  PlayerSoftwareVersion: ").Append(PlayerSoftwareVersion).Append("\n");
            sb.Append("  PlayerMuxPluginName: ").Append(PlayerMuxPluginName).Append("\n");
            sb.Append("  SubPropertyId: ").Append(SubPropertyId).Append("\n");
            sb.Append("  PlayerRemotePlayed: ").Append(PlayerRemotePlayed).Append("\n");
            sb.Append("  ViewMaxPlayheadPosition: ").Append(ViewMaxPlayheadPosition).Append("\n");
            sb.Append("  ViewPlayingTime: ").Append(ViewPlayingTime).Append("\n");
            sb.Append("  ViewSessionId: ").Append(ViewSessionId).Append("\n");
            sb.Append("  ViewerConnectionType: ").Append(ViewerConnectionType).Append("\n");
            sb.Append("  ViewerDeviceModel: ").Append(ViewerDeviceModel).Append("\n");
            sb.Append("  WeightedAverageBitrate: ").Append(WeightedAverageBitrate).Append("\n");
            sb.Append("  Custom1: ").Append(Custom1).Append("\n");
            sb.Append("  Custom2: ").Append(Custom2).Append("\n");
            sb.Append("  Custom3: ").Append(Custom3).Append("\n");
            sb.Append("  Custom4: ").Append(Custom4).Append("\n");
            sb.Append("  Custom5: ").Append(Custom5).Append("\n");
            sb.Append("  Custom6: ").Append(Custom6).Append("\n");
            sb.Append("  Custom7: ").Append(Custom7).Append("\n");
            sb.Append("  Custom8: ").Append(Custom8).Append("\n");
            sb.Append("  Custom9: ").Append(Custom9).Append("\n");
            sb.Append("  Custom10: ").Append(Custom10).Append("\n");
            sb.Append("  LiveStreamLatency: ").Append(LiveStreamLatency).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  MuxEmbed: ").Append(MuxEmbed).Append("\n");
            sb.Append("  PlaybackId: ").Append(PlaybackId).Append("\n");
            sb.Append("  PlayerErrorContext: ").Append(PlayerErrorContext).Append("\n");
            sb.Append("  ViewDrmType: ").Append(ViewDrmType).Append("\n");
            sb.Append("  ViewDroppedFrameCount: ").Append(ViewDroppedFrameCount).Append("\n");
            sb.Append("  ViewHasAd: ").Append(ViewHasAd).Append("\n");
            sb.Append("  VideoStartupFailure: ").Append(VideoStartupFailure).Append("\n");
            sb.Append("  AdAttemptCount: ").Append(AdAttemptCount).Append("\n");
            sb.Append("  AdBreakCount: ").Append(AdBreakCount).Append("\n");
            sb.Append("  AdBreakErrorCount: ").Append(AdBreakErrorCount).Append("\n");
            sb.Append("  AdBreakErrorPercentage: ").Append(AdBreakErrorPercentage).Append("\n");
            sb.Append("  AdErrorCount: ").Append(AdErrorCount).Append("\n");
            sb.Append("  AdErrorPercentage: ").Append(AdErrorPercentage).Append("\n");
            sb.Append("  AdImpressionCount: ").Append(AdImpressionCount).Append("\n");
            sb.Append("  AdStartupErrorCount: ").Append(AdStartupErrorCount).Append("\n");
            sb.Append("  AdStartupErrorPercentage: ").Append(AdStartupErrorPercentage).Append("\n");
            sb.Append("  AdExitBeforeStartCount: ").Append(AdExitBeforeStartCount).Append("\n");
            sb.Append("  AdExitBeforeStartPercentage: ").Append(AdExitBeforeStartPercentage).Append("\n");
            sb.Append("  LongResume: ").Append(LongResume).Append("\n");
            sb.Append("  LongRebuffering: ").Append(LongRebuffering).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoView);
        }

        /// <summary>
        /// Returns true if VideoView instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoView input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ViewTotalUpscaling == input.ViewTotalUpscaling ||
                    (this.ViewTotalUpscaling != null &&
                    this.ViewTotalUpscaling.Equals(input.ViewTotalUpscaling))
                ) && 
                (
                    this.PrerollAdAssetHostname == input.PrerollAdAssetHostname ||
                    (this.PrerollAdAssetHostname != null &&
                    this.PrerollAdAssetHostname.Equals(input.PrerollAdAssetHostname))
                ) && 
                (
                    this.PlayerSourceDomain == input.PlayerSourceDomain ||
                    (this.PlayerSourceDomain != null &&
                    this.PlayerSourceDomain.Equals(input.PlayerSourceDomain))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.ViewerUserAgent == input.ViewerUserAgent ||
                    (this.ViewerUserAgent != null &&
                    this.ViewerUserAgent.Equals(input.ViewerUserAgent))
                ) && 
                (
                    this.PrerollRequested == input.PrerollRequested ||
                    (this.PrerollRequested != null &&
                    this.PrerollRequested.Equals(input.PrerollRequested))
                ) && 
                (
                    this.PageType == input.PageType ||
                    (this.PageType != null &&
                    this.PageType.Equals(input.PageType))
                ) && 
                (
                    this.StartupScore == input.StartupScore ||
                    (this.StartupScore != null &&
                    this.StartupScore.Equals(input.StartupScore))
                ) && 
                (
                    this.ViewSeekDuration == input.ViewSeekDuration ||
                    (this.ViewSeekDuration != null &&
                    this.ViewSeekDuration.Equals(input.ViewSeekDuration))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.PlayerSourceHeight == input.PlayerSourceHeight ||
                    (this.PlayerSourceHeight != null &&
                    this.PlayerSourceHeight.Equals(input.PlayerSourceHeight))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.BufferingCount == input.BufferingCount ||
                    (this.BufferingCount != null &&
                    this.BufferingCount.Equals(input.BufferingCount))
                ) && 
                (
                    this.VideoDuration == input.VideoDuration ||
                    (this.VideoDuration != null &&
                    this.VideoDuration.Equals(input.VideoDuration))
                ) && 
                (
                    this.PlayerSourceType == input.PlayerSourceType ||
                    (this.PlayerSourceType != null &&
                    this.PlayerSourceType.Equals(input.PlayerSourceType))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.ViewId == input.ViewId ||
                    (this.ViewId != null &&
                    this.ViewId.Equals(input.ViewId))
                ) && 
                (
                    this.PlatformDescription == input.PlatformDescription ||
                    (this.PlatformDescription != null &&
                    this.PlatformDescription.Equals(input.PlatformDescription))
                ) && 
                (
                    this.VideoStartupPrerollRequestTime == input.VideoStartupPrerollRequestTime ||
                    (this.VideoStartupPrerollRequestTime != null &&
                    this.VideoStartupPrerollRequestTime.Equals(input.VideoStartupPrerollRequestTime))
                ) && 
                (
                    this.ViewerDeviceName == input.ViewerDeviceName ||
                    (this.ViewerDeviceName != null &&
                    this.ViewerDeviceName.Equals(input.ViewerDeviceName))
                ) && 
                (
                    this.VideoSeries == input.VideoSeries ||
                    (this.VideoSeries != null &&
                    this.VideoSeries.Equals(input.VideoSeries))
                ) && 
                (
                    this.ViewerApplicationName == input.ViewerApplicationName ||
                    (this.ViewerApplicationName != null &&
                    this.ViewerApplicationName.Equals(input.ViewerApplicationName))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ViewTotalContentPlaybackTime == input.ViewTotalContentPlaybackTime ||
                    (this.ViewTotalContentPlaybackTime != null &&
                    this.ViewTotalContentPlaybackTime.Equals(input.ViewTotalContentPlaybackTime))
                ) && 
                (
                    this.Cdn == input.Cdn ||
                    (this.Cdn != null &&
                    this.Cdn.Equals(input.Cdn))
                ) && 
                (
                    this.PlayerInstanceId == input.PlayerInstanceId ||
                    (this.PlayerInstanceId != null &&
                    this.PlayerInstanceId.Equals(input.PlayerInstanceId))
                ) && 
                (
                    this.VideoLanguage == input.VideoLanguage ||
                    (this.VideoLanguage != null &&
                    this.VideoLanguage.Equals(input.VideoLanguage))
                ) && 
                (
                    this.PlayerSourceWidth == input.PlayerSourceWidth ||
                    (this.PlayerSourceWidth != null &&
                    this.PlayerSourceWidth.Equals(input.PlayerSourceWidth))
                ) && 
                (
                    this.PlayerErrorMessage == input.PlayerErrorMessage ||
                    (this.PlayerErrorMessage != null &&
                    this.PlayerErrorMessage.Equals(input.PlayerErrorMessage))
                ) && 
                (
                    this.PlayerMuxPluginVersion == input.PlayerMuxPluginVersion ||
                    (this.PlayerMuxPluginVersion != null &&
                    this.PlayerMuxPluginVersion.Equals(input.PlayerMuxPluginVersion))
                ) && 
                (
                    this.Watched == input.Watched ||
                    this.Watched.Equals(input.Watched)
                ) && 
                (
                    this.PlaybackScore == input.PlaybackScore ||
                    (this.PlaybackScore != null &&
                    this.PlaybackScore.Equals(input.PlaybackScore))
                ) && 
                (
                    this.PageUrl == input.PageUrl ||
                    (this.PageUrl != null &&
                    this.PageUrl.Equals(input.PageUrl))
                ) && 
                (
                    this.Metro == input.Metro ||
                    (this.Metro != null &&
                    this.Metro.Equals(input.Metro))
                ) && 
                (
                    this.ViewMaxRequestLatency == input.ViewMaxRequestLatency ||
                    (this.ViewMaxRequestLatency != null &&
                    this.ViewMaxRequestLatency.Equals(input.ViewMaxRequestLatency))
                ) && 
                (
                    this.RequestsForFirstPreroll == input.RequestsForFirstPreroll ||
                    (this.RequestsForFirstPreroll != null &&
                    this.RequestsForFirstPreroll.Equals(input.RequestsForFirstPreroll))
                ) && 
                (
                    this.ViewTotalDownscaling == input.ViewTotalDownscaling ||
                    (this.ViewTotalDownscaling != null &&
                    this.ViewTotalDownscaling.Equals(input.ViewTotalDownscaling))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.PlayerSourceHostName == input.PlayerSourceHostName ||
                    (this.PlayerSourceHostName != null &&
                    this.PlayerSourceHostName.Equals(input.PlayerSourceHostName))
                ) && 
                (
                    this.InsertedAt == input.InsertedAt ||
                    (this.InsertedAt != null &&
                    this.InsertedAt.Equals(input.InsertedAt))
                ) && 
                (
                    this.ViewEnd == input.ViewEnd ||
                    (this.ViewEnd != null &&
                    this.ViewEnd.Equals(input.ViewEnd))
                ) && 
                (
                    this.MuxEmbedVersion == input.MuxEmbedVersion ||
                    (this.MuxEmbedVersion != null &&
                    this.MuxEmbedVersion.Equals(input.MuxEmbedVersion))
                ) && 
                (
                    this.PlayerLanguage == input.PlayerLanguage ||
                    (this.PlayerLanguage != null &&
                    this.PlayerLanguage.Equals(input.PlayerLanguage))
                ) && 
                (
                    this.PageLoadTime == input.PageLoadTime ||
                    (this.PageLoadTime != null &&
                    this.PageLoadTime.Equals(input.PageLoadTime))
                ) && 
                (
                    this.ViewerDeviceCategory == input.ViewerDeviceCategory ||
                    (this.ViewerDeviceCategory != null &&
                    this.ViewerDeviceCategory.Equals(input.ViewerDeviceCategory))
                ) && 
                (
                    this.VideoStartupPrerollLoadTime == input.VideoStartupPrerollLoadTime ||
                    (this.VideoStartupPrerollLoadTime != null &&
                    this.VideoStartupPrerollLoadTime.Equals(input.VideoStartupPrerollLoadTime))
                ) && 
                (
                    this.PlayerVersion == input.PlayerVersion ||
                    (this.PlayerVersion != null &&
                    this.PlayerVersion.Equals(input.PlayerVersion))
                ) && 
                (
                    this.WatchTime == input.WatchTime ||
                    (this.WatchTime != null &&
                    this.WatchTime.Equals(input.WatchTime))
                ) && 
                (
                    this.PlayerSourceStreamType == input.PlayerSourceStreamType ||
                    (this.PlayerSourceStreamType != null &&
                    this.PlayerSourceStreamType.Equals(input.PlayerSourceStreamType))
                ) && 
                (
                    this.PrerollAdTagHostname == input.PrerollAdTagHostname ||
                    (this.PrerollAdTagHostname != null &&
                    this.PrerollAdTagHostname.Equals(input.PrerollAdTagHostname))
                ) && 
                (
                    this.ViewerDeviceManufacturer == input.ViewerDeviceManufacturer ||
                    (this.ViewerDeviceManufacturer != null &&
                    this.ViewerDeviceManufacturer.Equals(input.ViewerDeviceManufacturer))
                ) && 
                (
                    this.RebufferingScore == input.RebufferingScore ||
                    (this.RebufferingScore != null &&
                    this.RebufferingScore.Equals(input.RebufferingScore))
                ) && 
                (
                    this.ExperimentName == input.ExperimentName ||
                    (this.ExperimentName != null &&
                    this.ExperimentName.Equals(input.ExperimentName))
                ) && 
                (
                    this.ViewerOsVersion == input.ViewerOsVersion ||
                    (this.ViewerOsVersion != null &&
                    this.ViewerOsVersion.Equals(input.ViewerOsVersion))
                ) && 
                (
                    this.PlayerPreload == input.PlayerPreload ||
                    this.PlayerPreload.Equals(input.PlayerPreload)
                ) && 
                (
                    this.BufferingDuration == input.BufferingDuration ||
                    (this.BufferingDuration != null &&
                    this.BufferingDuration.Equals(input.BufferingDuration))
                ) && 
                (
                    this.PlayerViewCount == input.PlayerViewCount ||
                    (this.PlayerViewCount != null &&
                    this.PlayerViewCount.Equals(input.PlayerViewCount))
                ) && 
                (
                    this.PlayerSoftware == input.PlayerSoftware ||
                    (this.PlayerSoftware != null &&
                    this.PlayerSoftware.Equals(input.PlayerSoftware))
                ) && 
                (
                    this.PlayerLoadTime == input.PlayerLoadTime ||
                    (this.PlayerLoadTime != null &&
                    this.PlayerLoadTime.Equals(input.PlayerLoadTime))
                ) && 
                (
                    this.PlatformSummary == input.PlatformSummary ||
                    (this.PlatformSummary != null &&
                    this.PlatformSummary.Equals(input.PlatformSummary))
                ) && 
                (
                    this.VideoEncodingVariant == input.VideoEncodingVariant ||
                    (this.VideoEncodingVariant != null &&
                    this.VideoEncodingVariant.Equals(input.VideoEncodingVariant))
                ) && 
                (
                    this.PlayerWidth == input.PlayerWidth ||
                    (this.PlayerWidth != null &&
                    this.PlayerWidth.Equals(input.PlayerWidth))
                ) && 
                (
                    this.ViewSeekCount == input.ViewSeekCount ||
                    (this.ViewSeekCount != null &&
                    this.ViewSeekCount.Equals(input.ViewSeekCount))
                ) && 
                (
                    this.ViewerExperienceScore == input.ViewerExperienceScore ||
                    (this.ViewerExperienceScore != null &&
                    this.ViewerExperienceScore.Equals(input.ViewerExperienceScore))
                ) && 
                (
                    this.ViewErrorId == input.ViewErrorId ||
                    (this.ViewErrorId != null &&
                    this.ViewErrorId.Equals(input.ViewErrorId))
                ) && 
                (
                    this.VideoVariantName == input.VideoVariantName ||
                    (this.VideoVariantName != null &&
                    this.VideoVariantName.Equals(input.VideoVariantName))
                ) && 
                (
                    this.PrerollPlayed == input.PrerollPlayed ||
                    (this.PrerollPlayed != null &&
                    this.PrerollPlayed.Equals(input.PrerollPlayed))
                ) && 
                (
                    this.ViewerApplicationEngine == input.ViewerApplicationEngine ||
                    (this.ViewerApplicationEngine != null &&
                    this.ViewerApplicationEngine.Equals(input.ViewerApplicationEngine))
                ) && 
                (
                    this.ViewerOsArchitecture == input.ViewerOsArchitecture ||
                    (this.ViewerOsArchitecture != null &&
                    this.ViewerOsArchitecture.Equals(input.ViewerOsArchitecture))
                ) && 
                (
                    this.PlayerErrorCode == input.PlayerErrorCode ||
                    (this.PlayerErrorCode != null &&
                    this.PlayerErrorCode.Equals(input.PlayerErrorCode))
                ) && 
                (
                    this.BufferingRate == input.BufferingRate ||
                    (this.BufferingRate != null &&
                    this.BufferingRate.Equals(input.BufferingRate))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.PlayerName == input.PlayerName ||
                    (this.PlayerName != null &&
                    this.PlayerName.Equals(input.PlayerName))
                ) && 
                (
                    this.ViewStart == input.ViewStart ||
                    (this.ViewStart != null &&
                    this.ViewStart.Equals(input.ViewStart))
                ) && 
                (
                    this.ViewAverageRequestThroughput == input.ViewAverageRequestThroughput ||
                    (this.ViewAverageRequestThroughput != null &&
                    this.ViewAverageRequestThroughput.Equals(input.ViewAverageRequestThroughput))
                ) && 
                (
                    this.VideoProducer == input.VideoProducer ||
                    (this.VideoProducer != null &&
                    this.VideoProducer.Equals(input.VideoProducer))
                ) && 
                (
                    this.ErrorTypeId == input.ErrorTypeId ||
                    (this.ErrorTypeId != null &&
                    this.ErrorTypeId.Equals(input.ErrorTypeId))
                ) && 
                (
                    this.MuxViewerId == input.MuxViewerId ||
                    (this.MuxViewerId != null &&
                    this.MuxViewerId.Equals(input.MuxViewerId))
                ) && 
                (
                    this.VideoId == input.VideoId ||
                    (this.VideoId != null &&
                    this.VideoId.Equals(input.VideoId))
                ) && 
                (
                    this.ContinentCode == input.ContinentCode ||
                    (this.ContinentCode != null &&
                    this.ContinentCode.Equals(input.ContinentCode))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.ExitBeforeVideoStart == input.ExitBeforeVideoStart ||
                    this.ExitBeforeVideoStart.Equals(input.ExitBeforeVideoStart)
                ) && 
                (
                    this.VideoContentType == input.VideoContentType ||
                    (this.VideoContentType != null &&
                    this.VideoContentType.Equals(input.VideoContentType))
                ) && 
                (
                    this.ViewerOsFamily == input.ViewerOsFamily ||
                    (this.ViewerOsFamily != null &&
                    this.ViewerOsFamily.Equals(input.ViewerOsFamily))
                ) && 
                (
                    this.PlayerPoster == input.PlayerPoster ||
                    (this.PlayerPoster != null &&
                    this.PlayerPoster.Equals(input.PlayerPoster))
                ) && 
                (
                    this.ViewAverageRequestLatency == input.ViewAverageRequestLatency ||
                    (this.ViewAverageRequestLatency != null &&
                    this.ViewAverageRequestLatency.Equals(input.ViewAverageRequestLatency))
                ) && 
                (
                    this.VideoVariantId == input.VideoVariantId ||
                    (this.VideoVariantId != null &&
                    this.VideoVariantId.Equals(input.VideoVariantId))
                ) && 
                (
                    this.PlayerSourceDuration == input.PlayerSourceDuration ||
                    (this.PlayerSourceDuration != null &&
                    this.PlayerSourceDuration.Equals(input.PlayerSourceDuration))
                ) && 
                (
                    this.PlayerSourceUrl == input.PlayerSourceUrl ||
                    (this.PlayerSourceUrl != null &&
                    this.PlayerSourceUrl.Equals(input.PlayerSourceUrl))
                ) && 
                (
                    this.MuxApiVersion == input.MuxApiVersion ||
                    (this.MuxApiVersion != null &&
                    this.MuxApiVersion.Equals(input.MuxApiVersion))
                ) && 
                (
                    this.VideoTitle == input.VideoTitle ||
                    (this.VideoTitle != null &&
                    this.VideoTitle.Equals(input.VideoTitle))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ShortTime == input.ShortTime ||
                    (this.ShortTime != null &&
                    this.ShortTime.Equals(input.ShortTime))
                ) && 
                (
                    this.RebufferPercentage == input.RebufferPercentage ||
                    (this.RebufferPercentage != null &&
                    this.RebufferPercentage.Equals(input.RebufferPercentage))
                ) && 
                (
                    this.TimeToFirstFrame == input.TimeToFirstFrame ||
                    (this.TimeToFirstFrame != null &&
                    this.TimeToFirstFrame.Equals(input.TimeToFirstFrame))
                ) && 
                (
                    this.ViewerUserId == input.ViewerUserId ||
                    (this.ViewerUserId != null &&
                    this.ViewerUserId.Equals(input.ViewerUserId))
                ) && 
                (
                    this.VideoStreamType == input.VideoStreamType ||
                    (this.VideoStreamType != null &&
                    this.VideoStreamType.Equals(input.VideoStreamType))
                ) && 
                (
                    this.PlayerStartupTime == input.PlayerStartupTime ||
                    (this.PlayerStartupTime != null &&
                    this.PlayerStartupTime.Equals(input.PlayerStartupTime))
                ) && 
                (
                    this.ViewerApplicationVersion == input.ViewerApplicationVersion ||
                    (this.ViewerApplicationVersion != null &&
                    this.ViewerApplicationVersion.Equals(input.ViewerApplicationVersion))
                ) && 
                (
                    this.ViewMaxDownscalePercentage == input.ViewMaxDownscalePercentage ||
                    (this.ViewMaxDownscalePercentage != null &&
                    this.ViewMaxDownscalePercentage.Equals(input.ViewMaxDownscalePercentage))
                ) && 
                (
                    this.ViewMaxUpscalePercentage == input.ViewMaxUpscalePercentage ||
                    (this.ViewMaxUpscalePercentage != null &&
                    this.ViewMaxUpscalePercentage.Equals(input.ViewMaxUpscalePercentage))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.UsedFullscreen == input.UsedFullscreen ||
                    this.UsedFullscreen.Equals(input.UsedFullscreen)
                ) && 
                (
                    this.Isp == input.Isp ||
                    (this.Isp != null &&
                    this.Isp.Equals(input.Isp))
                ) && 
                (
                    this.PropertyId == input.PropertyId ||
                    this.PropertyId.Equals(input.PropertyId)
                ) && 
                (
                    this.PlayerAutoplay == input.PlayerAutoplay ||
                    this.PlayerAutoplay.Equals(input.PlayerAutoplay)
                ) && 
                (
                    this.PlayerHeight == input.PlayerHeight ||
                    (this.PlayerHeight != null &&
                    this.PlayerHeight.Equals(input.PlayerHeight))
                ) && 
                (
                    this.Asn == input.Asn ||
                    (this.Asn != null &&
                    this.Asn.Equals(input.Asn))
                ) && 
                (
                    this.AsnName == input.AsnName ||
                    (this.AsnName != null &&
                    this.AsnName.Equals(input.AsnName))
                ) && 
                (
                    this.QualityScore == input.QualityScore ||
                    (this.QualityScore != null &&
                    this.QualityScore.Equals(input.QualityScore))
                ) && 
                (
                    this.PlayerSoftwareVersion == input.PlayerSoftwareVersion ||
                    (this.PlayerSoftwareVersion != null &&
                    this.PlayerSoftwareVersion.Equals(input.PlayerSoftwareVersion))
                ) && 
                (
                    this.PlayerMuxPluginName == input.PlayerMuxPluginName ||
                    (this.PlayerMuxPluginName != null &&
                    this.PlayerMuxPluginName.Equals(input.PlayerMuxPluginName))
                ) && 
                (
                    this.SubPropertyId == input.SubPropertyId ||
                    (this.SubPropertyId != null &&
                    this.SubPropertyId.Equals(input.SubPropertyId))
                ) && 
                (
                    this.PlayerRemotePlayed == input.PlayerRemotePlayed ||
                    (this.PlayerRemotePlayed != null &&
                    this.PlayerRemotePlayed.Equals(input.PlayerRemotePlayed))
                ) && 
                (
                    this.ViewMaxPlayheadPosition == input.ViewMaxPlayheadPosition ||
                    (this.ViewMaxPlayheadPosition != null &&
                    this.ViewMaxPlayheadPosition.Equals(input.ViewMaxPlayheadPosition))
                ) && 
                (
                    this.ViewPlayingTime == input.ViewPlayingTime ||
                    (this.ViewPlayingTime != null &&
                    this.ViewPlayingTime.Equals(input.ViewPlayingTime))
                ) && 
                (
                    this.ViewSessionId == input.ViewSessionId ||
                    (this.ViewSessionId != null &&
                    this.ViewSessionId.Equals(input.ViewSessionId))
                ) && 
                (
                    this.ViewerConnectionType == input.ViewerConnectionType ||
                    (this.ViewerConnectionType != null &&
                    this.ViewerConnectionType.Equals(input.ViewerConnectionType))
                ) && 
                (
                    this.ViewerDeviceModel == input.ViewerDeviceModel ||
                    (this.ViewerDeviceModel != null &&
                    this.ViewerDeviceModel.Equals(input.ViewerDeviceModel))
                ) && 
                (
                    this.WeightedAverageBitrate == input.WeightedAverageBitrate ||
                    (this.WeightedAverageBitrate != null &&
                    this.WeightedAverageBitrate.Equals(input.WeightedAverageBitrate))
                ) && 
                (
                    this.Custom1 == input.Custom1 ||
                    (this.Custom1 != null &&
                    this.Custom1.Equals(input.Custom1))
                ) && 
                (
                    this.Custom2 == input.Custom2 ||
                    (this.Custom2 != null &&
                    this.Custom2.Equals(input.Custom2))
                ) && 
                (
                    this.Custom3 == input.Custom3 ||
                    (this.Custom3 != null &&
                    this.Custom3.Equals(input.Custom3))
                ) && 
                (
                    this.Custom4 == input.Custom4 ||
                    (this.Custom4 != null &&
                    this.Custom4.Equals(input.Custom4))
                ) && 
                (
                    this.Custom5 == input.Custom5 ||
                    (this.Custom5 != null &&
                    this.Custom5.Equals(input.Custom5))
                ) && 
                (
                    this.Custom6 == input.Custom6 ||
                    (this.Custom6 != null &&
                    this.Custom6.Equals(input.Custom6))
                ) && 
                (
                    this.Custom7 == input.Custom7 ||
                    (this.Custom7 != null &&
                    this.Custom7.Equals(input.Custom7))
                ) && 
                (
                    this.Custom8 == input.Custom8 ||
                    (this.Custom8 != null &&
                    this.Custom8.Equals(input.Custom8))
                ) && 
                (
                    this.Custom9 == input.Custom9 ||
                    (this.Custom9 != null &&
                    this.Custom9.Equals(input.Custom9))
                ) && 
                (
                    this.Custom10 == input.Custom10 ||
                    (this.Custom10 != null &&
                    this.Custom10.Equals(input.Custom10))
                ) && 
                (
                    this.LiveStreamLatency == input.LiveStreamLatency ||
                    (this.LiveStreamLatency != null &&
                    this.LiveStreamLatency.Equals(input.LiveStreamLatency))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                ) && 
                (
                    this.LiveStreamId == input.LiveStreamId ||
                    (this.LiveStreamId != null &&
                    this.LiveStreamId.Equals(input.LiveStreamId))
                ) && 
                (
                    this.MuxEmbed == input.MuxEmbed ||
                    (this.MuxEmbed != null &&
                    this.MuxEmbed.Equals(input.MuxEmbed))
                ) && 
                (
                    this.PlaybackId == input.PlaybackId ||
                    (this.PlaybackId != null &&
                    this.PlaybackId.Equals(input.PlaybackId))
                ) && 
                (
                    this.PlayerErrorContext == input.PlayerErrorContext ||
                    (this.PlayerErrorContext != null &&
                    this.PlayerErrorContext.Equals(input.PlayerErrorContext))
                ) && 
                (
                    this.ViewDrmType == input.ViewDrmType ||
                    (this.ViewDrmType != null &&
                    this.ViewDrmType.Equals(input.ViewDrmType))
                ) && 
                (
                    this.ViewDroppedFrameCount == input.ViewDroppedFrameCount ||
                    (this.ViewDroppedFrameCount != null &&
                    this.ViewDroppedFrameCount.Equals(input.ViewDroppedFrameCount))
                ) && 
                (
                    this.ViewHasAd == input.ViewHasAd ||
                    this.ViewHasAd.Equals(input.ViewHasAd)
                ) && 
                (
                    this.VideoStartupFailure == input.VideoStartupFailure ||
                    this.VideoStartupFailure.Equals(input.VideoStartupFailure)
                ) && 
                (
                    this.AdAttemptCount == input.AdAttemptCount ||
                    (this.AdAttemptCount != null &&
                    this.AdAttemptCount.Equals(input.AdAttemptCount))
                ) && 
                (
                    this.AdBreakCount == input.AdBreakCount ||
                    (this.AdBreakCount != null &&
                    this.AdBreakCount.Equals(input.AdBreakCount))
                ) && 
                (
                    this.AdBreakErrorCount == input.AdBreakErrorCount ||
                    (this.AdBreakErrorCount != null &&
                    this.AdBreakErrorCount.Equals(input.AdBreakErrorCount))
                ) && 
                (
                    this.AdBreakErrorPercentage == input.AdBreakErrorPercentage ||
                    (this.AdBreakErrorPercentage != null &&
                    this.AdBreakErrorPercentage.Equals(input.AdBreakErrorPercentage))
                ) && 
                (
                    this.AdErrorCount == input.AdErrorCount ||
                    (this.AdErrorCount != null &&
                    this.AdErrorCount.Equals(input.AdErrorCount))
                ) && 
                (
                    this.AdErrorPercentage == input.AdErrorPercentage ||
                    (this.AdErrorPercentage != null &&
                    this.AdErrorPercentage.Equals(input.AdErrorPercentage))
                ) && 
                (
                    this.AdImpressionCount == input.AdImpressionCount ||
                    (this.AdImpressionCount != null &&
                    this.AdImpressionCount.Equals(input.AdImpressionCount))
                ) && 
                (
                    this.AdStartupErrorCount == input.AdStartupErrorCount ||
                    (this.AdStartupErrorCount != null &&
                    this.AdStartupErrorCount.Equals(input.AdStartupErrorCount))
                ) && 
                (
                    this.AdStartupErrorPercentage == input.AdStartupErrorPercentage ||
                    (this.AdStartupErrorPercentage != null &&
                    this.AdStartupErrorPercentage.Equals(input.AdStartupErrorPercentage))
                ) && 
                (
                    this.AdExitBeforeStartCount == input.AdExitBeforeStartCount ||
                    (this.AdExitBeforeStartCount != null &&
                    this.AdExitBeforeStartCount.Equals(input.AdExitBeforeStartCount))
                ) && 
                (
                    this.AdExitBeforeStartPercentage == input.AdExitBeforeStartPercentage ||
                    (this.AdExitBeforeStartPercentage != null &&
                    this.AdExitBeforeStartPercentage.Equals(input.AdExitBeforeStartPercentage))
                ) && 
                (
                    this.LongResume == input.LongResume ||
                    this.LongResume.Equals(input.LongResume)
                ) && 
                (
                    this.LongRebuffering == input.LongRebuffering ||
                    this.LongRebuffering.Equals(input.LongRebuffering)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ViewTotalUpscaling != null)
                {
                    hashCode = (hashCode * 59) + this.ViewTotalUpscaling.GetHashCode();
                }
                if (this.PrerollAdAssetHostname != null)
                {
                    hashCode = (hashCode * 59) + this.PrerollAdAssetHostname.GetHashCode();
                }
                if (this.PlayerSourceDomain != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceDomain.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.ViewerUserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerUserAgent.GetHashCode();
                }
                if (this.PrerollRequested != null)
                {
                    hashCode = (hashCode * 59) + this.PrerollRequested.GetHashCode();
                }
                if (this.PageType != null)
                {
                    hashCode = (hashCode * 59) + this.PageType.GetHashCode();
                }
                if (this.StartupScore != null)
                {
                    hashCode = (hashCode * 59) + this.StartupScore.GetHashCode();
                }
                if (this.ViewSeekDuration != null)
                {
                    hashCode = (hashCode * 59) + this.ViewSeekDuration.GetHashCode();
                }
                if (this.CountryName != null)
                {
                    hashCode = (hashCode * 59) + this.CountryName.GetHashCode();
                }
                if (this.PlayerSourceHeight != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceHeight.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.BufferingCount != null)
                {
                    hashCode = (hashCode * 59) + this.BufferingCount.GetHashCode();
                }
                if (this.VideoDuration != null)
                {
                    hashCode = (hashCode * 59) + this.VideoDuration.GetHashCode();
                }
                if (this.PlayerSourceType != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceType.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.ViewId != null)
                {
                    hashCode = (hashCode * 59) + this.ViewId.GetHashCode();
                }
                if (this.PlatformDescription != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformDescription.GetHashCode();
                }
                if (this.VideoStartupPrerollRequestTime != null)
                {
                    hashCode = (hashCode * 59) + this.VideoStartupPrerollRequestTime.GetHashCode();
                }
                if (this.ViewerDeviceName != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerDeviceName.GetHashCode();
                }
                if (this.VideoSeries != null)
                {
                    hashCode = (hashCode * 59) + this.VideoSeries.GetHashCode();
                }
                if (this.ViewerApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerApplicationName.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.ViewTotalContentPlaybackTime != null)
                {
                    hashCode = (hashCode * 59) + this.ViewTotalContentPlaybackTime.GetHashCode();
                }
                if (this.Cdn != null)
                {
                    hashCode = (hashCode * 59) + this.Cdn.GetHashCode();
                }
                if (this.PlayerInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerInstanceId.GetHashCode();
                }
                if (this.VideoLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.VideoLanguage.GetHashCode();
                }
                if (this.PlayerSourceWidth != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceWidth.GetHashCode();
                }
                if (this.PlayerErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerErrorMessage.GetHashCode();
                }
                if (this.PlayerMuxPluginVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerMuxPluginVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Watched.GetHashCode();
                if (this.PlaybackScore != null)
                {
                    hashCode = (hashCode * 59) + this.PlaybackScore.GetHashCode();
                }
                if (this.PageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PageUrl.GetHashCode();
                }
                if (this.Metro != null)
                {
                    hashCode = (hashCode * 59) + this.Metro.GetHashCode();
                }
                if (this.ViewMaxRequestLatency != null)
                {
                    hashCode = (hashCode * 59) + this.ViewMaxRequestLatency.GetHashCode();
                }
                if (this.RequestsForFirstPreroll != null)
                {
                    hashCode = (hashCode * 59) + this.RequestsForFirstPreroll.GetHashCode();
                }
                if (this.ViewTotalDownscaling != null)
                {
                    hashCode = (hashCode * 59) + this.ViewTotalDownscaling.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.PlayerSourceHostName != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceHostName.GetHashCode();
                }
                if (this.InsertedAt != null)
                {
                    hashCode = (hashCode * 59) + this.InsertedAt.GetHashCode();
                }
                if (this.ViewEnd != null)
                {
                    hashCode = (hashCode * 59) + this.ViewEnd.GetHashCode();
                }
                if (this.MuxEmbedVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MuxEmbedVersion.GetHashCode();
                }
                if (this.PlayerLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerLanguage.GetHashCode();
                }
                if (this.PageLoadTime != null)
                {
                    hashCode = (hashCode * 59) + this.PageLoadTime.GetHashCode();
                }
                if (this.ViewerDeviceCategory != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerDeviceCategory.GetHashCode();
                }
                if (this.VideoStartupPrerollLoadTime != null)
                {
                    hashCode = (hashCode * 59) + this.VideoStartupPrerollLoadTime.GetHashCode();
                }
                if (this.PlayerVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerVersion.GetHashCode();
                }
                if (this.WatchTime != null)
                {
                    hashCode = (hashCode * 59) + this.WatchTime.GetHashCode();
                }
                if (this.PlayerSourceStreamType != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceStreamType.GetHashCode();
                }
                if (this.PrerollAdTagHostname != null)
                {
                    hashCode = (hashCode * 59) + this.PrerollAdTagHostname.GetHashCode();
                }
                if (this.ViewerDeviceManufacturer != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerDeviceManufacturer.GetHashCode();
                }
                if (this.RebufferingScore != null)
                {
                    hashCode = (hashCode * 59) + this.RebufferingScore.GetHashCode();
                }
                if (this.ExperimentName != null)
                {
                    hashCode = (hashCode * 59) + this.ExperimentName.GetHashCode();
                }
                if (this.ViewerOsVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerOsVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PlayerPreload.GetHashCode();
                if (this.BufferingDuration != null)
                {
                    hashCode = (hashCode * 59) + this.BufferingDuration.GetHashCode();
                }
                if (this.PlayerViewCount != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerViewCount.GetHashCode();
                }
                if (this.PlayerSoftware != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSoftware.GetHashCode();
                }
                if (this.PlayerLoadTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerLoadTime.GetHashCode();
                }
                if (this.PlatformSummary != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformSummary.GetHashCode();
                }
                if (this.VideoEncodingVariant != null)
                {
                    hashCode = (hashCode * 59) + this.VideoEncodingVariant.GetHashCode();
                }
                if (this.PlayerWidth != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerWidth.GetHashCode();
                }
                if (this.ViewSeekCount != null)
                {
                    hashCode = (hashCode * 59) + this.ViewSeekCount.GetHashCode();
                }
                if (this.ViewerExperienceScore != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerExperienceScore.GetHashCode();
                }
                if (this.ViewErrorId != null)
                {
                    hashCode = (hashCode * 59) + this.ViewErrorId.GetHashCode();
                }
                if (this.VideoVariantName != null)
                {
                    hashCode = (hashCode * 59) + this.VideoVariantName.GetHashCode();
                }
                if (this.PrerollPlayed != null)
                {
                    hashCode = (hashCode * 59) + this.PrerollPlayed.GetHashCode();
                }
                if (this.ViewerApplicationEngine != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerApplicationEngine.GetHashCode();
                }
                if (this.ViewerOsArchitecture != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerOsArchitecture.GetHashCode();
                }
                if (this.PlayerErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerErrorCode.GetHashCode();
                }
                if (this.BufferingRate != null)
                {
                    hashCode = (hashCode * 59) + this.BufferingRate.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.PlayerName != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerName.GetHashCode();
                }
                if (this.ViewStart != null)
                {
                    hashCode = (hashCode * 59) + this.ViewStart.GetHashCode();
                }
                if (this.ViewAverageRequestThroughput != null)
                {
                    hashCode = (hashCode * 59) + this.ViewAverageRequestThroughput.GetHashCode();
                }
                if (this.VideoProducer != null)
                {
                    hashCode = (hashCode * 59) + this.VideoProducer.GetHashCode();
                }
                if (this.ErrorTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorTypeId.GetHashCode();
                }
                if (this.MuxViewerId != null)
                {
                    hashCode = (hashCode * 59) + this.MuxViewerId.GetHashCode();
                }
                if (this.VideoId != null)
                {
                    hashCode = (hashCode * 59) + this.VideoId.GetHashCode();
                }
                if (this.ContinentCode != null)
                {
                    hashCode = (hashCode * 59) + this.ContinentCode.GetHashCode();
                }
                if (this.SessionId != null)
                {
                    hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExitBeforeVideoStart.GetHashCode();
                if (this.VideoContentType != null)
                {
                    hashCode = (hashCode * 59) + this.VideoContentType.GetHashCode();
                }
                if (this.ViewerOsFamily != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerOsFamily.GetHashCode();
                }
                if (this.PlayerPoster != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerPoster.GetHashCode();
                }
                if (this.ViewAverageRequestLatency != null)
                {
                    hashCode = (hashCode * 59) + this.ViewAverageRequestLatency.GetHashCode();
                }
                if (this.VideoVariantId != null)
                {
                    hashCode = (hashCode * 59) + this.VideoVariantId.GetHashCode();
                }
                if (this.PlayerSourceDuration != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceDuration.GetHashCode();
                }
                if (this.PlayerSourceUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSourceUrl.GetHashCode();
                }
                if (this.MuxApiVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MuxApiVersion.GetHashCode();
                }
                if (this.VideoTitle != null)
                {
                    hashCode = (hashCode * 59) + this.VideoTitle.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ShortTime != null)
                {
                    hashCode = (hashCode * 59) + this.ShortTime.GetHashCode();
                }
                if (this.RebufferPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.RebufferPercentage.GetHashCode();
                }
                if (this.TimeToFirstFrame != null)
                {
                    hashCode = (hashCode * 59) + this.TimeToFirstFrame.GetHashCode();
                }
                if (this.ViewerUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerUserId.GetHashCode();
                }
                if (this.VideoStreamType != null)
                {
                    hashCode = (hashCode * 59) + this.VideoStreamType.GetHashCode();
                }
                if (this.PlayerStartupTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerStartupTime.GetHashCode();
                }
                if (this.ViewerApplicationVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerApplicationVersion.GetHashCode();
                }
                if (this.ViewMaxDownscalePercentage != null)
                {
                    hashCode = (hashCode * 59) + this.ViewMaxDownscalePercentage.GetHashCode();
                }
                if (this.ViewMaxUpscalePercentage != null)
                {
                    hashCode = (hashCode * 59) + this.ViewMaxUpscalePercentage.GetHashCode();
                }
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UsedFullscreen.GetHashCode();
                if (this.Isp != null)
                {
                    hashCode = (hashCode * 59) + this.Isp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PropertyId.GetHashCode();
                hashCode = (hashCode * 59) + this.PlayerAutoplay.GetHashCode();
                if (this.PlayerHeight != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerHeight.GetHashCode();
                }
                if (this.Asn != null)
                {
                    hashCode = (hashCode * 59) + this.Asn.GetHashCode();
                }
                if (this.AsnName != null)
                {
                    hashCode = (hashCode * 59) + this.AsnName.GetHashCode();
                }
                if (this.QualityScore != null)
                {
                    hashCode = (hashCode * 59) + this.QualityScore.GetHashCode();
                }
                if (this.PlayerSoftwareVersion != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerSoftwareVersion.GetHashCode();
                }
                if (this.PlayerMuxPluginName != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerMuxPluginName.GetHashCode();
                }
                if (this.SubPropertyId != null)
                {
                    hashCode = (hashCode * 59) + this.SubPropertyId.GetHashCode();
                }
                if (this.PlayerRemotePlayed != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerRemotePlayed.GetHashCode();
                }
                if (this.ViewMaxPlayheadPosition != null)
                {
                    hashCode = (hashCode * 59) + this.ViewMaxPlayheadPosition.GetHashCode();
                }
                if (this.ViewPlayingTime != null)
                {
                    hashCode = (hashCode * 59) + this.ViewPlayingTime.GetHashCode();
                }
                if (this.ViewSessionId != null)
                {
                    hashCode = (hashCode * 59) + this.ViewSessionId.GetHashCode();
                }
                if (this.ViewerConnectionType != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerConnectionType.GetHashCode();
                }
                if (this.ViewerDeviceModel != null)
                {
                    hashCode = (hashCode * 59) + this.ViewerDeviceModel.GetHashCode();
                }
                if (this.WeightedAverageBitrate != null)
                {
                    hashCode = (hashCode * 59) + this.WeightedAverageBitrate.GetHashCode();
                }
                if (this.Custom1 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom1.GetHashCode();
                }
                if (this.Custom2 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom2.GetHashCode();
                }
                if (this.Custom3 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom3.GetHashCode();
                }
                if (this.Custom4 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom4.GetHashCode();
                }
                if (this.Custom5 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom5.GetHashCode();
                }
                if (this.Custom6 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom6.GetHashCode();
                }
                if (this.Custom7 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom7.GetHashCode();
                }
                if (this.Custom8 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom8.GetHashCode();
                }
                if (this.Custom9 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom9.GetHashCode();
                }
                if (this.Custom10 != null)
                {
                    hashCode = (hashCode * 59) + this.Custom10.GetHashCode();
                }
                if (this.LiveStreamLatency != null)
                {
                    hashCode = (hashCode * 59) + this.LiveStreamLatency.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.EnvironmentId != null)
                {
                    hashCode = (hashCode * 59) + this.EnvironmentId.GetHashCode();
                }
                if (this.LiveStreamId != null)
                {
                    hashCode = (hashCode * 59) + this.LiveStreamId.GetHashCode();
                }
                if (this.MuxEmbed != null)
                {
                    hashCode = (hashCode * 59) + this.MuxEmbed.GetHashCode();
                }
                if (this.PlaybackId != null)
                {
                    hashCode = (hashCode * 59) + this.PlaybackId.GetHashCode();
                }
                if (this.PlayerErrorContext != null)
                {
                    hashCode = (hashCode * 59) + this.PlayerErrorContext.GetHashCode();
                }
                if (this.ViewDrmType != null)
                {
                    hashCode = (hashCode * 59) + this.ViewDrmType.GetHashCode();
                }
                if (this.ViewDroppedFrameCount != null)
                {
                    hashCode = (hashCode * 59) + this.ViewDroppedFrameCount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ViewHasAd.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoStartupFailure.GetHashCode();
                if (this.AdAttemptCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdAttemptCount.GetHashCode();
                }
                if (this.AdBreakCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdBreakCount.GetHashCode();
                }
                if (this.AdBreakErrorCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdBreakErrorCount.GetHashCode();
                }
                if (this.AdBreakErrorPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.AdBreakErrorPercentage.GetHashCode();
                }
                if (this.AdErrorCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdErrorCount.GetHashCode();
                }
                if (this.AdErrorPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.AdErrorPercentage.GetHashCode();
                }
                if (this.AdImpressionCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdImpressionCount.GetHashCode();
                }
                if (this.AdStartupErrorCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdStartupErrorCount.GetHashCode();
                }
                if (this.AdStartupErrorPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.AdStartupErrorPercentage.GetHashCode();
                }
                if (this.AdExitBeforeStartCount != null)
                {
                    hashCode = (hashCode * 59) + this.AdExitBeforeStartCount.GetHashCode();
                }
                if (this.AdExitBeforeStartPercentage != null)
                {
                    hashCode = (hashCode * 59) + this.AdExitBeforeStartPercentage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LongResume.GetHashCode();
                hashCode = (hashCode * 59) + this.LongRebuffering.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
