/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// SimulcastTarget
    /// </summary>
    [DataContract(Name = "SimulcastTarget")]
    public partial class SimulcastTarget : IEquatable<SimulcastTarget>, IValidatableObject
    {
        /// <summary>
        /// The current status of the simulcast target. See Statuses below for detailed description.   * &#x60;idle&#x60;: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * &#x60;starting&#x60;: The simulcast target transitions into this state when the parent live stream transition into connected state.   * &#x60;broadcasting&#x60;: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * &#x60;errored&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. When a simulcast target has this status it will have an &#x60;error_severity&#x60; field with more details about the error. 
        /// </summary>
        /// <value>The current status of the simulcast target. See Statuses below for detailed description.   * &#x60;idle&#x60;: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * &#x60;starting&#x60;: The simulcast target transitions into this state when the parent live stream transition into connected state.   * &#x60;broadcasting&#x60;: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * &#x60;errored&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. When a simulcast target has this status it will have an &#x60;error_severity&#x60; field with more details about the error. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Idle for value: idle
            /// </summary>
            [EnumMember(Value = "idle")]
            Idle = 1,

            /// <summary>
            /// Enum Starting for value: starting
            /// </summary>
            [EnumMember(Value = "starting")]
            Starting = 2,

            /// <summary>
            /// Enum Broadcasting for value: broadcasting
            /// </summary>
            [EnumMember(Value = "broadcasting")]
            Broadcasting = 3,

            /// <summary>
            /// Enum Errored for value: errored
            /// </summary>
            [EnumMember(Value = "errored")]
            Errored = 4

        }


        /// <summary>
        /// The current status of the simulcast target. See Statuses below for detailed description.   * &#x60;idle&#x60;: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * &#x60;starting&#x60;: The simulcast target transitions into this state when the parent live stream transition into connected state.   * &#x60;broadcasting&#x60;: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * &#x60;errored&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. When a simulcast target has this status it will have an &#x60;error_severity&#x60; field with more details about the error. 
        /// </summary>
        /// <value>The current status of the simulcast target. See Statuses below for detailed description.   * &#x60;idle&#x60;: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * &#x60;starting&#x60;: The simulcast target transitions into this state when the parent live stream transition into connected state.   * &#x60;broadcasting&#x60;: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * &#x60;errored&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. When a simulcast target has this status it will have an &#x60;error_severity&#x60; field with more details about the error. </value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The severity of the error encountered by the simulcast target. This field is only set when the simulcast target is in the &#x60;errored&#x60; status. See the values of severities below and their descriptions.   * &#x60;normal&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. A simulcast may transition back into the broadcasting state if a connection with the service can be re-established.   * &#x60;fatal&#x60;: The simulcast target is incompatible with the current input to the parent live stream. No further attempts to this simulcast target will be made for the current live stream asset. 
        /// </summary>
        /// <value>The severity of the error encountered by the simulcast target. This field is only set when the simulcast target is in the &#x60;errored&#x60; status. See the values of severities below and their descriptions.   * &#x60;normal&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. A simulcast may transition back into the broadcasting state if a connection with the service can be re-established.   * &#x60;fatal&#x60;: The simulcast target is incompatible with the current input to the parent live stream. No further attempts to this simulcast target will be made for the current live stream asset. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorSeverityEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,

            /// <summary>
            /// Enum Fatal for value: fatal
            /// </summary>
            [EnumMember(Value = "fatal")]
            Fatal = 2

        }


        /// <summary>
        /// The severity of the error encountered by the simulcast target. This field is only set when the simulcast target is in the &#x60;errored&#x60; status. See the values of severities below and their descriptions.   * &#x60;normal&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. A simulcast may transition back into the broadcasting state if a connection with the service can be re-established.   * &#x60;fatal&#x60;: The simulcast target is incompatible with the current input to the parent live stream. No further attempts to this simulcast target will be made for the current live stream asset. 
        /// </summary>
        /// <value>The severity of the error encountered by the simulcast target. This field is only set when the simulcast target is in the &#x60;errored&#x60; status. See the values of severities below and their descriptions.   * &#x60;normal&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. A simulcast may transition back into the broadcasting state if a connection with the service can be re-established.   * &#x60;fatal&#x60;: The simulcast target is incompatible with the current input to the parent live stream. No further attempts to this simulcast target will be made for the current live stream asset. </value>
        [DataMember(Name = "error_severity", EmitDefaultValue = false)]
        public ErrorSeverityEnum? ErrorSeverity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulcastTarget" /> class.
        /// </summary>
        /// <param name="id">ID of the Simulcast Target.</param>
        /// <param name="passthrough">Arbitrary user-supplied metadata set when creating a simulcast target..</param>
        /// <param name="status">The current status of the simulcast target. See Statuses below for detailed description.   * &#x60;idle&#x60;: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * &#x60;starting&#x60;: The simulcast target transitions into this state when the parent live stream transition into connected state.   * &#x60;broadcasting&#x60;: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * &#x60;errored&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. When a simulcast target has this status it will have an &#x60;error_severity&#x60; field with more details about the error. .</param>
        /// <param name="streamKey">Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to. Only used for RTMP(s) simulcast destinations..</param>
        /// <param name="url">The RTMP(s) or SRT endpoint for a simulcast destination. * For RTMP(s) destinations, this should include the application name for the third party live streaming service, for example: &#x60;rtmp://live.example.com/app&#x60;. * For SRT destinations, this should be a fully formed SRT connection string, for example: &#x60;srt://srt-live.example.com:1234?streamid&#x3D;{stream_key}&amp;passphrase&#x3D;{srt_passphrase}&#x60;.  Note: SRT simulcast targets can only be used when an source is connected over SRT. .</param>
        /// <param name="errorSeverity">The severity of the error encountered by the simulcast target. This field is only set when the simulcast target is in the &#x60;errored&#x60; status. See the values of severities below and their descriptions.   * &#x60;normal&#x60;: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. A simulcast may transition back into the broadcasting state if a connection with the service can be re-established.   * &#x60;fatal&#x60;: The simulcast target is incompatible with the current input to the parent live stream. No further attempts to this simulcast target will be made for the current live stream asset. .</param>
        public SimulcastTarget(string id = default(string), string passthrough = default(string), StatusEnum? status = default(StatusEnum?), string streamKey = default(string), string url = default(string), ErrorSeverityEnum? errorSeverity = default(ErrorSeverityEnum?))
        {
            this.Id = id;
            this.Passthrough = passthrough;
            this.Status = status;
            this.StreamKey = streamKey;
            this.Url = url;
            this.ErrorSeverity = errorSeverity;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// ID of the Simulcast Target
        /// </summary>
        /// <value>ID of the Simulcast Target</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Arbitrary user-supplied metadata set when creating a simulcast target.
        /// </summary>
        /// <value>Arbitrary user-supplied metadata set when creating a simulcast target.</value>
        [DataMember(Name = "passthrough", EmitDefaultValue = false)]
        public string Passthrough { get; set; }

        /// <summary>
        /// Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to. Only used for RTMP(s) simulcast destinations.
        /// </summary>
        /// <value>Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to. Only used for RTMP(s) simulcast destinations.</value>
        [DataMember(Name = "stream_key", EmitDefaultValue = false)]
        public string StreamKey { get; set; }

        /// <summary>
        /// The RTMP(s) or SRT endpoint for a simulcast destination. * For RTMP(s) destinations, this should include the application name for the third party live streaming service, for example: &#x60;rtmp://live.example.com/app&#x60;. * For SRT destinations, this should be a fully formed SRT connection string, for example: &#x60;srt://srt-live.example.com:1234?streamid&#x3D;{stream_key}&amp;passphrase&#x3D;{srt_passphrase}&#x60;.  Note: SRT simulcast targets can only be used when an source is connected over SRT. 
        /// </summary>
        /// <value>The RTMP(s) or SRT endpoint for a simulcast destination. * For RTMP(s) destinations, this should include the application name for the third party live streaming service, for example: &#x60;rtmp://live.example.com/app&#x60;. * For SRT destinations, this should be a fully formed SRT connection string, for example: &#x60;srt://srt-live.example.com:1234?streamid&#x3D;{stream_key}&amp;passphrase&#x3D;{srt_passphrase}&#x60;.  Note: SRT simulcast targets can only be used when an source is connected over SRT. </value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimulcastTarget {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Passthrough: ").Append(Passthrough).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StreamKey: ").Append(StreamKey).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ErrorSeverity: ").Append(ErrorSeverity).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimulcastTarget);
        }

        /// <summary>
        /// Returns true if SimulcastTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulcastTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulcastTarget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Passthrough == input.Passthrough ||
                    (this.Passthrough != null &&
                    this.Passthrough.Equals(input.Passthrough))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StreamKey == input.StreamKey ||
                    (this.StreamKey != null &&
                    this.StreamKey.Equals(input.StreamKey))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ErrorSeverity == input.ErrorSeverity ||
                    this.ErrorSeverity.Equals(input.ErrorSeverity)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Passthrough != null)
                {
                    hashCode = (hashCode * 59) + this.Passthrough.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.StreamKey != null)
                {
                    hashCode = (hashCode * 59) + this.StreamKey.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorSeverity.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
