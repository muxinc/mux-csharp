/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// Incident
    /// </summary>
    [DataContract(Name = "Incident")]
    public partial class Incident : IEquatable<Incident>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Incident" /> class.
        /// </summary>
        /// <param name="threshold">threshold.</param>
        /// <param name="status">status.</param>
        /// <param name="startedAt">startedAt.</param>
        /// <param name="severity">severity.</param>
        /// <param name="sampleSizeUnit">sampleSizeUnit.</param>
        /// <param name="sampleSize">sampleSize.</param>
        /// <param name="resolvedAt">resolvedAt.</param>
        /// <param name="notifications">notifications.</param>
        /// <param name="notificationRules">notificationRules.</param>
        /// <param name="measurement">measurement.</param>
        /// <param name="measuredValueOnClose">measuredValueOnClose.</param>
        /// <param name="measuredValue">measuredValue.</param>
        /// <param name="incidentKey">incidentKey.</param>
        /// <param name="impact">impact.</param>
        /// <param name="id">id.</param>
        /// <param name="errorDescription">errorDescription.</param>
        /// <param name="description">description.</param>
        /// <param name="breakdowns">breakdowns.</param>
        /// <param name="affectedViewsPerHourOnOpen">affectedViewsPerHourOnOpen.</param>
        /// <param name="affectedViewsPerHour">affectedViewsPerHour.</param>
        /// <param name="affectedViews">affectedViews.</param>
        public Incident(double threshold = default(double), string status = default(string), string startedAt = default(string), string severity = default(string), string sampleSizeUnit = default(string), long sampleSize = default(long), string resolvedAt = default(string), List<IncidentNotification> notifications = default(List<IncidentNotification>), List<IncidentNotificationRule> notificationRules = default(List<IncidentNotificationRule>), string measurement = default(string), double? measuredValueOnClose = default(double?), double? measuredValue = default(double?), string incidentKey = default(string), string impact = default(string), string id = default(string), string errorDescription = default(string), string description = default(string), List<IncidentBreakdown> breakdowns = default(List<IncidentBreakdown>), long affectedViewsPerHourOnOpen = default(long), long affectedViewsPerHour = default(long), long affectedViews = default(long))
        {
            this.Threshold = threshold;
            this.Status = status;
            this.StartedAt = startedAt;
            this.Severity = severity;
            this.SampleSizeUnit = sampleSizeUnit;
            this.SampleSize = sampleSize;
            this.ResolvedAt = resolvedAt;
            this.Notifications = notifications;
            this.NotificationRules = notificationRules;
            this.Measurement = measurement;
            this.MeasuredValueOnClose = measuredValueOnClose;
            this.MeasuredValue = measuredValue;
            this.IncidentKey = incidentKey;
            this.Impact = impact;
            this.Id = id;
            this.ErrorDescription = errorDescription;
            this.Description = description;
            this.Breakdowns = breakdowns;
            this.AffectedViewsPerHourOnOpen = affectedViewsPerHourOnOpen;
            this.AffectedViewsPerHour = affectedViewsPerHour;
            this.AffectedViews = affectedViews;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Threshold
        /// </summary>
        [DataMember(Name = "threshold", EmitDefaultValue = false)]
        public double Threshold { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets StartedAt
        /// </summary>
        [DataMember(Name = "started_at", EmitDefaultValue = false)]
        public string StartedAt { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name = "severity", EmitDefaultValue = false)]
        public string Severity { get; set; }

        /// <summary>
        /// Gets or Sets SampleSizeUnit
        /// </summary>
        [DataMember(Name = "sample_size_unit", EmitDefaultValue = false)]
        public string SampleSizeUnit { get; set; }

        /// <summary>
        /// Gets or Sets SampleSize
        /// </summary>
        [DataMember(Name = "sample_size", EmitDefaultValue = false)]
        public long SampleSize { get; set; }

        /// <summary>
        /// Gets or Sets ResolvedAt
        /// </summary>
        [DataMember(Name = "resolved_at", EmitDefaultValue = true)]
        public string ResolvedAt { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [DataMember(Name = "notifications", EmitDefaultValue = false)]
        public List<IncidentNotification> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets NotificationRules
        /// </summary>
        [DataMember(Name = "notification_rules", EmitDefaultValue = false)]
        public List<IncidentNotificationRule> NotificationRules { get; set; }

        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [DataMember(Name = "measurement", EmitDefaultValue = false)]
        public string Measurement { get; set; }

        /// <summary>
        /// Gets or Sets MeasuredValueOnClose
        /// </summary>
        [DataMember(Name = "measured_value_on_close", EmitDefaultValue = true)]
        public double? MeasuredValueOnClose { get; set; }

        /// <summary>
        /// Gets or Sets MeasuredValue
        /// </summary>
        [DataMember(Name = "measured_value", EmitDefaultValue = true)]
        public double? MeasuredValue { get; set; }

        /// <summary>
        /// Gets or Sets IncidentKey
        /// </summary>
        [DataMember(Name = "incident_key", EmitDefaultValue = false)]
        public string IncidentKey { get; set; }

        /// <summary>
        /// Gets or Sets Impact
        /// </summary>
        [DataMember(Name = "impact", EmitDefaultValue = false)]
        public string Impact { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDescription
        /// </summary>
        [DataMember(Name = "error_description", EmitDefaultValue = false)]
        public string ErrorDescription { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Breakdowns
        /// </summary>
        [DataMember(Name = "breakdowns", EmitDefaultValue = false)]
        public List<IncidentBreakdown> Breakdowns { get; set; }

        /// <summary>
        /// Gets or Sets AffectedViewsPerHourOnOpen
        /// </summary>
        [DataMember(Name = "affected_views_per_hour_on_open", EmitDefaultValue = false)]
        public long AffectedViewsPerHourOnOpen { get; set; }

        /// <summary>
        /// Gets or Sets AffectedViewsPerHour
        /// </summary>
        [DataMember(Name = "affected_views_per_hour", EmitDefaultValue = false)]
        public long AffectedViewsPerHour { get; set; }

        /// <summary>
        /// Gets or Sets AffectedViews
        /// </summary>
        [DataMember(Name = "affected_views", EmitDefaultValue = false)]
        public long AffectedViews { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Incident {\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  SampleSizeUnit: ").Append(SampleSizeUnit).Append("\n");
            sb.Append("  SampleSize: ").Append(SampleSize).Append("\n");
            sb.Append("  ResolvedAt: ").Append(ResolvedAt).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  NotificationRules: ").Append(NotificationRules).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  MeasuredValueOnClose: ").Append(MeasuredValueOnClose).Append("\n");
            sb.Append("  MeasuredValue: ").Append(MeasuredValue).Append("\n");
            sb.Append("  IncidentKey: ").Append(IncidentKey).Append("\n");
            sb.Append("  Impact: ").Append(Impact).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Breakdowns: ").Append(Breakdowns).Append("\n");
            sb.Append("  AffectedViewsPerHourOnOpen: ").Append(AffectedViewsPerHourOnOpen).Append("\n");
            sb.Append("  AffectedViewsPerHour: ").Append(AffectedViewsPerHour).Append("\n");
            sb.Append("  AffectedViews: ").Append(AffectedViews).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Incident);
        }

        /// <summary>
        /// Returns true if Incident instances are equal
        /// </summary>
        /// <param name="input">Instance of Incident to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Incident input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Threshold == input.Threshold ||
                    this.Threshold.Equals(input.Threshold)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.SampleSizeUnit == input.SampleSizeUnit ||
                    (this.SampleSizeUnit != null &&
                    this.SampleSizeUnit.Equals(input.SampleSizeUnit))
                ) && 
                (
                    this.SampleSize == input.SampleSize ||
                    this.SampleSize.Equals(input.SampleSize)
                ) && 
                (
                    this.ResolvedAt == input.ResolvedAt ||
                    (this.ResolvedAt != null &&
                    this.ResolvedAt.Equals(input.ResolvedAt))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.NotificationRules == input.NotificationRules ||
                    this.NotificationRules != null &&
                    input.NotificationRules != null &&
                    this.NotificationRules.SequenceEqual(input.NotificationRules)
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    (this.Measurement != null &&
                    this.Measurement.Equals(input.Measurement))
                ) && 
                (
                    this.MeasuredValueOnClose == input.MeasuredValueOnClose ||
                    (this.MeasuredValueOnClose != null &&
                    this.MeasuredValueOnClose.Equals(input.MeasuredValueOnClose))
                ) && 
                (
                    this.MeasuredValue == input.MeasuredValue ||
                    (this.MeasuredValue != null &&
                    this.MeasuredValue.Equals(input.MeasuredValue))
                ) && 
                (
                    this.IncidentKey == input.IncidentKey ||
                    (this.IncidentKey != null &&
                    this.IncidentKey.Equals(input.IncidentKey))
                ) && 
                (
                    this.Impact == input.Impact ||
                    (this.Impact != null &&
                    this.Impact.Equals(input.Impact))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ErrorDescription == input.ErrorDescription ||
                    (this.ErrorDescription != null &&
                    this.ErrorDescription.Equals(input.ErrorDescription))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Breakdowns == input.Breakdowns ||
                    this.Breakdowns != null &&
                    input.Breakdowns != null &&
                    this.Breakdowns.SequenceEqual(input.Breakdowns)
                ) && 
                (
                    this.AffectedViewsPerHourOnOpen == input.AffectedViewsPerHourOnOpen ||
                    this.AffectedViewsPerHourOnOpen.Equals(input.AffectedViewsPerHourOnOpen)
                ) && 
                (
                    this.AffectedViewsPerHour == input.AffectedViewsPerHour ||
                    this.AffectedViewsPerHour.Equals(input.AffectedViewsPerHour)
                ) && 
                (
                    this.AffectedViews == input.AffectedViews ||
                    this.AffectedViews.Equals(input.AffectedViews)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Threshold.GetHashCode();
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                if (this.Severity != null)
                {
                    hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                }
                if (this.SampleSizeUnit != null)
                {
                    hashCode = (hashCode * 59) + this.SampleSizeUnit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SampleSize.GetHashCode();
                if (this.ResolvedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ResolvedAt.GetHashCode();
                }
                if (this.Notifications != null)
                {
                    hashCode = (hashCode * 59) + this.Notifications.GetHashCode();
                }
                if (this.NotificationRules != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationRules.GetHashCode();
                }
                if (this.Measurement != null)
                {
                    hashCode = (hashCode * 59) + this.Measurement.GetHashCode();
                }
                if (this.MeasuredValueOnClose != null)
                {
                    hashCode = (hashCode * 59) + this.MeasuredValueOnClose.GetHashCode();
                }
                if (this.MeasuredValue != null)
                {
                    hashCode = (hashCode * 59) + this.MeasuredValue.GetHashCode();
                }
                if (this.IncidentKey != null)
                {
                    hashCode = (hashCode * 59) + this.IncidentKey.GetHashCode();
                }
                if (this.Impact != null)
                {
                    hashCode = (hashCode * 59) + this.Impact.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ErrorDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorDescription.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Breakdowns != null)
                {
                    hashCode = (hashCode * 59) + this.Breakdowns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AffectedViewsPerHourOnOpen.GetHashCode();
                hashCode = (hashCode * 59) + this.AffectedViewsPerHour.GetHashCode();
                hashCode = (hashCode * 59) + this.AffectedViews.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
