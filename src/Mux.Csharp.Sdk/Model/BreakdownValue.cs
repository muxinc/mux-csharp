/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// BreakdownValue
    /// </summary>
    [DataContract(Name = "BreakdownValue")]
    public partial class BreakdownValue : IEquatable<BreakdownValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BreakdownValue" /> class.
        /// </summary>
        /// <param name="views">views.</param>
        /// <param name="value">value.</param>
        /// <param name="totalWatchTime">totalWatchTime.</param>
        /// <param name="totalPlayingTime">totalPlayingTime.</param>
        /// <param name="negativeImpact">negativeImpact.</param>
        /// <param name="field">field.</param>
        public BreakdownValue(long views = default(long), double value = default(double), long? totalWatchTime = default(long?), long? totalPlayingTime = default(long?), int negativeImpact = default(int), string field = default(string))
        {
            this.Views = views;
            this.Value = value;
            this.TotalWatchTime = totalWatchTime;
            this.TotalPlayingTime = totalPlayingTime;
            this.NegativeImpact = negativeImpact;
            this.Field = field;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [DataMember(Name = "views", EmitDefaultValue = false)]
        public long Views { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double Value { get; set; }

        /// <summary>
        /// Gets or Sets TotalWatchTime
        /// </summary>
        [DataMember(Name = "total_watch_time", EmitDefaultValue = true)]
        public long? TotalWatchTime { get; set; }

        /// <summary>
        /// Gets or Sets TotalPlayingTime
        /// </summary>
        [DataMember(Name = "total_playing_time", EmitDefaultValue = true)]
        public long? TotalPlayingTime { get; set; }

        /// <summary>
        /// Gets or Sets NegativeImpact
        /// </summary>
        [DataMember(Name = "negative_impact", EmitDefaultValue = false)]
        public int NegativeImpact { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BreakdownValue {\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  TotalWatchTime: ").Append(TotalWatchTime).Append("\n");
            sb.Append("  TotalPlayingTime: ").Append(TotalPlayingTime).Append("\n");
            sb.Append("  NegativeImpact: ").Append(NegativeImpact).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BreakdownValue);
        }

        /// <summary>
        /// Returns true if BreakdownValue instances are equal
        /// </summary>
        /// <param name="input">Instance of BreakdownValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BreakdownValue input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Views == input.Views ||
                    this.Views.Equals(input.Views)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.TotalWatchTime == input.TotalWatchTime ||
                    (this.TotalWatchTime != null &&
                    this.TotalWatchTime.Equals(input.TotalWatchTime))
                ) && 
                (
                    this.TotalPlayingTime == input.TotalPlayingTime ||
                    (this.TotalPlayingTime != null &&
                    this.TotalPlayingTime.Equals(input.TotalPlayingTime))
                ) && 
                (
                    this.NegativeImpact == input.NegativeImpact ||
                    this.NegativeImpact.Equals(input.NegativeImpact)
                ) && 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Views.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.TotalWatchTime != null)
                {
                    hashCode = (hashCode * 59) + this.TotalWatchTime.GetHashCode();
                }
                if (this.TotalPlayingTime != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPlayingTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NegativeImpact.GetHashCode();
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
