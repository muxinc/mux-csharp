/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// Seconds delivered broken into resolution tiers. Each tier will only be displayed if there was content delivered in the tier.
    /// </summary>
    [DataContract(Name = "DeliveryReport_delivered_seconds_by_resolution")]
    public partial class DeliveryReportDeliveredSecondsByResolution : IEquatable<DeliveryReportDeliveredSecondsByResolution>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryReportDeliveredSecondsByResolution" /> class.
        /// </summary>
        /// <param name="tier2160p">Total number of delivered seconds during this time window that had a resolution larger than the 1440p tier (over 4,194,304 pixels total)..</param>
        /// <param name="tier1440p">Total number of delivered seconds during this time window that had a resolution larger than the 1080p tier but less than or equal to the 2160p tier (over 2,073,600 and &lt;&#x3D; 4,194,304 pixels total)..</param>
        /// <param name="tier1080p">Total number of delivered seconds during this time window that had a resolution larger than the 720p tier but less than or equal to the 1440p tier (over 921,600 and &lt;&#x3D; 2,073,600 pixels total)..</param>
        /// <param name="tier720p">Total number of delivered seconds during this time window that had a resolution within the 720p tier (up to 921,600 pixels total, based on typical 1280x720)..</param>
        /// <param name="tierAudioOnly">Total number of delivered seconds during this time window that had a resolution of audio only..</param>
        public DeliveryReportDeliveredSecondsByResolution(double tier2160p = default(double), double tier1440p = default(double), double tier1080p = default(double), double tier720p = default(double), double tierAudioOnly = default(double))
        {
            this.Tier2160p = tier2160p;
            this.Tier1440p = tier1440p;
            this.Tier1080p = tier1080p;
            this.Tier720p = tier720p;
            this.TierAudioOnly = tierAudioOnly;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Total number of delivered seconds during this time window that had a resolution larger than the 1440p tier (over 4,194,304 pixels total).
        /// </summary>
        /// <value>Total number of delivered seconds during this time window that had a resolution larger than the 1440p tier (over 4,194,304 pixels total).</value>
        [DataMember(Name = "tier_2160p", EmitDefaultValue = false)]
        public double Tier2160p { get; set; }

        /// <summary>
        /// Total number of delivered seconds during this time window that had a resolution larger than the 1080p tier but less than or equal to the 2160p tier (over 2,073,600 and &lt;&#x3D; 4,194,304 pixels total).
        /// </summary>
        /// <value>Total number of delivered seconds during this time window that had a resolution larger than the 1080p tier but less than or equal to the 2160p tier (over 2,073,600 and &lt;&#x3D; 4,194,304 pixels total).</value>
        [DataMember(Name = "tier_1440p", EmitDefaultValue = false)]
        public double Tier1440p { get; set; }

        /// <summary>
        /// Total number of delivered seconds during this time window that had a resolution larger than the 720p tier but less than or equal to the 1440p tier (over 921,600 and &lt;&#x3D; 2,073,600 pixels total).
        /// </summary>
        /// <value>Total number of delivered seconds during this time window that had a resolution larger than the 720p tier but less than or equal to the 1440p tier (over 921,600 and &lt;&#x3D; 2,073,600 pixels total).</value>
        [DataMember(Name = "tier_1080p", EmitDefaultValue = false)]
        public double Tier1080p { get; set; }

        /// <summary>
        /// Total number of delivered seconds during this time window that had a resolution within the 720p tier (up to 921,600 pixels total, based on typical 1280x720).
        /// </summary>
        /// <value>Total number of delivered seconds during this time window that had a resolution within the 720p tier (up to 921,600 pixels total, based on typical 1280x720).</value>
        [DataMember(Name = "tier_720p", EmitDefaultValue = false)]
        public double Tier720p { get; set; }

        /// <summary>
        /// Total number of delivered seconds during this time window that had a resolution of audio only.
        /// </summary>
        /// <value>Total number of delivered seconds during this time window that had a resolution of audio only.</value>
        [DataMember(Name = "tier_audio_only", EmitDefaultValue = false)]
        public double TierAudioOnly { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliveryReportDeliveredSecondsByResolution {\n");
            sb.Append("  Tier2160p: ").Append(Tier2160p).Append("\n");
            sb.Append("  Tier1440p: ").Append(Tier1440p).Append("\n");
            sb.Append("  Tier1080p: ").Append(Tier1080p).Append("\n");
            sb.Append("  Tier720p: ").Append(Tier720p).Append("\n");
            sb.Append("  TierAudioOnly: ").Append(TierAudioOnly).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryReportDeliveredSecondsByResolution);
        }

        /// <summary>
        /// Returns true if DeliveryReportDeliveredSecondsByResolution instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryReportDeliveredSecondsByResolution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryReportDeliveredSecondsByResolution input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tier2160p == input.Tier2160p ||
                    this.Tier2160p.Equals(input.Tier2160p)
                ) && 
                (
                    this.Tier1440p == input.Tier1440p ||
                    this.Tier1440p.Equals(input.Tier1440p)
                ) && 
                (
                    this.Tier1080p == input.Tier1080p ||
                    this.Tier1080p.Equals(input.Tier1080p)
                ) && 
                (
                    this.Tier720p == input.Tier720p ||
                    this.Tier720p.Equals(input.Tier720p)
                ) && 
                (
                    this.TierAudioOnly == input.TierAudioOnly ||
                    this.TierAudioOnly.Equals(input.TierAudioOnly)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Tier2160p.GetHashCode();
                hashCode = (hashCode * 59) + this.Tier1440p.GetHashCode();
                hashCode = (hashCode * 59) + this.Tier1080p.GetHashCode();
                hashCode = (hashCode * 59) + this.Tier720p.GetHashCode();
                hashCode = (hashCode * 59) + this.TierAudioOnly.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
