/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// GetMonitoringHistogramTimeseriesResponseMeta
    /// </summary>
    [DataContract(Name = "GetMonitoringHistogramTimeseriesResponse_meta")]
    public partial class GetMonitoringHistogramTimeseriesResponseMeta : IEquatable<GetMonitoringHistogramTimeseriesResponseMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMonitoringHistogramTimeseriesResponseMeta" /> class.
        /// </summary>
        /// <param name="bucketUnit">bucketUnit.</param>
        /// <param name="buckets">buckets.</param>
        public GetMonitoringHistogramTimeseriesResponseMeta(string bucketUnit = default(string), List<MonitoringHistogramTimeseriesBucket> buckets = default(List<MonitoringHistogramTimeseriesBucket>))
        {
            this.BucketUnit = bucketUnit;
            this.Buckets = buckets;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets BucketUnit
        /// </summary>
        [DataMember(Name = "bucket_unit", EmitDefaultValue = false)]
        public string BucketUnit { get; set; }

        /// <summary>
        /// Gets or Sets Buckets
        /// </summary>
        [DataMember(Name = "buckets", EmitDefaultValue = false)]
        public List<MonitoringHistogramTimeseriesBucket> Buckets { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMonitoringHistogramTimeseriesResponseMeta {\n");
            sb.Append("  BucketUnit: ").Append(BucketUnit).Append("\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMonitoringHistogramTimeseriesResponseMeta);
        }

        /// <summary>
        /// Returns true if GetMonitoringHistogramTimeseriesResponseMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMonitoringHistogramTimeseriesResponseMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMonitoringHistogramTimeseriesResponseMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BucketUnit == input.BucketUnit ||
                    (this.BucketUnit != null &&
                    this.BucketUnit.Equals(input.BucketUnit))
                ) && 
                (
                    this.Buckets == input.Buckets ||
                    this.Buckets != null &&
                    input.Buckets != null &&
                    this.Buckets.SequenceEqual(input.Buckets)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BucketUnit != null)
                {
                    hashCode = (hashCode * 59) + this.BucketUnit.GetHashCode();
                }
                if (this.Buckets != null)
                {
                    hashCode = (hashCode * 59) + this.Buckets.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
