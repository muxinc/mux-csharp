/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// CreateWebInputRequest
    /// </summary>
    [DataContract(Name = "CreateWebInputRequest")]
    public partial class CreateWebInputRequest : IEquatable<CreateWebInputRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Idle for value: idle
            /// </summary>
            [EnumMember(Value = "idle")]
            Idle = 1,

            /// <summary>
            /// Enum Launching for value: launching
            /// </summary>
            [EnumMember(Value = "launching")]
            Launching = 2,

            /// <summary>
            /// Enum Streaming for value: streaming
            /// </summary>
            [EnumMember(Value = "streaming")]
            Streaming = 3

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The resolution of the viewport of the Web Input&#39;s browser instance. Defaults to 1920x1080 if not set.
        /// </summary>
        /// <value>The resolution of the viewport of the Web Input&#39;s browser instance. Defaults to 1920x1080 if not set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResolutionEnum
        {
            /// <summary>
            /// Enum _1920x1080 for value: 1920x1080
            /// </summary>
            [EnumMember(Value = "1920x1080")]
            _1920x1080 = 1,

            /// <summary>
            /// Enum _1280x720 for value: 1280x720
            /// </summary>
            [EnumMember(Value = "1280x720")]
            _1280x720 = 2,

            /// <summary>
            /// Enum _1080x1920 for value: 1080x1920
            /// </summary>
            [EnumMember(Value = "1080x1920")]
            _1080x1920 = 3,

            /// <summary>
            /// Enum _720x1280 for value: 720x1280
            /// </summary>
            [EnumMember(Value = "720x1280")]
            _720x1280 = 4,

            /// <summary>
            /// Enum _1080x1080 for value: 1080x1080
            /// </summary>
            [EnumMember(Value = "1080x1080")]
            _1080x1080 = 5,

            /// <summary>
            /// Enum _720x720 for value: 720x720
            /// </summary>
            [EnumMember(Value = "720x720")]
            _720x720 = 6

        }


        /// <summary>
        /// The resolution of the viewport of the Web Input&#39;s browser instance. Defaults to 1920x1080 if not set.
        /// </summary>
        /// <value>The resolution of the viewport of the Web Input&#39;s browser instance. Defaults to 1920x1080 if not set.</value>
        [DataMember(Name = "resolution", EmitDefaultValue = false)]
        public ResolutionEnum? Resolution { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWebInputRequest" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the Web Input..</param>
        /// <param name="createdAt">Time the Web Input was created, defined as a Unix timestamp (seconds since epoch)..</param>
        /// <param name="url">The URL for the Web Input to load..</param>
        /// <param name="autoLaunch">When set to &#x60;true&#x60; the Web Input will automatically launch and start streaming immediately after creation.</param>
        /// <param name="liveStreamId">The Live Stream ID to broadcast this Web Input to.</param>
        /// <param name="status">status.</param>
        /// <param name="passthrough">Arbitrary metadata that will be included in the Web Input details and related webhooks. Can be used to store your own ID for the Web Input. **Max: 255 characters**..</param>
        /// <param name="resolution">The resolution of the viewport of the Web Input&#39;s browser instance. Defaults to 1920x1080 if not set. (default to ResolutionEnum._1920x1080).</param>
        /// <param name="timeout">The number of seconds that the Web Input should stream for before automatically shutting down. (default to 3600).</param>
        public CreateWebInputRequest(string id = default(string), string createdAt = default(string), string url = default(string), bool autoLaunch = default(bool), string liveStreamId = default(string), StatusEnum? status = default(StatusEnum?), string passthrough = default(string), ResolutionEnum? resolution = ResolutionEnum._1920x1080, int timeout = 3600)
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.Url = url;
            this.AutoLaunch = autoLaunch;
            this.LiveStreamId = liveStreamId;
            this.Status = status;
            this.Passthrough = passthrough;
            this.Resolution = resolution;
            this.Timeout = timeout;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the Web Input.
        /// </summary>
        /// <value>Unique identifier for the Web Input.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Time the Web Input was created, defined as a Unix timestamp (seconds since epoch).
        /// </summary>
        /// <value>Time the Web Input was created, defined as a Unix timestamp (seconds since epoch).</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The URL for the Web Input to load.
        /// </summary>
        /// <value>The URL for the Web Input to load.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// When set to &#x60;true&#x60; the Web Input will automatically launch and start streaming immediately after creation
        /// </summary>
        /// <value>When set to &#x60;true&#x60; the Web Input will automatically launch and start streaming immediately after creation</value>
        [DataMember(Name = "auto_launch", EmitDefaultValue = true)]
        public bool AutoLaunch { get; set; }

        /// <summary>
        /// The Live Stream ID to broadcast this Web Input to
        /// </summary>
        /// <value>The Live Stream ID to broadcast this Web Input to</value>
        [DataMember(Name = "live_stream_id", EmitDefaultValue = false)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Arbitrary metadata that will be included in the Web Input details and related webhooks. Can be used to store your own ID for the Web Input. **Max: 255 characters**.
        /// </summary>
        /// <value>Arbitrary metadata that will be included in the Web Input details and related webhooks. Can be used to store your own ID for the Web Input. **Max: 255 characters**.</value>
        [DataMember(Name = "passthrough", EmitDefaultValue = false)]
        public string Passthrough { get; set; }

        /// <summary>
        /// The number of seconds that the Web Input should stream for before automatically shutting down.
        /// </summary>
        /// <value>The number of seconds that the Web Input should stream for before automatically shutting down.</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public int Timeout { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWebInputRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AutoLaunch: ").Append(AutoLaunch).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Passthrough: ").Append(Passthrough).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateWebInputRequest);
        }

        /// <summary>
        /// Returns true if CreateWebInputRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateWebInputRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWebInputRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.AutoLaunch == input.AutoLaunch ||
                    this.AutoLaunch.Equals(input.AutoLaunch)
                ) && 
                (
                    this.LiveStreamId == input.LiveStreamId ||
                    (this.LiveStreamId != null &&
                    this.LiveStreamId.Equals(input.LiveStreamId))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Passthrough == input.Passthrough ||
                    (this.Passthrough != null &&
                    this.Passthrough.Equals(input.Passthrough))
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    this.Resolution.Equals(input.Resolution)
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AutoLaunch.GetHashCode();
                if (this.LiveStreamId != null)
                {
                    hashCode = (hashCode * 59) + this.LiveStreamId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Passthrough != null)
                {
                    hashCode = (hashCode * 59) + this.Passthrough.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Resolution.GetHashCode();
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
