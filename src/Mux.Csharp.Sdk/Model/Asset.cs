/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// Asset
    /// </summary>
    [DataContract(Name = "Asset")]
    public partial class Asset : IEquatable<Asset>, IValidatableObject
    {
        /// <summary>
        /// The status of the asset.
        /// </summary>
        /// <value>The status of the asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Preparing for value: preparing
            /// </summary>
            [EnumMember(Value = "preparing")]
            Preparing = 1,

            /// <summary>
            /// Enum Ready for value: ready
            /// </summary>
            [EnumMember(Value = "ready")]
            Ready = 2,

            /// <summary>
            /// Enum Errored for value: errored
            /// </summary>
            [EnumMember(Value = "errored")]
            Errored = 3

        }


        /// <summary>
        /// The status of the asset.
        /// </summary>
        /// <value>The status of the asset.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MaxStoredResolutionEnum
        {
            /// <summary>
            /// Enum AudioOnly for value: Audio only
            /// </summary>
            [EnumMember(Value = "Audio only")]
            AudioOnly = 1,

            /// <summary>
            /// Enum SD for value: SD
            /// </summary>
            [EnumMember(Value = "SD")]
            SD = 2,

            /// <summary>
            /// Enum HD for value: HD
            /// </summary>
            [EnumMember(Value = "HD")]
            HD = 3,

            /// <summary>
            /// Enum FHD for value: FHD
            /// </summary>
            [EnumMember(Value = "FHD")]
            FHD = 4,

            /// <summary>
            /// Enum UHD for value: UHD
            /// </summary>
            [EnumMember(Value = "UHD")]
            UHD = 5

        }


        /// <summary>
        /// This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.</value>
        [DataMember(Name = "max_stored_resolution", EmitDefaultValue = false)]
        [Obsolete]
        public MaxStoredResolutionEnum? MaxStoredResolution { get; set; }
        /// <summary>
        /// The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.
        /// </summary>
        /// <value>The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResolutionTierEnum
        {
            /// <summary>
            /// Enum AudioOnly for value: audio-only
            /// </summary>
            [EnumMember(Value = "audio-only")]
            AudioOnly = 1,

            /// <summary>
            /// Enum _720p for value: 720p
            /// </summary>
            [EnumMember(Value = "720p")]
            _720p = 2,

            /// <summary>
            /// Enum _1080p for value: 1080p
            /// </summary>
            [EnumMember(Value = "1080p")]
            _1080p = 3,

            /// <summary>
            /// Enum _1440p for value: 1440p
            /// </summary>
            [EnumMember(Value = "1440p")]
            _1440p = 4,

            /// <summary>
            /// Enum _2160p for value: 2160p
            /// </summary>
            [EnumMember(Value = "2160p")]
            _2160p = 5

        }


        /// <summary>
        /// The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.
        /// </summary>
        /// <value>The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.</value>
        [DataMember(Name = "resolution_tier", EmitDefaultValue = false)]
        public ResolutionTierEnum? ResolutionTier { get; set; }
        /// <summary>
        /// Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.
        /// </summary>
        /// <value>Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MaxResolutionTierEnum
        {
            /// <summary>
            /// Enum _1080p for value: 1080p
            /// </summary>
            [EnumMember(Value = "1080p")]
            _1080p = 1,

            /// <summary>
            /// Enum _1440p for value: 1440p
            /// </summary>
            [EnumMember(Value = "1440p")]
            _1440p = 2,

            /// <summary>
            /// Enum _2160p for value: 2160p
            /// </summary>
            [EnumMember(Value = "2160p")]
            _2160p = 3

        }


        /// <summary>
        /// Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.
        /// </summary>
        /// <value>Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.</value>
        [DataMember(Name = "max_resolution_tier", EmitDefaultValue = false)]
        public MaxResolutionTierEnum? MaxResolutionTier { get; set; }
        /// <summary>
        /// This field is deprecated. Please use &#x60;video_quality&#x60; instead. The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;video_quality&#x60; instead. The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EncodingTierEnum
        {
            /// <summary>
            /// Enum Smart for value: smart
            /// </summary>
            [EnumMember(Value = "smart")]
            Smart = 1,

            /// <summary>
            /// Enum Baseline for value: baseline
            /// </summary>
            [EnumMember(Value = "baseline")]
            Baseline = 2

        }


        /// <summary>
        /// This field is deprecated. Please use &#x60;video_quality&#x60; instead. The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>This field is deprecated. Please use &#x60;video_quality&#x60; instead. The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [DataMember(Name = "encoding_tier", EmitDefaultValue = false)]
        [Obsolete]
        public EncodingTierEnum? EncodingTier { get; set; }
        /// <summary>
        /// The video quality controls the cost, quality, and available platform features for the asset. By default the &#x60;plus&#x60; video quality is used. This field replaces the deprecated &#x60;encoding_tier&#x60; value. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>The video quality controls the cost, quality, and available platform features for the asset. By default the &#x60;plus&#x60; video quality is used. This field replaces the deprecated &#x60;encoding_tier&#x60; value. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VideoQualityEnum
        {
            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 1,

            /// <summary>
            /// Enum Plus for value: plus
            /// </summary>
            [EnumMember(Value = "plus")]
            Plus = 2

        }


        /// <summary>
        /// The video quality controls the cost, quality, and available platform features for the asset. By default the &#x60;plus&#x60; video quality is used. This field replaces the deprecated &#x60;encoding_tier&#x60; value. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)
        /// </summary>
        /// <value>The video quality controls the cost, quality, and available platform features for the asset. By default the &#x60;plus&#x60; video quality is used. This field replaces the deprecated &#x60;encoding_tier&#x60; value. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers)</value>
        [DataMember(Name = "video_quality", EmitDefaultValue = false)]
        public VideoQualityEnum? VideoQuality { get; set; }
        /// <summary>
        /// Defines MasterAccess
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MasterAccessEnum
        {
            /// <summary>
            /// Enum Temporary for value: temporary
            /// </summary>
            [EnumMember(Value = "temporary")]
            Temporary = 1,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 2

        }


        /// <summary>
        /// Gets or Sets MasterAccess
        /// </summary>
        [DataMember(Name = "master_access", EmitDefaultValue = false)]
        public MasterAccessEnum? MasterAccess { get; set; }
        /// <summary>
        /// Defines Mp4Support
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum Mp4SupportEnum
        {
            /// <summary>
            /// Enum Standard for value: standard
            /// </summary>
            [EnumMember(Value = "standard")]
            Standard = 1,

            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 2,

            /// <summary>
            /// Enum Capped1080p for value: capped-1080p
            /// </summary>
            [EnumMember(Value = "capped-1080p")]
            Capped1080p = 3,

            /// <summary>
            /// Enum AudioOnly for value: audio-only
            /// </summary>
            [EnumMember(Value = "audio-only")]
            AudioOnly = 4,

            /// <summary>
            /// Enum AudioOnlycapped1080p for value: audio-only,capped-1080p
            /// </summary>
            [EnumMember(Value = "audio-only,capped-1080p")]
            AudioOnlycapped1080p = 5

        }


        /// <summary>
        /// Gets or Sets Mp4Support
        /// </summary>
        [DataMember(Name = "mp4_support", EmitDefaultValue = false)]
        public Mp4SupportEnum? Mp4Support { get; set; }
        /// <summary>
        /// The type of ingest used to create the asset.
        /// </summary>
        /// <value>The type of ingest used to create the asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IngestTypeEnum
        {
            /// <summary>
            /// Enum OnDemandUrl for value: on_demand_url
            /// </summary>
            [EnumMember(Value = "on_demand_url")]
            OnDemandUrl = 1,

            /// <summary>
            /// Enum OnDemandDirectUpload for value: on_demand_direct_upload
            /// </summary>
            [EnumMember(Value = "on_demand_direct_upload")]
            OnDemandDirectUpload = 2,

            /// <summary>
            /// Enum OnDemandClip for value: on_demand_clip
            /// </summary>
            [EnumMember(Value = "on_demand_clip")]
            OnDemandClip = 3,

            /// <summary>
            /// Enum LiveRtmp for value: live_rtmp
            /// </summary>
            [EnumMember(Value = "live_rtmp")]
            LiveRtmp = 4,

            /// <summary>
            /// Enum LiveSrt for value: live_srt
            /// </summary>
            [EnumMember(Value = "live_srt")]
            LiveSrt = 5

        }


        /// <summary>
        /// The type of ingest used to create the asset.
        /// </summary>
        /// <value>The type of ingest used to create the asset.</value>
        [DataMember(Name = "ingest_type", EmitDefaultValue = false)]
        public IngestTypeEnum? IngestType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Asset" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the Asset. Max 255 characters..</param>
        /// <param name="createdAt">Time the Asset was created, defined as a Unix timestamp (seconds since epoch)..</param>
        /// <param name="status">The status of the asset..</param>
        /// <param name="duration">The duration of the asset in seconds (max duration for a single asset is 12 hours)..</param>
        /// <param name="maxStoredResolution">This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored..</param>
        /// <param name="resolutionTier">The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset..</param>
        /// <param name="maxResolutionTier">Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;..</param>
        /// <param name="encodingTier">This field is deprecated. Please use &#x60;video_quality&#x60; instead. The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers).</param>
        /// <param name="videoQuality">The video quality controls the cost, quality, and available platform features for the asset. By default the &#x60;plus&#x60; video quality is used. This field replaces the deprecated &#x60;encoding_tier&#x60; value. [See the video quality guide for more details.](https://docs.mux.com/guides/use-encoding-tiers).</param>
        /// <param name="maxStoredFrameRate">The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined..</param>
        /// <param name="aspectRatio">The aspect ratio of the asset in the form of &#x60;width:height&#x60;, for example &#x60;16:9&#x60;..</param>
        /// <param name="playbackIds">An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/play-your-videos) for more details..</param>
        /// <param name="tracks">The individual media tracks that make up an asset..</param>
        /// <param name="errors">errors.</param>
        /// <param name="perTitleEncode">perTitleEncode.</param>
        /// <param name="uploadId">Unique identifier for the Direct Upload. This is an optional parameter added when the asset is created from a direct upload..</param>
        /// <param name="isLive">Indicates whether the live stream that created this asset is currently &#x60;active&#x60; and not in &#x60;idle&#x60; state. This is an optional parameter added when the asset is created from a live stream..</param>
        /// <param name="passthrough">Arbitrary user-supplied metadata set for the asset. Max 255 characters..</param>
        /// <param name="liveStreamId">Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream..</param>
        /// <param name="master">master.</param>
        /// <param name="masterAccess">masterAccess (default to MasterAccessEnum.None).</param>
        /// <param name="mp4Support">mp4Support (default to Mp4SupportEnum.None).</param>
        /// <param name="sourceAssetId">Asset Identifier of the video used as the source for creating the clip..</param>
        /// <param name="normalizeAudio">Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets. (default to false).</param>
        /// <param name="staticRenditions">staticRenditions.</param>
        /// <param name="recordingTimes">An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream. Additionally any time slate media is inserted during brief interruptions in the live stream media or times when the live streaming software disconnects, a recording session representing the slate media will be added with a \&quot;slate\&quot; type..</param>
        /// <param name="nonStandardInputReasons">nonStandardInputReasons.</param>
        /// <param name="test">True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs..</param>
        /// <param name="ingestType">The type of ingest used to create the asset..</param>
        public Asset(string id = default(string), string createdAt = default(string), StatusEnum? status = default(StatusEnum?), double duration = default(double), MaxStoredResolutionEnum? maxStoredResolution = default(MaxStoredResolutionEnum?), ResolutionTierEnum? resolutionTier = default(ResolutionTierEnum?), MaxResolutionTierEnum? maxResolutionTier = default(MaxResolutionTierEnum?), EncodingTierEnum? encodingTier = default(EncodingTierEnum?), VideoQualityEnum? videoQuality = default(VideoQualityEnum?), double maxStoredFrameRate = default(double), string aspectRatio = default(string), List<PlaybackID> playbackIds = default(List<PlaybackID>), List<Track> tracks = default(List<Track>), AssetErrors errors = default(AssetErrors), bool perTitleEncode = default(bool), string uploadId = default(string), bool isLive = default(bool), string passthrough = default(string), string liveStreamId = default(string), AssetMaster master = default(AssetMaster), MasterAccessEnum? masterAccess = MasterAccessEnum.None, Mp4SupportEnum? mp4Support = Mp4SupportEnum.None, string sourceAssetId = default(string), bool normalizeAudio = false, AssetStaticRenditions staticRenditions = default(AssetStaticRenditions), List<AssetRecordingTimes> recordingTimes = default(List<AssetRecordingTimes>), AssetNonStandardInputReasons nonStandardInputReasons = default(AssetNonStandardInputReasons), bool test = default(bool), IngestTypeEnum? ingestType = default(IngestTypeEnum?))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.Status = status;
            this.Duration = duration;
            this.MaxStoredResolution = maxStoredResolution;
            this.ResolutionTier = resolutionTier;
            this.MaxResolutionTier = maxResolutionTier;
            this.EncodingTier = encodingTier;
            this.VideoQuality = videoQuality;
            this.MaxStoredFrameRate = maxStoredFrameRate;
            this.AspectRatio = aspectRatio;
            this.PlaybackIds = playbackIds;
            this.Tracks = tracks;
            this.Errors = errors;
            this.PerTitleEncode = perTitleEncode;
            this.UploadId = uploadId;
            this.IsLive = isLive;
            this.Passthrough = passthrough;
            this.LiveStreamId = liveStreamId;
            this.Master = master;
            this.MasterAccess = masterAccess;
            this.Mp4Support = mp4Support;
            this.SourceAssetId = sourceAssetId;
            this.NormalizeAudio = normalizeAudio;
            this.StaticRenditions = staticRenditions;
            this.RecordingTimes = recordingTimes;
            this.NonStandardInputReasons = nonStandardInputReasons;
            this.Test = test;
            this.IngestType = ingestType;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the Asset. Max 255 characters.
        /// </summary>
        /// <value>Unique identifier for the Asset. Max 255 characters.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Time the Asset was created, defined as a Unix timestamp (seconds since epoch).
        /// </summary>
        /// <value>Time the Asset was created, defined as a Unix timestamp (seconds since epoch).</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The duration of the asset in seconds (max duration for a single asset is 12 hours).
        /// </summary>
        /// <value>The duration of the asset in seconds (max duration for a single asset is 12 hours).</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public double Duration { get; set; }

        /// <summary>
        /// The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined.
        /// </summary>
        /// <value>The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined.</value>
        [DataMember(Name = "max_stored_frame_rate", EmitDefaultValue = false)]
        public double MaxStoredFrameRate { get; set; }

        /// <summary>
        /// The aspect ratio of the asset in the form of &#x60;width:height&#x60;, for example &#x60;16:9&#x60;.
        /// </summary>
        /// <value>The aspect ratio of the asset in the form of &#x60;width:height&#x60;, for example &#x60;16:9&#x60;.</value>
        [DataMember(Name = "aspect_ratio", EmitDefaultValue = false)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/play-your-videos) for more details.
        /// </summary>
        /// <value>An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/play-your-videos) for more details.</value>
        [DataMember(Name = "playback_ids", EmitDefaultValue = false)]
        public List<PlaybackID> PlaybackIds { get; set; }

        /// <summary>
        /// The individual media tracks that make up an asset.
        /// </summary>
        /// <value>The individual media tracks that make up an asset.</value>
        [DataMember(Name = "tracks", EmitDefaultValue = false)]
        public List<Track> Tracks { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public AssetErrors Errors { get; set; }

        /// <summary>
        /// Gets or Sets PerTitleEncode
        /// </summary>
        [DataMember(Name = "per_title_encode", EmitDefaultValue = true)]
        [Obsolete]
        public bool PerTitleEncode { get; set; }

        /// <summary>
        /// Unique identifier for the Direct Upload. This is an optional parameter added when the asset is created from a direct upload.
        /// </summary>
        /// <value>Unique identifier for the Direct Upload. This is an optional parameter added when the asset is created from a direct upload.</value>
        [DataMember(Name = "upload_id", EmitDefaultValue = false)]
        public string UploadId { get; set; }

        /// <summary>
        /// Indicates whether the live stream that created this asset is currently &#x60;active&#x60; and not in &#x60;idle&#x60; state. This is an optional parameter added when the asset is created from a live stream.
        /// </summary>
        /// <value>Indicates whether the live stream that created this asset is currently &#x60;active&#x60; and not in &#x60;idle&#x60; state. This is an optional parameter added when the asset is created from a live stream.</value>
        [DataMember(Name = "is_live", EmitDefaultValue = true)]
        public bool IsLive { get; set; }

        /// <summary>
        /// Arbitrary user-supplied metadata set for the asset. Max 255 characters.
        /// </summary>
        /// <value>Arbitrary user-supplied metadata set for the asset. Max 255 characters.</value>
        [DataMember(Name = "passthrough", EmitDefaultValue = false)]
        public string Passthrough { get; set; }

        /// <summary>
        /// Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream.
        /// </summary>
        /// <value>Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream.</value>
        [DataMember(Name = "live_stream_id", EmitDefaultValue = false)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or Sets Master
        /// </summary>
        [DataMember(Name = "master", EmitDefaultValue = false)]
        public AssetMaster Master { get; set; }

        /// <summary>
        /// Asset Identifier of the video used as the source for creating the clip.
        /// </summary>
        /// <value>Asset Identifier of the video used as the source for creating the clip.</value>
        [DataMember(Name = "source_asset_id", EmitDefaultValue = false)]
        public string SourceAssetId { get; set; }

        /// <summary>
        /// Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.
        /// </summary>
        /// <value>Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.</value>
        [DataMember(Name = "normalize_audio", EmitDefaultValue = true)]
        public bool NormalizeAudio { get; set; }

        /// <summary>
        /// Gets or Sets StaticRenditions
        /// </summary>
        [DataMember(Name = "static_renditions", EmitDefaultValue = false)]
        public AssetStaticRenditions StaticRenditions { get; set; }

        /// <summary>
        /// An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream. Additionally any time slate media is inserted during brief interruptions in the live stream media or times when the live streaming software disconnects, a recording session representing the slate media will be added with a \&quot;slate\&quot; type.
        /// </summary>
        /// <value>An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream. Additionally any time slate media is inserted during brief interruptions in the live stream media or times when the live streaming software disconnects, a recording session representing the slate media will be added with a \&quot;slate\&quot; type.</value>
        [DataMember(Name = "recording_times", EmitDefaultValue = false)]
        public List<AssetRecordingTimes> RecordingTimes { get; set; }

        /// <summary>
        /// Gets or Sets NonStandardInputReasons
        /// </summary>
        [DataMember(Name = "non_standard_input_reasons", EmitDefaultValue = false)]
        public AssetNonStandardInputReasons NonStandardInputReasons { get; set; }

        /// <summary>
        /// True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs.
        /// </summary>
        /// <value>True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs.</value>
        [DataMember(Name = "test", EmitDefaultValue = true)]
        public bool Test { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Asset {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  MaxStoredResolution: ").Append(MaxStoredResolution).Append("\n");
            sb.Append("  ResolutionTier: ").Append(ResolutionTier).Append("\n");
            sb.Append("  MaxResolutionTier: ").Append(MaxResolutionTier).Append("\n");
            sb.Append("  EncodingTier: ").Append(EncodingTier).Append("\n");
            sb.Append("  VideoQuality: ").Append(VideoQuality).Append("\n");
            sb.Append("  MaxStoredFrameRate: ").Append(MaxStoredFrameRate).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  PlaybackIds: ").Append(PlaybackIds).Append("\n");
            sb.Append("  Tracks: ").Append(Tracks).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  PerTitleEncode: ").Append(PerTitleEncode).Append("\n");
            sb.Append("  UploadId: ").Append(UploadId).Append("\n");
            sb.Append("  IsLive: ").Append(IsLive).Append("\n");
            sb.Append("  Passthrough: ").Append(Passthrough).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  Master: ").Append(Master).Append("\n");
            sb.Append("  MasterAccess: ").Append(MasterAccess).Append("\n");
            sb.Append("  Mp4Support: ").Append(Mp4Support).Append("\n");
            sb.Append("  SourceAssetId: ").Append(SourceAssetId).Append("\n");
            sb.Append("  NormalizeAudio: ").Append(NormalizeAudio).Append("\n");
            sb.Append("  StaticRenditions: ").Append(StaticRenditions).Append("\n");
            sb.Append("  RecordingTimes: ").Append(RecordingTimes).Append("\n");
            sb.Append("  NonStandardInputReasons: ").Append(NonStandardInputReasons).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  IngestType: ").Append(IngestType).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Asset);
        }

        /// <summary>
        /// Returns true if Asset instances are equal
        /// </summary>
        /// <param name="input">Instance of Asset to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Asset input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.MaxStoredResolution == input.MaxStoredResolution ||
                    this.MaxStoredResolution.Equals(input.MaxStoredResolution)
                ) && 
                (
                    this.ResolutionTier == input.ResolutionTier ||
                    this.ResolutionTier.Equals(input.ResolutionTier)
                ) && 
                (
                    this.MaxResolutionTier == input.MaxResolutionTier ||
                    this.MaxResolutionTier.Equals(input.MaxResolutionTier)
                ) && 
                (
                    this.EncodingTier == input.EncodingTier ||
                    this.EncodingTier.Equals(input.EncodingTier)
                ) && 
                (
                    this.VideoQuality == input.VideoQuality ||
                    this.VideoQuality.Equals(input.VideoQuality)
                ) && 
                (
                    this.MaxStoredFrameRate == input.MaxStoredFrameRate ||
                    this.MaxStoredFrameRate.Equals(input.MaxStoredFrameRate)
                ) && 
                (
                    this.AspectRatio == input.AspectRatio ||
                    (this.AspectRatio != null &&
                    this.AspectRatio.Equals(input.AspectRatio))
                ) && 
                (
                    this.PlaybackIds == input.PlaybackIds ||
                    this.PlaybackIds != null &&
                    input.PlaybackIds != null &&
                    this.PlaybackIds.SequenceEqual(input.PlaybackIds)
                ) && 
                (
                    this.Tracks == input.Tracks ||
                    this.Tracks != null &&
                    input.Tracks != null &&
                    this.Tracks.SequenceEqual(input.Tracks)
                ) && 
                (
                    this.Errors == input.Errors ||
                    (this.Errors != null &&
                    this.Errors.Equals(input.Errors))
                ) && 
                (
                    this.PerTitleEncode == input.PerTitleEncode ||
                    this.PerTitleEncode.Equals(input.PerTitleEncode)
                ) && 
                (
                    this.UploadId == input.UploadId ||
                    (this.UploadId != null &&
                    this.UploadId.Equals(input.UploadId))
                ) && 
                (
                    this.IsLive == input.IsLive ||
                    this.IsLive.Equals(input.IsLive)
                ) && 
                (
                    this.Passthrough == input.Passthrough ||
                    (this.Passthrough != null &&
                    this.Passthrough.Equals(input.Passthrough))
                ) && 
                (
                    this.LiveStreamId == input.LiveStreamId ||
                    (this.LiveStreamId != null &&
                    this.LiveStreamId.Equals(input.LiveStreamId))
                ) && 
                (
                    this.Master == input.Master ||
                    (this.Master != null &&
                    this.Master.Equals(input.Master))
                ) && 
                (
                    this.MasterAccess == input.MasterAccess ||
                    this.MasterAccess.Equals(input.MasterAccess)
                ) && 
                (
                    this.Mp4Support == input.Mp4Support ||
                    this.Mp4Support.Equals(input.Mp4Support)
                ) && 
                (
                    this.SourceAssetId == input.SourceAssetId ||
                    (this.SourceAssetId != null &&
                    this.SourceAssetId.Equals(input.SourceAssetId))
                ) && 
                (
                    this.NormalizeAudio == input.NormalizeAudio ||
                    this.NormalizeAudio.Equals(input.NormalizeAudio)
                ) && 
                (
                    this.StaticRenditions == input.StaticRenditions ||
                    (this.StaticRenditions != null &&
                    this.StaticRenditions.Equals(input.StaticRenditions))
                ) && 
                (
                    this.RecordingTimes == input.RecordingTimes ||
                    this.RecordingTimes != null &&
                    input.RecordingTimes != null &&
                    this.RecordingTimes.SequenceEqual(input.RecordingTimes)
                ) && 
                (
                    this.NonStandardInputReasons == input.NonStandardInputReasons ||
                    (this.NonStandardInputReasons != null &&
                    this.NonStandardInputReasons.Equals(input.NonStandardInputReasons))
                ) && 
                (
                    this.Test == input.Test ||
                    this.Test.Equals(input.Test)
                ) && 
                (
                    this.IngestType == input.IngestType ||
                    this.IngestType.Equals(input.IngestType)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxStoredResolution.GetHashCode();
                hashCode = (hashCode * 59) + this.ResolutionTier.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxResolutionTier.GetHashCode();
                hashCode = (hashCode * 59) + this.EncodingTier.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoQuality.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxStoredFrameRate.GetHashCode();
                if (this.AspectRatio != null)
                {
                    hashCode = (hashCode * 59) + this.AspectRatio.GetHashCode();
                }
                if (this.PlaybackIds != null)
                {
                    hashCode = (hashCode * 59) + this.PlaybackIds.GetHashCode();
                }
                if (this.Tracks != null)
                {
                    hashCode = (hashCode * 59) + this.Tracks.GetHashCode();
                }
                if (this.Errors != null)
                {
                    hashCode = (hashCode * 59) + this.Errors.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PerTitleEncode.GetHashCode();
                if (this.UploadId != null)
                {
                    hashCode = (hashCode * 59) + this.UploadId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsLive.GetHashCode();
                if (this.Passthrough != null)
                {
                    hashCode = (hashCode * 59) + this.Passthrough.GetHashCode();
                }
                if (this.LiveStreamId != null)
                {
                    hashCode = (hashCode * 59) + this.LiveStreamId.GetHashCode();
                }
                if (this.Master != null)
                {
                    hashCode = (hashCode * 59) + this.Master.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MasterAccess.GetHashCode();
                hashCode = (hashCode * 59) + this.Mp4Support.GetHashCode();
                if (this.SourceAssetId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceAssetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NormalizeAudio.GetHashCode();
                if (this.StaticRenditions != null)
                {
                    hashCode = (hashCode * 59) + this.StaticRenditions.GetHashCode();
                }
                if (this.RecordingTimes != null)
                {
                    hashCode = (hashCode * 59) + this.RecordingTimes.GetHashCode();
                }
                if (this.NonStandardInputReasons != null)
                {
                    hashCode = (hashCode * 59) + this.NonStandardInputReasons.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Test.GetHashCode();
                hashCode = (hashCode * 59) + this.IngestType.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
