/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// Upload
    /// </summary>
    [DataContract(Name = "Upload")]
    public partial class Upload : IEquatable<Upload>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Waiting for value: waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            Waiting = 1,

            /// <summary>
            /// Enum AssetCreated for value: asset_created
            /// </summary>
            [EnumMember(Value = "asset_created")]
            AssetCreated = 2,

            /// <summary>
            /// Enum Errored for value: errored
            /// </summary>
            [EnumMember(Value = "errored")]
            Errored = 3,

            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 4,

            /// <summary>
            /// Enum TimedOut for value: timed_out
            /// </summary>
            [EnumMember(Value = "timed_out")]
            TimedOut = 5

        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Upload" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the Direct Upload..</param>
        /// <param name="timeout">Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked &#x60;timed_out&#x60; (default to 3600).</param>
        /// <param name="status">status.</param>
        /// <param name="newAssetSettings">newAssetSettings.</param>
        /// <param name="assetId">Only set once the upload is in the &#x60;asset_created&#x60; state..</param>
        /// <param name="error">error.</param>
        /// <param name="corsOrigin">If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers..</param>
        /// <param name="url">The URL to upload the associated source media to..</param>
        /// <param name="test">Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a &#x60;test&#x60; Asset..</param>
        public Upload(string id = default(string), int timeout = 3600, StatusEnum? status = default(StatusEnum?), CreateAssetRequest newAssetSettings = default(CreateAssetRequest), string assetId = default(string), UploadError error = default(UploadError), string corsOrigin = default(string), string url = default(string), bool test = default(bool))
        {
            this.Id = id;
            this.Timeout = timeout;
            this.Status = status;
            this.NewAssetSettings = newAssetSettings;
            this.AssetId = assetId;
            this.Error = error;
            this.CorsOrigin = corsOrigin;
            this.Url = url;
            this.Test = test;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the Direct Upload.
        /// </summary>
        /// <value>Unique identifier for the Direct Upload.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked &#x60;timed_out&#x60;
        /// </summary>
        /// <value>Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked &#x60;timed_out&#x60;</value>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public int Timeout { get; set; }

        /// <summary>
        /// Gets or Sets NewAssetSettings
        /// </summary>
        [DataMember(Name = "new_asset_settings", EmitDefaultValue = false)]
        public CreateAssetRequest NewAssetSettings { get; set; }

        /// <summary>
        /// Only set once the upload is in the &#x60;asset_created&#x60; state.
        /// </summary>
        /// <value>Only set once the upload is in the &#x60;asset_created&#x60; state.</value>
        [DataMember(Name = "asset_id", EmitDefaultValue = false)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "error", EmitDefaultValue = false)]
        public UploadError Error { get; set; }

        /// <summary>
        /// If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.
        /// </summary>
        /// <value>If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.</value>
        [DataMember(Name = "cors_origin", EmitDefaultValue = false)]
        public string CorsOrigin { get; set; }

        /// <summary>
        /// The URL to upload the associated source media to.
        /// </summary>
        /// <value>The URL to upload the associated source media to.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a &#x60;test&#x60; Asset.
        /// </summary>
        /// <value>Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a &#x60;test&#x60; Asset.</value>
        [DataMember(Name = "test", EmitDefaultValue = true)]
        public bool Test { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Upload {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  NewAssetSettings: ").Append(NewAssetSettings).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  CorsOrigin: ").Append(CorsOrigin).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Upload);
        }

        /// <summary>
        /// Returns true if Upload instances are equal
        /// </summary>
        /// <param name="input">Instance of Upload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Upload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.NewAssetSettings == input.NewAssetSettings ||
                    (this.NewAssetSettings != null &&
                    this.NewAssetSettings.Equals(input.NewAssetSettings))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.CorsOrigin == input.CorsOrigin ||
                    (this.CorsOrigin != null &&
                    this.CorsOrigin.Equals(input.CorsOrigin))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Test == input.Test ||
                    this.Test.Equals(input.Test)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.NewAssetSettings != null)
                {
                    hashCode = (hashCode * 59) + this.NewAssetSettings.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.CorsOrigin != null)
                {
                    hashCode = (hashCode * 59) + this.CorsOrigin.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Test.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Timeout (int) maximum
            if (this.Timeout > (int)604800)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value less than or equal to 604800.", new [] { "Timeout" });
            }

            // Timeout (int) minimum
            if (this.Timeout < (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 60.", new [] { "Timeout" });
            }

            yield break;
        }
    }

}
