/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// An object containing the current status of any static renditions (mp4s). The object does not exist if no static renditions have been requested. See [Download your videos](https://docs.mux.com/guides/enable-static-mp4-renditions) for more information.
    /// </summary>
    [DataContract(Name = "Asset_static_renditions")]
    public partial class AssetStaticRenditions : IEquatable<AssetStaticRenditions>, IValidatableObject
    {
        /// <summary>
        /// Indicates the status of downloadable MP4 versions of this asset.
        /// </summary>
        /// <value>Indicates the status of downloadable MP4 versions of this asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Ready for value: ready
            /// </summary>
            [EnumMember(Value = "ready")]
            Ready = 1,

            /// <summary>
            /// Enum Preparing for value: preparing
            /// </summary>
            [EnumMember(Value = "preparing")]
            Preparing = 2,

            /// <summary>
            /// Enum Disabled for value: disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            Disabled = 3,

            /// <summary>
            /// Enum Errored for value: errored
            /// </summary>
            [EnumMember(Value = "errored")]
            Errored = 4

        }


        /// <summary>
        /// Indicates the status of downloadable MP4 versions of this asset.
        /// </summary>
        /// <value>Indicates the status of downloadable MP4 versions of this asset.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetStaticRenditions" /> class.
        /// </summary>
        /// <param name="status">Indicates the status of downloadable MP4 versions of this asset. (default to StatusEnum.Disabled).</param>
        /// <param name="files">Array of file objects..</param>
        public AssetStaticRenditions(StatusEnum? status = StatusEnum.Disabled, List<AssetStaticRenditionsFiles> files = default(List<AssetStaticRenditionsFiles>))
        {
            this.Status = status;
            this.Files = files;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Array of file objects.
        /// </summary>
        /// <value>Array of file objects.</value>
        [DataMember(Name = "files", EmitDefaultValue = false)]
        public List<AssetStaticRenditionsFiles> Files { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetStaticRenditions {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetStaticRenditions);
        }

        /// <summary>
        /// Returns true if AssetStaticRenditions instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetStaticRenditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetStaticRenditions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Files != null)
                {
                    hashCode = (hashCode * 59) + this.Files.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
